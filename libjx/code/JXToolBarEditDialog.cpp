/******************************************************************************
 JXToolBarEditDialog.cpp

	BASE CLASS = public JXModalDialogDirector

	Copyright (C) 1998 by Glenn W. Bach.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include "JXToolBarEditDialog.h"
#include <jx-af/jcore/JTree.h>
#include "JXToolBarNode.h"
#include "JXToolBarEditWidget.h"
#include <jx-af/jcore/JNamedTreeList.h>

#include "JXToolBar.h"

#include "JXWindow.h"
#include "JXStaticText.h"
#include "JXMenuBar.h"
#include "JXScrollbarSet.h"
#include "JXApplication.h"
#include "JXTextButton.h"
#include "JXDocumentManager.h"
#include "JXDocumentMenu.h"
#include "JXImage.h"
#include "JXTextCheckbox.h"
#include "JXAtLeastOneCBGroup.h"

#include <jx-af/jcore/JFileArray.h>
#include <jx-af/jcore/jGlobals.h>
#include <jx-af/jcore/jAssert.h>

const JCoordinate kCurrentPrefsVersion = 1;

/******************************************************************************
 Constructor

 *****************************************************************************/

JXToolBarEditDialog::JXToolBarEditDialog
	(
	JTree*						tree,
	const bool					show,
	const bool					useSmall,
	const JXToolBarButton::Type	type
	)
	:
	JXModalDialogDirector(true),
	itsTree(tree)
{
	BuildWindow();

	itsShowToolBarCB->SetState(show);
	itsUseSmallButtonsCB->SetState(useSmall);
	if (type == JXToolBarButton::kImage || type == JXToolBarButton::kBoth)
	{
		itsShowImagesCB->SetState(true);
	}
	if (type == JXToolBarButton::kText || type == JXToolBarButton::kBoth)
	{
		itsShowTextCB->SetState(true);
	}

}

/******************************************************************************
 Destructor

 *****************************************************************************/

JXToolBarEditDialog::~JXToolBarEditDialog()
{
}

/******************************************************************************
 BuildWindow

 ******************************************************************************/

void
JXToolBarEditDialog::BuildWindow()
{
// begin JXLayout

	auto* window = jnew JXWindow(this, 320,430, JString::empty);

	auto* scrollbarSet =
		jnew JXScrollbarSet(window,
					JXWidget::kHElastic, JXWidget::kVElastic, 15,100, 290,290);

	auto* cancelButton =
		jnew JXTextButton(JGetString("cancelButton::JXToolBarEditDialog::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedBottom, 50,400, 70,20);
	assert( cancelButton != nullptr );
	cancelButton->SetShortcuts(JGetString("cancelButton::JXToolBarEditDialog::shortcuts::JXLayout"));

	auto* okButton =
		jnew JXTextButton(JGetString("okButton::JXToolBarEditDialog::JXLayout"), window,
					JXWidget::kFixedRight, JXWidget::kFixedBottom, 200,400, 70,20);
	assert( okButton != nullptr );
	okButton->SetShortcuts(JGetString("okButton::JXToolBarEditDialog::shortcuts::JXLayout"));

	auto* prompt =
		jnew JXStaticText(JGetString("prompt::JXToolBarEditDialog::JXLayout"), window,
					JXWidget::kHElastic, JXWidget::kFixedTop, 20,10, 270,30);
	assert( prompt != nullptr );

	itsShowToolBarCB =
		jnew JXTextCheckbox(JGetString("itsShowToolBarCB::JXToolBarEditDialog::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedTop, 20,50, 135,20);
	assert( itsShowToolBarCB != nullptr );
	itsShowToolBarCB->SetShortcuts(JGetString("itsShowToolBarCB::JXToolBarEditDialog::shortcuts::JXLayout"));

	itsUseSmallButtonsCB =
		jnew JXTextCheckbox(JGetString("itsUseSmallButtonsCB::JXToolBarEditDialog::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedTop, 20,70, 135,20);
	assert( itsUseSmallButtonsCB != nullptr );
	itsUseSmallButtonsCB->SetShortcuts(JGetString("itsUseSmallButtonsCB::JXToolBarEditDialog::shortcuts::JXLayout"));

	itsShowImagesCB =
		jnew JXTextCheckbox(JGetString("itsShowImagesCB::JXToolBarEditDialog::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedTop, 160,50, 140,20);
	assert( itsShowImagesCB != nullptr );
	itsShowImagesCB->SetShortcuts(JGetString("itsShowImagesCB::JXToolBarEditDialog::shortcuts::JXLayout"));

	itsShowTextCB =
		jnew JXTextCheckbox(JGetString("itsShowTextCB::JXToolBarEditDialog::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedTop, 160,70, 130,20);
	assert( itsShowTextCB != nullptr );
	itsShowTextCB->SetShortcuts(JGetString("itsShowTextCB::JXToolBarEditDialog::shortcuts::JXLayout"));

// end JXLayout

	window->SetTitle(JGetString("WindowTitle::JXToolBarEditDialog"));
	SetButtons(okButton, cancelButton);

	jnew JXAtLeastOneCBGroup(2, itsShowImagesCB, itsShowTextCB);

	auto* list = jnew JNamedTreeList(itsTree);

	itsWidget =
		jnew JXToolBarEditWidget(list, scrollbarSet, scrollbarSet->GetScrollEnclosure(),
								JXWidget::kHElastic, JXWidget::kVElastic,
								0,0,10,10);
	assert(itsWidget != nullptr);
	itsWidget->FitToEnclosure();
}

/******************************************************************************
 ReadSetup

	This uses assert() to check the version number because we cannot use
	a marker to skip the data (since it contains strings), so it is the
	client's responsibility to check whether or not the file can be
	read (via a higher level version number).

 ******************************************************************************/

void
JXToolBarEditDialog::ReadSetup
	(
	std::istream& is
	)
{
	JCoordinate version;
	is >> version;
	assert( version <= kCurrentPrefsVersion );
	GetWindow()->ReadGeometry(is);
}

/******************************************************************************
 WriteSetup

 ******************************************************************************/

void
JXToolBarEditDialog::WriteSetup
	(
	std::ostream& os
	)
	const
{
	os << ' ' << kCurrentPrefsVersion << ' ';
	GetWindow()->WriteGeometry(os);
	os << ' ';
}

/******************************************************************************
 ShowToolBar (public)

 ******************************************************************************/

bool
JXToolBarEditDialog::ShowToolBar()
{
	return itsShowToolBarCB->IsChecked();
}

/******************************************************************************
 UseSmallButtons (public)

 ******************************************************************************/

bool
JXToolBarEditDialog::UseSmallButtons()
{
	return itsUseSmallButtonsCB->IsChecked();
}

/******************************************************************************
 GetType (public)

 ******************************************************************************/

JXToolBarButton::Type
JXToolBarEditDialog::GetType()
	const
{
	bool images = itsShowImagesCB->IsChecked();
	bool text	= itsShowTextCB->IsChecked();

	if (images && !text)
	{
		return JXToolBarButton::kImage;
	}
	else if (text && !images)
	{
		return JXToolBarButton::kText;
	}
	return JXToolBarButton::kBoth;
}
