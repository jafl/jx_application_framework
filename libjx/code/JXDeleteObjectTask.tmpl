#ifndef _T_JXDeleteObjectTask
#define _T_JXDeleteObjectTask

/******************************************************************************
 JXDeleteObjectTask.tmpl

	This provides a very simple garbage collection system.  It tosses the
	object after everything has settled down, i.e., once the event loop is
	allowed to continue.

	For derived classes of JXDirector, use JXCloseDirectorTask instead.

	This is an idle task rather than an urgent task because it might be
	unsafe to perform until after the idle task stack has returned to the
	same level, e.g., after blocking dialogs have finished.

	BASE CLASS = JXIdleTask, virtual JBroadcaster

	Copyright (C) 2000 by John Lindal.

 ******************************************************************************/

#include "jx-af/jx/JXDeleteObjectTask.h"
#include <jx-af/jcore/jAssert.h>

/******************************************************************************
 Delete (static)

 ******************************************************************************/

template <class T>
void
JXDeleteObjectTask<T>::Delete
	(
	T* obj
	)
{
	JXDeleteObjectTask<T>* task = jnew JXDeleteObjectTask<T>(obj);
	assert( task != nullptr );
	task->Start();
}

/******************************************************************************
 Constructor (protected)

 ******************************************************************************/

template <class T>
JXDeleteObjectTask<T>::JXDeleteObjectTask
	(
	T* obj
	)
	:
	JXIdleTask(0)
{
	itsObject = obj;

	JBroadcaster* b = dynamic_cast<JBroadcaster*>(obj);
	if (b != nullptr)
	{
		ListenTo(b);
	}
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JXDeleteObjectTask<T>::~JXDeleteObjectTask()
{
	jdelete itsObject;
}

/******************************************************************************
 Perform

 ******************************************************************************/

template <class T>
void
JXDeleteObjectTask<T>::Perform
	(
	const Time	delta,
	Time*		maxSleepTime
	)
{
	jdelete itsObject;
	itsObject = nullptr;
	jdelete this;
}

/******************************************************************************
 ReceiveGoingAway (virtual protected)

 ******************************************************************************/

template <class T>
void
JXDeleteObjectTask<T>::ReceiveGoingAway
	(
	JBroadcaster* sender
	)
{
	JBroadcaster* b = dynamic_cast<JBroadcaster*>(itsObject);
	if (sender == b)
	{
		itsObject = nullptr;
	}
	else
	{
		JBroadcaster::ReceiveGoingAway(sender);
	}
}

#endif
