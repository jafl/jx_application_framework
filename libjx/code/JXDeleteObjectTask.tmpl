#ifndef _T_JXDeleteObjectTask
#define _T_JXDeleteObjectTask

/******************************************************************************
 JXDeleteObjectTask.tmpl

	This provides a very simple garbage collection system.  It tosses the
	object after everything has settled down, i.e., once the event loop is
	allowed to continue.

	For derived classes of JXDirector, use JXCloseDirectorTask instead.

	BASE CLASS = JXUrgentTask

	Copyright (C) 2000 by John Lindal.

 ******************************************************************************/

#include "JXDeleteObjectTask.h"

/******************************************************************************
 Delete (static)

 ******************************************************************************/

template <class T>
void
JXDeleteObjectTask<T>::Delete
	(
	T* obj
	)
{
	static_assert(std::is_base_of<JBroadcaster,T>::value, "T must derive from JBroadcaster");

	JXDeleteObjectTask<T>* task = jnew JXDeleteObjectTask<T>(obj);
	task->Go();
}

/******************************************************************************
 Constructor (protected)

 ******************************************************************************/

template <class T>
JXDeleteObjectTask<T>::JXDeleteObjectTask
	(
	T* obj
	)
	:
	JXUrgentTask(obj)
{
	itsObject = obj;
}

/******************************************************************************
 Destructor (protected)

 ******************************************************************************/

template <class T>
JXDeleteObjectTask<T>::~JXDeleteObjectTask()
{
}

/******************************************************************************
 Perform (virtual protected)

 ******************************************************************************/

template <class T>
void
JXDeleteObjectTask<T>::Perform()
{
	jdelete itsObject;
}

#endif
