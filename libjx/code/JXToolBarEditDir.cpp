/******************************************************************************
 JXToolBarEditDir.cpp

	BASE CLASS = public JXDocument

	Copyright (C) 1998 by Glenn W. Bach.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include "JXToolBarEditDir.h"
#include <JTree.h>
#include "JXToolBarNode.h"
#include "JXToolBarEditWidget.h"
#include <JNamedTreeList.h>

#include "JXToolBar.h"

#include "JXWindow.h"
#include "JXStaticText.h"
#include "JXMenuBar.h"
#include "JXScrollbarSet.h"
#include "JXApplication.h"
#include "JXTextButton.h"
#include "JXDocumentManager.h"
#include "JXDocumentMenu.h"
#include "JXImage.h"
#include "JXTextCheckbox.h"
#include "JXAtLeastOneCBGroup.h"

#include <JChooseSaveFile.h>
#include <JFileArray.h>
#include <jGlobals.h>
#include <jAssert.h>

const JCoordinate kCurrentPrefsVersion = 1;

/******************************************************************************
 Constructor

 *****************************************************************************/

JXToolBarEditDir::JXToolBarEditDir
	(
	JTree*						tree,
	const bool				show,
	const bool				useSmall,
	const JXToolBarButton::Type	type,
	JXDirector*				supervisor
	)
	:
   JXDialogDirector(supervisor, true),
   itsTree(tree),
   itsTreeChanged(false)
{
	UseModalPlacement(false);

	BuildWindow();
	ListenTo(itsTree);

	itsShowToolBarCB->SetState(show);
	itsUseSmallButtonsCB->SetState(useSmall);
	if ((type == JXToolBarButton::kImage) || (type == JXToolBarButton::kBoth))
		{
		itsShowImagesCB->SetState(true);
		}
	if ((type == JXToolBarButton::kText) || (type == JXToolBarButton::kBoth))
		{
		itsShowTextCB->SetState(true);
		}

}

/******************************************************************************
 Destructor

 *****************************************************************************/

JXToolBarEditDir::~JXToolBarEditDir()
{
}

/******************************************************************************
 BuildWindow

 ******************************************************************************/

void
JXToolBarEditDir::BuildWindow()
{
// begin JXLayout

	auto* window = jnew JXWindow(this, 320,430, JString::empty);
	assert( window != nullptr );

	auto* scrollbarSet =
		jnew JXScrollbarSet(window,
					JXWidget::kHElastic, JXWidget::kVElastic, 15,100, 290,290);
	assert( scrollbarSet != nullptr );

	auto* cancelButton =
		jnew JXTextButton(JGetString("cancelButton::JXToolBarEditDir::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedBottom, 50,400, 70,20);
	assert( cancelButton != nullptr );
	cancelButton->SetShortcuts(JGetString("cancelButton::JXToolBarEditDir::shortcuts::JXLayout"));

	auto* okButton =
		jnew JXTextButton(JGetString("okButton::JXToolBarEditDir::JXLayout"), window,
					JXWidget::kFixedRight, JXWidget::kFixedBottom, 200,400, 70,20);
	assert( okButton != nullptr );
	okButton->SetShortcuts(JGetString("okButton::JXToolBarEditDir::shortcuts::JXLayout"));

	auto* prompt =
		jnew JXStaticText(JGetString("prompt::JXToolBarEditDir::JXLayout"), window,
					JXWidget::kHElastic, JXWidget::kFixedTop, 20,10, 270,30);
	assert( prompt != nullptr );

	itsShowToolBarCB =
		jnew JXTextCheckbox(JGetString("itsShowToolBarCB::JXToolBarEditDir::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedTop, 20,50, 135,20);
	assert( itsShowToolBarCB != nullptr );
	itsShowToolBarCB->SetShortcuts(JGetString("itsShowToolBarCB::JXToolBarEditDir::shortcuts::JXLayout"));

	itsUseSmallButtonsCB =
		jnew JXTextCheckbox(JGetString("itsUseSmallButtonsCB::JXToolBarEditDir::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedTop, 20,70, 135,20);
	assert( itsUseSmallButtonsCB != nullptr );
	itsUseSmallButtonsCB->SetShortcuts(JGetString("itsUseSmallButtonsCB::JXToolBarEditDir::shortcuts::JXLayout"));

	itsShowImagesCB =
		jnew JXTextCheckbox(JGetString("itsShowImagesCB::JXToolBarEditDir::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedTop, 160,50, 140,20);
	assert( itsShowImagesCB != nullptr );
	itsShowImagesCB->SetShortcuts(JGetString("itsShowImagesCB::JXToolBarEditDir::shortcuts::JXLayout"));

	itsShowTextCB =
		jnew JXTextCheckbox(JGetString("itsShowTextCB::JXToolBarEditDir::JXLayout"), window,
					JXWidget::kFixedLeft, JXWidget::kFixedTop, 160,70, 130,20);
	assert( itsShowTextCB != nullptr );
	itsShowTextCB->SetShortcuts(JGetString("itsShowTextCB::JXToolBarEditDir::shortcuts::JXLayout"));

// end JXLayout

	window->SetTitle(JGetString("WindowTitle::JXToolBarEditDir"));
	window->PlaceAsDialogWindow();
	window->LockCurrentMinSize();

	SetButtons(okButton, cancelButton);

	auto* group =
		jnew JXAtLeastOneCBGroup(2, itsShowImagesCB, itsShowTextCB);
	assert( group != nullptr );

	auto* list = jnew JNamedTreeList(itsTree);
	assert(list != nullptr);

	itsWidget =
		jnew JXToolBarEditWidget(list, scrollbarSet, scrollbarSet->GetScrollEnclosure(),
								JXWidget::kHElastic, JXWidget::kVElastic,
								0,0,10,10);
	assert(itsWidget != nullptr);
	itsWidget->FitToEnclosure();
	ListenTo(itsWidget);
}

/******************************************************************************
 ReadPrefs

	This uses assert() to check the version number because we cannot use
	a marker to skip the data (since it contains strings), so it is the
	client's responsibility to check whether or not the file can be
	read (via a higher level version number).

 ******************************************************************************/

void
JXToolBarEditDir::ReadSetup
	(
	std::istream& is
	)
{
	JCoordinate version;
	is >> version;
	assert( version <= kCurrentPrefsVersion );
	GetWindow()->ReadGeometry(is);
}

/******************************************************************************
 WritePrefs

 ******************************************************************************/

void
JXToolBarEditDir::WriteSetup
	(
	std::ostream& os
	)
{
	os << ' ' << kCurrentPrefsVersion << ' ';
	GetWindow()->WriteGeometry(os);
	os << ' ';
}

/******************************************************************************
 Receive (protected)

 ******************************************************************************/

void
JXToolBarEditDir::Receive
	(
	JBroadcaster*  sender,
	const Message& message
	)
{
	if (sender == itsTree && message.Is(JTree::kNodeChanged))
		{
		itsTreeChanged = true;
		}
	else
		{
		JXDialogDirector::Receive(sender, message);
		}
}

/******************************************************************************
 ShowToolBar (public)

 ******************************************************************************/

bool
JXToolBarEditDir::ShowToolBar()
{
	return itsShowToolBarCB->IsChecked();
}

/******************************************************************************
 UseSmallButtons (public)

 ******************************************************************************/

bool
JXToolBarEditDir::UseSmallButtons()
{
	return itsUseSmallButtonsCB->IsChecked();
}

/******************************************************************************
 GetType (public)

 ******************************************************************************/

JXToolBarButton::Type
JXToolBarEditDir::GetType()
{
	bool images = itsShowImagesCB->IsChecked();
	bool text	= itsShowTextCB->IsChecked();

	if (images && !text)
		{
		return JXToolBarButton::kImage;
		}
	else if (text && !images)
		{
		return JXToolBarButton::kText;
		}
	return JXToolBarButton::kBoth;
}
