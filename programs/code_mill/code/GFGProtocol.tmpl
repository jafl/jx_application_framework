#ifndef _T_GFGProtocol
#define _T_GFGProtocol

/******************************************************************************
 GFGProtocol.cc

	Broadcasts whenever data arrives.

	BASE CLASS = ACE_Svc_Handler, virtual JBroadcaster

	Copyright © 1998 by John Lindal. All rights reserved.

 ******************************************************************************/

#include <GFGProtocol.h>
#include <jAssert.h>

/******************************************************************************
 Constructor

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
GFGProtocol<ACE_PEER_STREAM_2>::GFGProtocol()
	:
	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>()
{
	GFGProtocolX();
}

template <ACE_PEER_STREAM_1>
GFGProtocol<ACE_PEER_STREAM_2>::GFGProtocol
	(
	const ACE_HANDLE fd
	)
	:
	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>()
{
	GFGProtocolX();

	set_handle(fd);
	open(NULL);
}

// private

template <ACE_PEER_STREAM_1>
void
GFGProtocol<ACE_PEER_STREAM_2>::GFGProtocolX()
{
	itsBufferSize = GFGProtocolT::kDefaultBufferSize;

	itsBuffer = new JCharacter [ itsBufferSize ];
	assert( itsBuffer != NULL );

	itsInHandleInputFlag = kJFalse;
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
GFGProtocol<ACE_PEER_STREAM_2>::~GFGProtocol()
{
	delete [] itsBuffer;
}

/******************************************************************************
 Read

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
GFGProtocol<ACE_PEER_STREAM_2>::Read
	(
	JString* buffer
	)
{
	assert( buffer != NULL );
	*buffer = itsData;
	itsData.Clear();
}

/******************************************************************************
 Write

	Stores the next complete line in *line and removes it from the queue.
	Returns kJFalse if no complete lines are available.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
GFGProtocol<ACE_PEER_STREAM_2>::Write
	(
	const JCharacter* data
	)
{
	const JSize dataLen = strlen(data);

	iovec buffer[2];
	buffer[0].iov_base = const_cast<char*>(data);
	buffer[0].iov_len  = dataLen;

	JSize count = 1;
	if (data [ dataLen-1 ] != '\n')
		{
		count              = 2;
		buffer[1].iov_base = const_cast<char*>("\n");
		buffer[1].iov_len  = 1;
		}

	ACE::writev_n(get_handle(), buffer, count);
}

/******************************************************************************
 handle_input

	This is called when we receive data.  It is also safe for anybody else
	to call it.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
int
GFGProtocol<ACE_PEER_STREAM_2>::handle_input
	(
	ACE_HANDLE
	)
{
	// protect against recursive calls

	if (itsInHandleInputFlag)
		{
		return 0;
		}
	itsInHandleInputFlag = kJTrue;

	// read newly received data

	const ssize_t count = (peer()).recv(itsBuffer, itsBufferSize);
	if (count > 0)
		{
		itsData.Append(itsBuffer, count);
		Broadcast(GFGProtocolT::ReadReady());
		}

	itsInHandleInputFlag = kJFalse;
	return 0;
}

// If JTemplateType is defined, then user wants to instantiate
// a template immediately.  The user cannot instantiate more than one
// template per file with this method.  This should not be a problem.

#if defined JTemplateType
	#define JTemplateName GFGProtocol
	#include <instantiate_template.h>
	#undef JTemplateName

//	instantiated by JCore
//	template class ACE_Svc_Handler<JTemplateType, ACE_SYNCH>;
#endif

#endif
