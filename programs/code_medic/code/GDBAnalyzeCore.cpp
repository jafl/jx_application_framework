/******************************************************************************
 GDBAnalyzeCore.cpp

	BASE CLASS = CMCommand

	Copyright (C) 2002 by John Lindal.

 ******************************************************************************/

#include "GDBAnalyzeCore.h"
#include "cmGlobals.h"
#include <JStringIterator.h>
#include <JRegex.h>
#include <jFileUtil.h>
#include <jAssert.h>

/******************************************************************************
 Constructor

 ******************************************************************************/

GDBAnalyzeCore::GDBAnalyzeCore
	(
	const JString& cmd
	)
	:
	CMCommand(cmd, true, false)
{
}

/******************************************************************************
 Destructor

 ******************************************************************************/

GDBAnalyzeCore::~GDBAnalyzeCore()
{
}

/******************************************************************************
 HandleSuccess (virtual protected)

 ******************************************************************************/

static const JRegex programNamePattern = "Core was generated by `([^\n]+)'";

void
GDBAnalyzeCore::HandleSuccess
	(
	const JString& data
	)
{
	CMLink* link = CMGetLink();

	JString programName;

	JStringIterator iter(data);
	if (iter.Next(programNamePattern))
		{
		programName = iter.GetLastMatch().GetSubstring(1);
		programName.TrimWhitespace();
		}
	else
		{
		link->Log("GDBAnalyzeCore failed to match");
		}
	iter.Invalidate();

	JString coreFullName;
	if (!programName.IsEmpty() && link->GetCore(&coreFullName))
		{
		JString programFullName = programName;
		JString path, coreName;
		if (JIsRelativePath(programFullName))
			{
			JSplitPathAndName(coreFullName, &path, &coreName);
			programFullName = JCombinePathAndName(path, programFullName);
			}

		bool found = false;
		JStringIterator iter(&programFullName, kJIteratorStartAtEnd);
		while (true)
			{
			if (JFileExecutable(programFullName))
				{
				found = true;
				break;
				}

			// try stripping off last word

			if (!iter.Prev(" "))
				{
				break;
				}
			iter.RemoveAllNext();
			}
		iter.Invalidate();

		// if all else fails, ask user

		if (!found)
			{
			const JUtf8Byte* map[] =
				{
				"name", programName.GetBytes()
				};
			const JString instr = JGetString("FindProgram::GDBAnalyzeCore", map, sizeof(map));
			found = JGetChooseSaveFile()->ChooseFile(JGetString("Prompt::GDBAnalyzeCore"),
													 instr, &programFullName);
			}

		// must load core after program so shared libs get loaded
		// and source file gets displayed

		if (found)
			{
			link->SetProgram(programFullName);
			link->SetCore(coreFullName);
			}
		}
}
