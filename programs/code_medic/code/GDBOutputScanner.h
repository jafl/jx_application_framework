// code/GDBOutputScanner.h generated by reflex 3.0.10 from code/GDBOutputScanner.l

#ifndef REFLEX_CODE_GDBOUTPUTSCANNER_H
#define REFLEX_CODE_GDBOUTPUTSCANNER_H
#define IN_HEADER 1
#define REFLEX_VERSION "3.0.10"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "code/GDBOutputScanner.h"
#define REFLEX_OPTION_lex                 NextToken
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           GDBOutput
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_outfile             "code/GDBOutputScanner.cpp"
#define REFLEX_OPTION_token_type          GDBOutput::Scanner::Token
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "code/GDBOutputScanner.l"

/*
Copyright (C) 2007 by John Lindal.

This scanner reads output from gdb --interpreter=mi2.
*/

#include "CMLocation.h"
#include "CMBreakpoint.h"
#include <JStringIterator.h>
#include <JRegex.h>
#include <jAssert.h>

#define RETURN(x)	return Token(x, itsData)

// splitting up square brackets protects them from flex 2.5.33 on OSX
static const JRegex pidRegex1("(?:child|attached) (?:process|Pid|PID|thread) ([""[:digit:]""]+)");
static const JRegex pidRegex2("\\(LWP ([""[:digit:]""]+)");
static const JRegex pidRegex3("process ([""[:digit:]""]+)");
static const JRegex attachRegex1("(?:process|Pid|PID) ([""[:digit:]""]+)");
static const JRegex pingRegex(":Medic debugger ready:([""[:digit:]""]+)");


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace GDBOutput {

class Scanner : public reflex::AbstractLexer<reflex::Matcher> {
#line 28 "code/GDBOutputScanner.l"


public:

	enum TokenType
	{
		kEOF = 258,
		kProgramOutput,
		kErrorOutput,
		kCommandOutput,
		kCommandResult,
		kDebugOutput,

		kMaybeReadyForInput,	// OSX
		kReadyForInput,
		kDebuggerFinished,

		kPrepareToLoadSymbols,
		kFinishedLoadingSymbolsFromProgram,
		kNoSymbolsInProgram,
		kSymbolsReloaded,

		kCoreChanged,

		kAttachedToProcess,
		kDetachingFromProcess,

		kProgramStarting,
		kBeginGetPID,
		kProgramPID,
		kEndGetPID,

		kProgramStoppedAtLocation,
		kProgramRunning,
		kProgramFinished,
		kProgramKilled,

		kBeginMedicCmd,
		kEndMedicCmd,

		kBeginMedicIgnoreCmd,
		kEndMedicIgnoreCmd,

		kBreakpointsChanged,
		kFrameChanged,
		kThreadChanged,
		kValueChanged,

		kFrameChangedAndProgramStoppedAtLocation,

		kBeginScriptDefinition,
		kPlugInMessage
	};

	struct Data
	{
		JUInt		number;
		CMLocation*	pLocation;
		JString*	pString;
	};

	struct Token
	{
		TokenType	type;
		Data		data;

		Token()
			:
			type(kProgramOutput)
			{ };

		Token(const TokenType t, const Data& d)
			:
			type(t), data(d)
			{ };
	};

public:

	void	Reset();
	void	AppendInput(const JString& string);

	virtual int	wrap();

	static void	TranslateMIOutput(JString* data);

private:

	JString	itsPartialBuffer;
	JString	itsInputBuffer;

	// "Registers" -- temporary buffers for use in Token

	Data			itsData;
	CMLocation		itsLocation;
	JString			itsString;

private:

	void	ExtractCommandId(const JUtf8Byte* str, const JSize len);

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int ACQUIRE_PID = 1;
  static const int ATTACHING_TO_PROCESS = 2;
  static const int MEDIC_COMMAND = 3;
  static const int READING_SYMBOLS = 4;
  virtual GDBOutput::Scanner::Token NextToken(void);
  GDBOutput::Scanner::Token NextToken(const reflex::Input& input)
  {
    in(input);
    return NextToken();
  }
  GDBOutput::Scanner::Token NextToken(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return NextToken();
  }
};

} // namespace GDBOutput

#endif
