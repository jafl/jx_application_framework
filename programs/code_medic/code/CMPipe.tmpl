#ifndef _T_CMPipe
#define _T_CMPipe

/******************************************************************************
 CMPipe.cc

	Broadcasts whenever data arrives.

	BASE CLASS = ACE_Svc_Handler, virtual JBroadcaster

	Copyright (C) 1998 by John Lindal. All rights reserved.

 ******************************************************************************/

#include "CMPipe.h"
#include <jAssert.h>

/******************************************************************************
 Constructor

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
CMPipe<ACE_PEER_STREAM_2>::CMPipe()
	:
	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>()
{
	CMPipeX();
}

template <ACE_PEER_STREAM_1>
CMPipe<ACE_PEER_STREAM_2>::CMPipe
	(
	const ACE_HANDLE fd
	)
	:
	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>()
{
	CMPipeX();

	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>::set_handle(fd);
	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>::open(NULL);
}

// private

template <ACE_PEER_STREAM_1>
void
CMPipe<ACE_PEER_STREAM_2>::CMPipeX()
{
	itsBufferSize = CMPipeT::kDefaultBufferSize;

	itsBuffer = jnew JCharacter [ itsBufferSize ];
	assert( itsBuffer != NULL );

	itsInHandleInputFlag = kJFalse;
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
CMPipe<ACE_PEER_STREAM_2>::~CMPipe()
{
	jdelete [] itsBuffer;
}

/******************************************************************************
 Read

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
CMPipe<ACE_PEER_STREAM_2>::Read
	(
	JString* buffer
	)
{
	assert( buffer != NULL );
	*buffer = itsData;
	itsData.Clear();
}

/******************************************************************************
 Write

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
CMPipe<ACE_PEER_STREAM_2>::Write
	(
	const JCharacter* data
	)
{
	const JSize dataLen = strlen(data);

	iovec buffer[2];
	buffer[0].iov_base = const_cast<char*>(data);
	buffer[0].iov_len  = dataLen;

	JSize count = 1;
	if (data [ dataLen-1 ] != '\n')
		{
		count              = 2;
		buffer[1].iov_base = const_cast<char*>("\n");
		buffer[1].iov_len  = 1;
		}

	ACE::writev_n(ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>::get_handle(), buffer, count);
}

/******************************************************************************
 handle_input

	This is called when we receive data.  It is also safe for anybody else
	to call it.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
int
CMPipe<ACE_PEER_STREAM_2>::handle_input
	(
	ACE_HANDLE
	)
{
	// protect against recursive calls

	if (itsInHandleInputFlag)
		{
		return 0;
		}
	itsInHandleInputFlag = kJTrue;

	// read newly received data

	const ssize_t count =
		(ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>::peer()).recv(itsBuffer, itsBufferSize);
	if (count > 0)
		{
		itsData.Append(itsBuffer, count);
		Broadcast(CMPipeT::ReadReady());
		}

	itsInHandleInputFlag = kJFalse;
	return 0;
}

#endif
