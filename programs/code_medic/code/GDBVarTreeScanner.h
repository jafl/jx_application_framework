// code/GDBVarTreeScanner.h generated by reflex 3.0.10 from code/GDBVarTreeScanner.l

#ifndef REFLEX_CODE_GDBVARTREESCANNER_H
#define REFLEX_CODE_GDBVARTREESCANNER_H
#define IN_HEADER 1
#define REFLEX_VERSION "3.0.10"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_bison               true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "code/GDBVarTreeScanner.h"
#define REFLEX_OPTION_lex                 NextToken
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           GDBVarTree
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "code/GDBVarTreeScanner.cpp"
#define REFLEX_OPTION_params              YYSTYPE* lvalp
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "code/GDBVarTreeScanner.l"

/*
Copyright (C) 2001 by John Lindal.

This scanner reads output from gdb's print command.
*/

#include "CMVarNode.h"
#include "GDBVarGroupInfo.h"
#include <JString.h>
#include <JStringIterator.h>
#include "GDBVarTreeParserY.hpp"
#include <jAssert.h>

#define NEW_TOKEN(s) \
	lvalp->pString = jnew JString(s); \
	assert( lvalp->pString != nullptr );


#ifdef __cplusplus

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace GDBVarTree {

class Scanner : public reflex::AbstractLexer<reflex::Matcher> {
#line 25 "code/GDBVarTreeScanner.l"


private:

	JString	itsString;
	JSize	itsBracketCount;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
#line 33 "code/GDBVarTreeScanner.l"

	itsBracketCount = 0;

  }
  static const int INITIAL = 0;
  static const int DOUBLE_QUOTE_STATE = 1;
  static const int SINGLE_QUOTE_STATE = 2;
  static const int BRACKET_STATE = 3;
  static const int PAREN_STATE = 4;
  static const int TEMPLATE_NAME_STATE = 5;
  static const int TEMPLATE_NAME_BRACKET_STATE = 6;
  virtual int NextToken(YYSTYPE* lvalp);
  int NextToken(const reflex::Input& input, YYSTYPE* lvalp)
  {
    in(input);
    return NextToken(lvalp);
  }
  int NextToken(const reflex::Input& input, std::ostream *os, YYSTYPE* lvalp)
  {
    in(input);
    if (os)
      out(*os);
    return NextToken(lvalp);
  }
};

} // namespace GDBVarTree

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON                                                                     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern GDBVarTree::Scanner YY_SCANNER;

#ifndef YY_EXTERN_C
#define YY_EXTERN_C
#endif

#else // !__cplusplus

#undef YY_EXTERN_C
#define YY_EXTERN_C

#endif // __cplusplus

YY_EXTERN_C int yylex(YYSTYPE* lvalp);

#endif
