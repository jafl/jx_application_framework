/******************************************************************************
 GMApp.cc

	BASE CLASS = public JXApplication

	Copyright © 1997 by Glenn W. Bach.  All rights reserved.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include <GMApp.h>
#include <GMMDIServer.h>
#include <GMessageTableDir.h>
#include <GMessageEditDir.h>
#include <GCheckPGPTask.h>
#include <GPrefsMgr.h>
#include <GInboxMgr.h>
#include <GLockFileTask.h>
#include "GMAboutDialog.h"
#include "GMailboxTreeDir.h"
#include "GAddressBookMgr.h"
#include "GAddressBookTreeDir.h"
#include "GMailboxChooseSaveFile.h"
#include "GMessageHeader.h"
#include "GMessageHeaderList.h"
#include "GMAccountManager.h"
#include "GMMailboxData.h"
#include "gMailUtils.h"
#include "GMStringData.h"
#include "GMGlobals.h"

#include <JXUserNotification.h>
#include <JXWindow.h>
#include <JXDisplay.h>
#include <JXChooseSaveFile.h>

#include <JFileArray.h>
#include <jFileUtil.h>
#include <jProcessUtil.h>
#include <jSysUtil.h>
#include <jFStreamUtil.h>
#include <jAssert.h>

static const JCharacter* kStateFileName		= ".arrow.session";
static const JCharacter* kStateFileSignature	= "arrow_sig";
static const JFileVersion kCurrentSessionVersion = 5;

static const JCharacter* kArrowFilesDir			= ".arrow_files";

static const JCharacter* kAppSignature			= "arrow";

const JCharacter* GMApp::kMailboxOpened			= "GMApp::kMailboxOpened";
const JCharacter* GMApp::kMailboxClosed			= "GMApp::kMailboxClosed";

/******************************************************************************
 Constructor

 *****************************************************************************/

GMApp::GMApp
	(
	int*		argc,
	char*		argv[],
	JBoolean*	displayAbout,
	JString*	prevVersStr
	)
	:
	JXApplication(argc, argv, kAppSignature, kGMDefaultStringData),
	itsTableDirs(NULL),
	itsHasFileDirectory(kJFalse),
	itsOpenPrefsAfterAbout(kJFalse),
	itsPrefsNew(kJFalse),
	itsAboutDialog(NULL)
{
	*displayAbout = GMCreateGlobals(this);

	if (!*displayAbout)
		{
		*prevVersStr = (GGetPrefsMgr())->GetArrowVersionStr();
		if (*prevVersStr == GMGetVersionNumberStr())
			{
			prevVersStr->Clear();
			}
		else
			{
			*displayAbout = kJTrue;
			if (prevVersStr->BeginsWith("1") || 
				prevVersStr->BeginsWith("0") ||
				prevVersStr->BeginsWith("2.0b"))
				{
				itsOpenPrefsAfterAbout	= kJTrue;
				}
			}
		}
	else
		{
		itsPrefsNew				= kJTrue;
		itsOpenPrefsAfterAbout	= kJTrue;
		prevVersStr->Clear();
		}

	GMMDIServer* mdi = new GMMDIServer(this);
	assert(mdi != NULL);

	itsTableDirs = new JPtrArray<GMessageTableDir>(JPtrArrayT::kForgetAll);
	assert(itsTableDirs != NULL);

	itsEditDirs = new JPtrArray<GMessageEditDir>(JPtrArrayT::kForgetAll);
	assert(itsEditDirs != NULL);

	itsLockTasks = new JPtrArray<GLockFileTask>(JPtrArrayT::kForgetAll);
	assert(itsLockTasks != NULL);

	if (*displayAbout)
		{
		if (!(JGetUserNotification())->AcceptLicense())
			{
			exit(0);
			}
		}

	JString home;
	if (JGetHomeDirectory(&home))
		{
		JAppendDirSeparator(&home);
		home += kArrowFilesDir;
		if (!JDirectoryExists(home))
			{
			JError err = JCreateDirectory(home);
			if (err.OK())
				{
				itsFileDirectory	= home;
				itsHasFileDirectory	= kJTrue;
				}
			}
		else
			{
			if (JKillDirectory(home))
				{
				JCreateDirectory(home);
				}
			if (JDirectoryExists(home))
				{
				itsFileDirectory	= home;
				itsHasFileDirectory	= kJTrue;
				}
			}
		}

	JBoolean ok = OpenSession();

	if (*argc > 1)
		{
		mdi->HandleCmdLineOptions(*argc, argv);
		}
	else if (!ok)
		{
		OpenSystemMailbox();
		}

	OpenMailboxWindowIfNeeded();

	ListenTo(GGetPrefsMgr());

/*	JString test("pulp");
	JPtrArray<JString> names;
	GParseNameList(test, names);
	JPtrArray<JString> aliases;
	aliases.SetCompareFunction(JCompareStringsCaseSensitive);
	JSize i = 1;
	while (i <= names.GetElementCount())
		{
		JString& name = *(names.NthElement(i));
		JString alias;
		JString fcc;
		if (GGetAddressBookMgr()->NameIsAlias(name, alias, fcc))
			{
			JIndex findex;
			if (!aliases.SearchSorted(&name, JOrderedSetT::kAnyMatch, &findex))
				{
				GParseNameList(alias, names);
				aliases.InsertSorted(names.NthElement(i));
				names.RemoveElement(i);
				}
			else
				{
				names.DeleteElement(i);
				}
			}
		else
			{
			i++;
			}
		}
	aliases.DeleteAll();
	const JSize count	= names.GetElementCount();
	for (JIndex i = 1; i <= count; i++)
		{
		cout << *(names.NthElement(i)) << endl;
		}*/
}

/******************************************************************************
 Destructor

 *****************************************************************************/

GMApp::~GMApp()
{
	GMDeleteGlobals();
	delete itsTableDirs;
	delete itsEditDirs;
	itsLockTasks->DeleteAll();
	delete itsLockTasks;
}

/******************************************************************************
 Receive

 *****************************************************************************/

void
GMApp::Receive
	(
	JBroadcaster*					sender,
	const JBroadcaster::Message&	message
	)
{
	if (sender == itsAboutDialog && message.Is(JXDialogDirector::kDeactivated))
		{
		const JXDialogDirector::Deactivated* info =
			dynamic_cast<const JXDialogDirector::Deactivated*>(&message);
		assert(info != NULL);
		if (info->Successful() && itsOpenPrefsAfterAbout)
			{
			if (!itsPrefsNew)
				{
				JGetUserNotification()->DisplayMessage("Your mail preferences have been converted, please verify that they are correct.");
				}
			GGetAccountMgr()->EditAccounts();
			}
		itsAboutDialog			= NULL;
		itsOpenPrefsAfterAbout	= kJFalse;
		itsPrefsNew				= kJFalse;
		}

	else
		{
		JXApplication::Receive(sender, message);
		}
}

/******************************************************************************
 CheckMail

 *****************************************************************************/

void
GMApp::CheckMail()
{
}

/******************************************************************************
 OpenMailbox

 *****************************************************************************/

void
GMApp::OpenMailbox
	(
	const JCharacter*	filename,
	const JBoolean		beep,
	const JBoolean		iconify
	)
{
	if (JDirectoryExists(filename))
		{
		const JCharacter* map[] =
			{
			"dir", filename
			};
		const JString msg = JGetString("NameIsDirectoryNotFile::GMApp", map, sizeof(map));
		JGetUserNotification()->ReportError(msg);
		return;
		}
		
	if (MailboxOpen(filename, !iconify))
		{
		return;
		}

	JString mailbox(filename);
	JBoolean locked = FileLocked(mailbox, kJFalse);
	GMessageTableDir* dir;

	if (!locked)
		{
		if (GLockFile(mailbox) && GMessageTableDir::Create(this, mailbox, &dir, iconify))
			{
			itsTableDirs->Append(dir);
			GUnlockFile(mailbox);
			Broadcast(MailboxOpened(mailbox));
			if (beep && GGetPrefsMgr()->IsBeepingOnNewMail())
				{
				GetCurrentDisplay()->Beep();
				}
			}
		}
}

/******************************************************************************
 OpenIconifiedMailbox

 *****************************************************************************/

void
GMApp::OpenIconifiedMailbox
	(
	const JCharacter*	filename,
	const JBoolean		beep
	)
{
	OpenMailbox(filename, beep, kJTrue);
}

/******************************************************************************
 OpenSystemMailbox

 *****************************************************************************/

void
GMApp::OpenSystemMailbox()
{
	JString user = JGetUserName();
	JString smbox = GGetPrefsMgr()->GetDefaultInbox();
	JString mbox;
	if (GGetAbsoluteFromHome(smbox, &mbox))
		{
		OpenMailbox(mbox);
		}
}

/******************************************************************************
 NewMailbox

 *****************************************************************************/

JBoolean
GMApp::NewMailbox
	(
	const JCharacter*	filename,
	const JBoolean		openFile
	)
{
	JString path;
	JString name;
	JSplitPathAndName(filename, &path, &name);
	if (path.IsEmpty())
		{
		path = JGetCurrentDirectory();
		}
	if (!(JDirectoryExists(path) && JDirectoryReadable(path)))
		{
		JString notice = "You do not have write permissions in directory \"" + path + "\"";
		JGetUserNotification()->ReportError(notice);
		return kJFalse;
		}
	ofstream os(filename);
	if (!os.good())
		{
		JString notice = "Unable to create file \"" + path + name + "\"";
		JGetUserNotification()->ReportError(notice);
		return kJFalse;
		}
	os.close();
	if (openFile)
		{
		OpenMailbox(filename);
		}
	return kJTrue;
}

/******************************************************************************
 DirectorClosed

 *****************************************************************************/

void
GMApp::DirectorClosed
	(
	JXDirector* theDirector
	)
{
	if (itsTableDirs == NULL)
		{
		return;
		}
	GMessageTableDir* dir = (GMessageTableDir*) theDirector;
	JIndex findex;
	if (itsTableDirs->Find(dir, &findex))
		{
		itsTableDirs->RemoveElement(findex);
		}

	GMessageEditDir* edir = (GMessageEditDir*) theDirector;
	if (itsEditDirs->Find(edir, &findex))
		{
		itsEditDirs->RemoveElement(findex);
		}

	JXApplication::DirectorClosed(theDirector);
}

/******************************************************************************
 Close (virtual)

 ******************************************************************************/

JBoolean
GMApp::Close()
{
	SaveState();
	return JXApplication::Close();
}

/******************************************************************************
 SaveState

 *****************************************************************************/

void
GMApp::SaveState()
{
	JString homeDir;
	if (JGetHomeDirectory(&homeDir))
		{
		JAppendDirSeparator(&homeDir);
		JString session = homeDir + kStateFileName;
		if (JFileExists(session))
			{
			JRemoveFile(session);
			}
		JFileArray* fileArray;
		JError err = JFileArray::Create(session, kStateFileSignature, &fileArray);
		if (!err.OK())
			{
			if (JFileExists(session))
				{
				JRemoveFile(session);
				}
			delete fileArray;
			return;
			}
		fileArray->SetVersion(kCurrentSessionVersion);

		JSize count;
		{
		std::ostringstream dataStream;
		count = itsTableDirs->GetElementCount();
		dataStream << count;
		fileArray->AppendElement(dataStream);
		}

		JFAID_t id = 2;
		for (JSize i = 1; i <= count; i++)
			{
			JFileArray* embed;
			err = JFileArray::Create(fileArray, id, &embed);
			itsTableDirs->NthElement(i)->GetData()->Save();
			itsTableDirs->NthElement(i)->SaveState(*embed);
			delete embed;
			id ++;
			}

		for (JSize i = itsEditDirs->GetElementCount(); i >= 1; i--)
			{
			itsEditDirs->NthElement(i)->CheckForPendingMessage();
			}

		{
		std::ostringstream dataStream;
		count = itsEditDirs->GetElementCount();
		dataStream << count;
		fileArray->AppendElement(dataStream);
		}

		for (JSize i = 1; i <= count; i++)
			{
			std::ostringstream dataStream;
			itsEditDirs->NthElement(i)->SaveState(dataStream);
			fileArray->AppendElement(dataStream);
			}

		{
		std::ostringstream dataStream;
		GGetInboxMgr()->SaveState(dataStream);
		fileArray->AppendElement(dataStream);
		}

		delete fileArray;
		}
}

/******************************************************************************
 AppendNewMessage

 *****************************************************************************/

void
GMApp::AppendNewMessage
	(
	GMessageEditDir* dir
	)
{
	itsEditDirs->Append(dir);
}

/******************************************************************************
 OpenSession

 *****************************************************************************/

JBoolean
GMApp::OpenSession()
{
	JBoolean success = kJFalse;

	JString homeDir;
	if (JGetHomeDirectory(&homeDir))
		{
		JAppendDirSeparator(&homeDir);
		JString session = homeDir + kStateFileName;
		if (JFileExists(session) && JFileReadable(session))
			{
			JFileArray* fileArray;
			JError err = JFileArray::Create(session, kStateFileSignature, &fileArray);
			if (err.OK())
				{
				JFileVersion version = fileArray->GetVersion();
				if (0 < version && version <= kCurrentSessionVersion)
					{
					JFAID id = 1;
					JSize count;
					{
					std::string data;
					fileArray->GetElement(id, &data);
					std::istringstream is(data);
					is >> count;
					id.SetID(id.GetID() + 1);
					}

					if (count == 0)
						{
						delete fileArray;
						JRemoveFile(session);
						return kJFalse;
						}

					for (JSize i = 1; i <= count; i++)
						{
						JFileArray* embed;
						err = JFileArray::Create(fileArray, id, &embed);
						GMessageTableDir* dir;
						if (GMessageTableDir::Create(this, *embed, &dir, version))
							{
							itsTableDirs->Append(dir);
							}
						id.SetID(id.GetID() + 1);
						delete embed;
						}

					{
					std::string data;
					fileArray->GetElement(id, &data);
					std::istringstream is(data);
					is >> count;
					id.SetID(id.GetID() + 1);
					}

					for (JSize i = 1; i <= count; i++)
						{
						std::string data;
						fileArray->GetElement(id, &data);
						std::istringstream is(data);
						GMessageEditDir* dir = new GMessageEditDir(JXGetApplication());
						assert(dir != NULL);
						dir->ReadState(is, version);
						dir->Activate();
						id.SetID(id.GetID() + 1);
						}

					{
					std::string data;
					fileArray->GetElement(id, &data);
					std::istringstream is(data);
					GGetInboxMgr()->ReadState(is);
					}

					success = kJTrue;
					}
				delete fileArray;
				}
			JRemoveFile(session);
			}
		}
	return success;
}

/******************************************************************************
 OpenMailbox

 *****************************************************************************/

void
GMApp::OpenMailbox()
{
	JString mbox;
	if (GMGetMailboxCSF()->ChooseFile("Select mailbox:", "Select the mailbox to open.", &mbox))
		{
		OpenMailbox(mbox);
		}
}

/******************************************************************************
 CleanUpBeforeSuddenDeath

 *****************************************************************************/

void
GMApp::CleanUpBeforeSuddenDeath
	(
	const JXDocumentManager::SafetySaveReason reason
	)
{
	GSetProgramDying();
	JSize count = itsTableDirs->GetElementCount();
	for (JSize i = 1; i <= count; i++)
		{
		itsTableDirs->NthElement(i)->GetData()->Save();
		}
	SaveState();
	GMGetAddressBookDir()->SaveOnDeath();
}

/******************************************************************************
 GetAppSignature (static)

 ******************************************************************************/

const JCharacter*
GMApp::GetAppSignature()
{
	return kAppSignature;
}

/******************************************************************************
 InitStrings (static)

	If we are going to print something to the command line and then quit,
	we haven't initialized JX, but we still need the string data.

 ******************************************************************************/

void
GMApp::InitStrings()
{
	(JGetStringManager())->Register(kAppSignature, kGMDefaultStringData);
}

/******************************************************************************
 FileLocked

 *****************************************************************************/

JBoolean
GMApp::FileLocked
	(
	const JCharacter*	filename,
	const JBoolean		iconify
	)
{
	JString lockfile = JString(filename) + ".lock";
	JBoolean locked = kJFalse;
	if (JFileExists(lockfile))
		{
		locked = kJTrue;
		JBoolean found = kJFalse;
		for (JSize i = 1; i <= itsLockTasks->GetElementCount(); i++)
			{
			if (itsLockTasks->NthElement(i)->GetMailbox() == filename)
				{
				JString report;
				if (iconify)
					{
					report = "The mailbox \"" + JString(filename) + "\" has new mail, but is locked. Do you want the lock to be retried in 30 seconds?";
					}
				else
					{
					report = "The mailbox \"" + JString(filename) + "\" is locked. Do you want the lock to be retried in 30 seconds?";
					}
				JBoolean yes = JGetUserNotification()->AskUserYes(report);
				if (!yes)
					{
					report = "Do you want to forcibly remove the lock on mailbox \"" + JString(filename) + "\"?";
					yes = JGetUserNotification()->AskUserYes(report);
					if (yes)
						{
						GUnlockFile(filename);
						locked = kJFalse;
						itsLockTasks->NthElement(i)->Stop();
						itsLockTasks->DeleteElement(i);
						}
					else
						{
						itsLockTasks->NthElement(i)->Stop();
						itsLockTasks->DeleteElement(i);
						}
					}
				found = kJTrue;
				break;
				}
			}
		if (!found)
			{
			JString report;
			if (iconify)
				{
				report = "The mailbox \"" + JString(filename) + "\" has new mail, but is locked. Do you want the lock to be retried in 30 seconds?";
				}
			else
				{
				report = "The mailbox \"" + JString(filename) + "\" is locked. Do you want the lock to be retried in 30 seconds?";
				}
			JBoolean yes = JGetUserNotification()->AskUserYes(report);
			if (!yes)
				{
				report = "Do you want to forcibly remove the lock on mailbox \"" + JString(filename) + "\"?";
				yes = JGetUserNotification()->AskUserYes(report);
				if (yes)
					{
					GUnlockFile(filename);
					locked = kJFalse;
					}
				}
			else
				{
				GLockFileTask* task = new GLockFileTask(filename, iconify);
				assert(task != NULL);
				itsLockTasks->Append(task);
				task->Start();
				}
			}
		}
	else
		{
		for (JSize i = 1; i <= itsLockTasks->GetElementCount(); i++)
			{
			if (itsLockTasks->NthElement(i)->GetMailbox() == filename)
				{
				itsLockTasks->NthElement(i)->Stop();
				itsLockTasks->DeleteElement(i);
				break;
				}
			}
		}
	return locked;
}

/******************************************************************************
 DisplayAbout

	prevVersStr can be NULL.

 ******************************************************************************/

void
GMApp::DisplayAbout
	(
	const JCharacter* prevVersStr
	)
{
	assert( itsAboutDialog == NULL );
	itsAboutDialog = new GMAboutDialog(this, prevVersStr);
	assert( itsAboutDialog != NULL );
	itsAboutDialog->BeginDialog();
	ListenTo(itsAboutDialog);
}

/******************************************************************************
 NewMessage (public)

 ******************************************************************************/

void
GMApp::NewMessage
	(
	const JCharacter* to
	)
{
	GMessageEditDir* dir = new GMessageEditDir(this);
	assert(dir != NULL);
	JString theTo(to);
	if (!theTo.IsEmpty())
		{
		dir->SetTo(theTo);
		}
	dir->Activate();
}

/******************************************************************************
 Suspend (virtual)

 ******************************************************************************/

void
GMApp::Suspend()
{
	JXApplication::Suspend();
	GMSuspend();
}

/******************************************************************************
 Resume (virtual)

 ******************************************************************************/

void
GMApp::Resume()
{
	JXApplication::Resume();
	GMResume();
}

/******************************************************************************
 GetFileDirectory (public)

 ******************************************************************************/

JBoolean
GMApp::GetFileDirectory
	(
	JString* dir
	)
{
	if (itsHasFileDirectory)
		{
		*dir	= itsFileDirectory;
		return kJTrue;
		}
	return kJFalse;
}

/******************************************************************************
 HeaderStateChanged (public)

 ******************************************************************************/

void
GMApp::HeaderStateChanged
	(
	GMessageHeader* header
	)
{
	GMessageTableDir* dir;
	const JSize count	= itsTableDirs->GetElementCount();
	for (JSize i = 1; i <= count; i++)
		{
		dir	= itsTableDirs->NthElement(i);
		if (dir->GetData()->Includes(header))
			{
			dir->GetData()->BroadcastDataModified();
			return;
			}
		}
}

/******************************************************************************
 MailboxOpen (public)

 ******************************************************************************/

JBoolean
GMApp::MailboxOpen
	(
	const JCharacter*	filename,
	const JBoolean		activate
	)
{
	JString mailbox;
	JGetTrueName(filename, &mailbox);
	GMessageTableDir* dir;
	for (JSize i = 1; i <= itsTableDirs->GetElementCount(); i++)
		{
		JString trueDirMBox;
		JGetTrueName(itsTableDirs->NthElement(i)->GetData()->GetMailFile(), &trueDirMBox);
		if (trueDirMBox == mailbox)
			{
			if (activate)
				{
				itsTableDirs->NthElement(i)->Activate();
				}
			return kJTrue;
			}
		}
	return kJFalse;
}

/******************************************************************************
 BroadcastMailboxClosed (public)

 ******************************************************************************/

void
GMApp::BroadcastMailboxClosed
	(
	const JCharacter* mbox
	)
{
	JString file(mbox);
	Broadcast(MailboxClosed(file));
}

/******************************************************************************
 OpenMailboxWindowIfNeeded

 *****************************************************************************/

void	
GMApp::OpenMailboxWindowIfNeeded()
{
	if (itsTableDirs->GetElementCount() == 0 ||
		GGetPrefsMgr()->IsOpeningMailboxWindow())
		{
		GGetMailboxTreeDir()->Activate();
		}
}
