/******************************************************************************
 GMailboxTreeDir.cc

	<Description>

	BASE CLASS = public GMManagedDirector

	Copyright © 1997 by Glenn W. Bach.  All rights reserved.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

// includes

//Class Header
#include <GMailboxTreeDir.h>
#include <GMFileTree.h>
#include <GMTreeRootNode.h>
#include <GMailboxTreeWidget.h>
#include <JNamedTreeList.h>
#include <JXNamedTreeListWidget.h>
#include <GMGlobals.h>
#include <GPrefsMgr.h>
#include "GHelpText.h"
#include <GMApp.h>
#include "GMDirectorManager.h"
#include "GMDirectorMenu.h"
#include "GMPOPRetrieverMenu.h"
#include "GMAccountManager.h"
#include "GMessageEditDir.h"
#include "GMFilterManager.h"
#include "JXFSBindingManager.h"

#include "mailbox.xpm"
#include "jx_help_toc.xpm"
#include "jx_help_specific.xpm"
#include "filenew.xpm"
#include "fileopen.xpm"
#include "check_mail.xpm"

#include <JXToolBar.h>

#include <JChooseSaveFile.h>
#include <JXWindow.h>
#include <JXTextMenu.h>
#include <JXMenuBar.h>
#include <JXScrollbarSet.h>
#include <JXApplication.h>
#include <JXTextButton.h>
#include <JXTimerTask.h>
#include <JXHelpManager.h>
#include <JXImage.h>
#include <JXWebBrowser.h>

#include <JDirInfo.h>
#include <JFSFileTreeNode.h>
#include <jAssert.h>

static const JCharacter* kFileMenuTitleStr = "File";
static const JCharacter* kFileMenuStr =
	"   New message %k Meta-N %i NewMessage::Arrow"
	"  |Open mailbox... %k Meta-O %i OpenMailbox::Arrow"
	"%l|Check all accounts %k Meta-M  %i CheckMail::Arrow"
	"  |Check account %k Meta-M  %i CheckAccount::Arrow"
	"%l|Close %k Meta-W %i Close::Arrow"
	"  |Quit %k Meta-Q %i Quit::Arrow";

enum
{
	kNewCmd = 1,
	kOpenCmd,
	kCheckMailCmd,
	kCheckAccountCmd,
	kCloseCmd,
	kQuitCmd
};

static const JCharacter* kWindowsMenuTitleStr = "Windows";

static const JCharacter* kPrefsMenuTitleStr = "Preferences";
static const JCharacter* kPrefsMenuStr =
	"   Accounts... %i Accounts::Arrow"
	"  |Filters... %i Filters::Arrow"
	"  |URL preferences... %i URLPreferences::Arrow"
	"  |Toolbar buttons... %i EditToolBar::Arrow"
	"  |File bindings... %i EditFileBindings::Arrow"
	"  |Miscellaneous preferences... %i Preferences::Arrow";

enum
{
	kEditAccountsCmd =1,
	kEditFiltersCmd,
	kURLPrefsCmd,
	kEditToolBarCmd,
	kFileBindingsCmd,
	kPrefsCmd
};

static const JCharacter* kHelpMenuTitleStr = "Help";
static const JCharacter* kHelpMenuStr =
	"About"
	"%l|Table of Contents %i TOCHelp::Arrow"
	"|Overview|This window %i ThisWindowHelp::Arrow"
	"%l|Changes|Credits";

enum
{
	kAboutCmd = 1,
	kTOCCmd,
	kOverviewCmd,
	kThisWindowCmd,
	kChangesCmd,
	kCreditsCmd
};

const JCoordinate kCloseButtonWidth	= 50;
const JCoordinate kCurrentPrefsVersion	= 2;

const Time kDirUpdateDelay = 1000;	// milliseconds

const JCharacter* kGMMailboxDirMenuShortcut	= "Meta-Shift-M";
const JCharacter* kGMMailboxDirMenuID		= "MailboxWindow::Arrow";

const JCharacter* GMailboxTreeDir::kMailTreeChanged	= "kMailTreeChanged::GMailboxTreeDir";

/******************************************************************************
 Constructor

 *****************************************************************************/

GMailboxTreeDir::GMailboxTreeDir
	(
	JXDirector* supervisor
	)
	:
   GMManagedDirector(supervisor),
   JPrefObject(GGetPrefsMgr(), kMailTreePrefsID),
   itsTimerTask(NULL)
{
	BuildWindow();
	JPrefObject::ReadPrefs();
	itsWidget->Update();

	GGetDirMgr()->DirectorCreated(this);
}

/******************************************************************************
 Destructor

 *****************************************************************************/

GMailboxTreeDir::~GMailboxTreeDir()
{
	JPrefObject::WritePrefs();
	delete itsTree;
	delete itsMenuIcon;
	GGetDirMgr()->DirectorDeleted(this);
}

/******************************************************************************
 BuildWindow


 ******************************************************************************/

void
GMailboxTreeDir::BuildWindow()
{
	JCoordinate w = 360;
	JCoordinate h = 500;

	JXWindow* window = new JXWindow(this, w,h, "Mailbox window");
    assert( window != NULL );

	window->SetWMClass(GMGetWMClassInstance(), GMGetMailboxWindowClass());
	window->SetCloseAction(JXWindow::kDeactivateDirector);
    window->PlaceAsDialogWindow();
    window->ShouldFocusWhenShow(kJTrue);
    window->LockCurrentMinSize();

	JXMenuBar* menuBar =
		new JXMenuBar(window, JXWidget::kHElastic, JXWidget::kFixedTop,
			0,0, w - kCloseButtonWidth,kJXDefaultMenuBarHeight);
	assert( menuBar != NULL );

    itsCloseButton =
        new JXTextButton("Close", window,
                    JXWidget::kFixedRight, JXWidget::kFixedTop,
                    w - kCloseButtonWidth,0,
                    kCloseButtonWidth,kJXDefaultMenuBarHeight);
    assert( itsCloseButton != NULL );
    itsCloseButton->SetShortcuts("#W"); //^[
    ListenTo(itsCloseButton);

	itsToolBar =
		new JXToolBar(GGetPrefsMgr(), kGMailboxToolBarID,
			menuBar, w, h, window,
			JXWidget::kHElastic, JXWidget::kVElastic,
			0, kJXDefaultMenuBarHeight, w, h - kJXDefaultMenuBarHeight);
	assert(itsToolBar != NULL);

	itsFileMenu = menuBar->AppendTextMenu(kFileMenuTitleStr);
	itsFileMenu->SetMenuItems(kFileMenuStr);
	itsFileMenu->SetUpdateAction(JXMenu::kDisableNone);
	ListenTo(itsFileMenu);

	GMPOPRetrieverMenu* popmenu =
		new GMPOPRetrieverMenu(itsFileMenu, kCheckAccountCmd, menuBar);
	assert(popmenu != NULL);

	itsFileMenu->SetItemImage(kNewCmd, filenew);
	itsFileMenu->SetItemImage(kOpenCmd, fileopen);
	itsFileMenu->SetItemImage(kCheckMailCmd, check_mail);

	const JSize newHeight = itsToolBar->GetWidgetEnclosure()->GetBoundsHeight();

	JXScrollbarSet* scrollbarSet =
		new JXScrollbarSet(itsToolBar->GetWidgetEnclosure(),
						   JXWidget::kHElastic,JXWidget::kVElastic,
						   0, 0,
						   w, newHeight);
	assert( scrollbarSet != NULL );

    GMTreeRootNode* base = new GMTreeRootNode();
    assert(base != NULL);
    JDirInfo* info;
    if (base->GetDirInfo(&info))
		{
		JString regex("^$|");
		regex += GMGetMailRegexStr();
		info->SetContentFilter(regex);
		}
    itsTree = new GMFileTree(base);
    assert(itsTree != NULL);
    JNamedTreeList* list = new JNamedTreeList(itsTree);

    itsWidget =
		new GMailboxTreeWidget(itsTree, list,  menuBar,
								scrollbarSet, scrollbarSet->GetScrollEnclosure(),
								JXWidget::kHElastic, JXWidget::kVElastic,
								0,0,w,newHeight);
    assert(itsWidget != NULL);

	GMDirectorMenu* menu =
		new GMDirectorMenu(kWindowsMenuTitleStr, menuBar,
			JXWidget::kFixedLeft, JXWidget::kVElastic, 0,0, 10,10);
	assert(menu != NULL);
	menuBar->AppendMenu(menu);

	itsPrefsMenu = menuBar->AppendTextMenu(kPrefsMenuTitleStr);
	itsPrefsMenu->SetMenuItems(kPrefsMenuStr);
	itsPrefsMenu->SetUpdateAction(JXMenu::kDisableNone);
	ListenTo(itsPrefsMenu);

	itsHelpMenu = menuBar->AppendTextMenu(kHelpMenuTitleStr);
	itsHelpMenu->SetMenuItems(kHelpMenuStr);
	itsHelpMenu->SetUpdateAction(JXMenu::kDisableNone);
	ListenTo(itsHelpMenu);

	itsHelpMenu->SetItemImage(kTOCCmd, JXPM(jx_help_toc));
	itsHelpMenu->SetItemImage(kThisWindowCmd, JXPM(jx_help_specific));

	itsToolBar->LoadPrefs();

	if (itsToolBar->IsEmpty())
		{
		itsToolBar->AppendButton(itsFileMenu, kNewCmd);
		itsToolBar->AppendButton(itsFileMenu, kOpenCmd);
		itsToolBar->NewGroup();
		itsToolBar->AppendButton(itsFileMenu, kCheckMailCmd);
		itsToolBar->NewGroup();
		itsWidget->AddDefaultButtcons(itsToolBar);
		itsToolBar->AppendButton(itsHelpMenu, kTOCCmd);
		itsToolBar->AppendButton(itsHelpMenu, kThisWindowCmd);
		}

	itsMenuIcon = new JXImage(window->GetDisplay(), mailbox);
	assert(itsMenuIcon != NULL);
	itsMenuIcon->ConvertToRemoteStorage();

}

/******************************************************************************
 Receive (virtual protected)


 ******************************************************************************/

void
GMailboxTreeDir::Receive
	(
	JBroadcaster*	sender,
	const Message&	message
	)
{
	if (sender == itsFileMenu && message.Is(JXMenu::kItemSelected))
		{
		 const JXMenu::ItemSelected* selection =
			dynamic_cast<const JXMenu::ItemSelected*>(&message);
		assert( selection != NULL );
		HandleFileMenu(selection->GetIndex());
		}

	else if (sender == itsFileMenu && message.Is(JXMenu::kNeedsUpdate))
		{
		UpdateFileMenu();
		}
	else if (sender == itsCloseButton && message.Is(JXButton::kPushed))
		{
		Deactivate();
		}
	else if (sender == itsTimerTask && message.Is(JXTimerTask::kTimerWentOff))
		{
		Update();
		}
	else if (sender == itsHelpMenu && message.Is(JXMenu::kItemSelected))
		{
		 const JXMenu::ItemSelected* selection =
			dynamic_cast<const JXMenu::ItemSelected*>(&message);
		assert( selection != NULL );
		HandleHelpMenu(selection->GetIndex());
		}
	else if (sender == itsPrefsMenu && message.Is(JXMenu::kItemSelected))
		{
		 const JXMenu::ItemSelected* selection =
			dynamic_cast<const JXMenu::ItemSelected*>(&message);
		assert( selection != NULL );
		HandlePrefsMenu(selection->GetIndex());
		}
	else
		{
		GMManagedDirector::Receive(sender, message);
		}
}

/******************************************************************************
 ReadPrefs (protected)

 ******************************************************************************/

void
GMailboxTreeDir::ReadPrefs
	(
	istream& input
	)
{
	JCoordinate id;
	input >> id;
	assert(id <= kCurrentPrefsVersion);
	GetWindow()->ReadGeometry(input);
	if (id > 0)
		{
		itsWidget->ReadPrefs(input);
		}
	if (id > 1)
		{
		JBoolean active;
		input >> active;
		JBoolean iconified;
		input >> iconified;
		if (iconified)
			{
			GetWindow()->Deiconify();
			}
		if (active && !iconified)
			{
			Activate();
			}
		}
}

/******************************************************************************
 WritePrefs (protected)

 ******************************************************************************/

void
GMailboxTreeDir::WritePrefs
	(
	ostream& output
	)
	const
{
	output << kCurrentPrefsVersion << ' ';
	GetWindow()->WriteGeometry(output);
	itsWidget->WritePrefs(output);
	output << IsActive() << ' ';
	output << GetWindow()->IsIconified() << ' ';
}

/******************************************************************************
 UpdateFileMenu


 ******************************************************************************/

void
GMailboxTreeDir::UpdateFileMenu()
{
	if ((GGetAccountMgr()->GetPOPAccountCount() > 0) &&
		(GGetAccountMgr()->FinishedChecking()))
		{
		itsFileMenu->EnableItem(kCheckMailCmd);
		}
	else
		{
		itsFileMenu->DisableItem(kCheckMailCmd);
		}
	itsFileMenu->EnableItem(kCheckAccountCmd);
}

/******************************************************************************
 HandleFileMenu


 ******************************************************************************/

void
GMailboxTreeDir::HandleFileMenu
	(
	const JIndex index
	)
{
	if (index == kNewCmd)
		{
		GMessageEditDir* dir = new GMessageEditDir(JXGetApplication());
		assert(dir != NULL);
		dir->Activate();
		}
	else if (index == kOpenCmd)
		{
		GMGetApplication()->OpenMailbox();
		}
	else if (index == kCheckMailCmd)
		{
		GGetAccountMgr()->CheckAllAccounts();
		}
	else if (index == kCloseCmd)
		{
		Deactivate();
		}
	else if (index == kQuitCmd)
		{
		GMGetApplication()->DisplayBusyCursor();
		JXGetApplication()->Quit();
		}
}

/******************************************************************************
 HandlePrefsMenu


 ******************************************************************************/

void
GMailboxTreeDir::HandlePrefsMenu
	(
	const JIndex index
	)
{
	if (index == kPrefsCmd)
		{
		GGetPrefsMgr()->EditPrefs();
		}
	else if (index == kEditAccountsCmd)
		{
		GGetAccountMgr()->EditAccounts();
		}
	else if (index == kEditFiltersCmd)
		{
		GGetFilterMgr()->EditFilters();
		}
	else if (index == kURLPrefsCmd)
		{
		JXGetWebBrowser()->EditPrefs();
		}
	else if (index == kEditToolBarCmd)
		{
		itsToolBar->Edit();
		}
	else if (index == kFileBindingsCmd)
		{
		JXFSBindingManager::Instance()->EditBindings();
		}

}

/******************************************************************************
 HandleHelpMenu


 ******************************************************************************/

void
GMailboxTreeDir::HandleHelpMenu
	(
	const JIndex index
	)
{
	if (index == kAboutCmd)
		{
		GMGetApplication()->DisplayAbout();
		}
	else if (index == kTOCCmd)
		{
		(JXGetHelpManager())->ShowSection(kGTOCHelpName);
		}
	else if (index == kOverviewCmd)
		{
		(JXGetHelpManager())->ShowSection(kGOverviewHelpName);
		}
	else if (index == kThisWindowCmd)
		{
		(JXGetHelpManager())->ShowSection(kGMailTreeHelpName);
		}
	else if (index == kChangesCmd)
		{
		(JXGetHelpManager())->ShowSection(kGChangeLogName);
		}
	else if (index == kCreditsCmd)
		{
		(JXGetHelpManager())->ShowSection(kGCreditsName);
		}

}

/******************************************************************************
 EditToolBar (public)

 ******************************************************************************/

void
GMailboxTreeDir::EditToolBar()
{
	itsToolBar->Edit();
}

/******************************************************************************
 GetShortcut (public)

 ******************************************************************************/

JBoolean
GMailboxTreeDir::GetShortcut
	(
	JString* shortcut
	)
	const
{
	*shortcut = kGMMailboxDirMenuShortcut;
	return kJTrue;
}

/******************************************************************************
 GetID (public)

 ******************************************************************************/

JBoolean
GMailboxTreeDir::GetID
	(
	JString* id
	)
	const
{
	*id = kGMMailboxDirMenuID;
	return kJTrue;
}

/******************************************************************************
 Activate (virtual protected)

 ******************************************************************************/

void
GMailboxTreeDir::Activate()
{
	if (itsTimerTask == NULL)
		{
		itsTimerTask = new JXTimerTask(kDirUpdateDelay);
		assert(itsTimerTask != NULL);
		}

	itsTimerTask->Start();
	ListenTo(itsTimerTask);

	GMManagedDirector::Activate();
}

/******************************************************************************
 Deactivate (virtual protected)

 ******************************************************************************/

JBoolean
GMailboxTreeDir::Deactivate()
{
	if (itsTimerTask != NULL)
		{
		itsTimerTask->Stop();
		}

	return GMManagedDirector::Deactivate();
}

/******************************************************************************
 GetTopLevelNodes (public)

 ******************************************************************************/

void
GMailboxTreeDir::GetTopLevelNodes
	(
	JPtrArray<JString>* nodes
	)
{
	JTreeNode* base		= itsTree->GetRoot();
	const JSize count	= base->GetChildCount();
	for (JIndex i = 1; i <= count; i++)
		{
		JTreeNode* jnode		= base->GetChild(i);
		JFSFileTreeNode* node	= dynamic_cast<JFSFileTreeNode*>(jnode);
		assert(node != NULL);
		JDirEntry* entry		= node->GetDirEntry();
		JString* str			= new JString(entry->GetFullName());
		assert(str != NULL);
		nodes->Append(str);
		}
}

/******************************************************************************
 BroadcastMailTreeChanged (public)

 ******************************************************************************/

void
GMailboxTreeDir::BroadcastMailTreeChanged()
{
	Broadcast(MailTreeChanged());
}

/******************************************************************************
 AddFile

 *****************************************************************************/

void	
GMailboxTreeDir::AddFile
	(
	const JCharacter* fullname
	)
{
	itsWidget->AddFile(fullname);
}

/******************************************************************************
 AddDirectory

 *****************************************************************************/

void	
GMailboxTreeDir::AddDirectory
	(
	const JCharacter* path
	)
{
	itsWidget->AddDirectory(path);
}

/******************************************************************************
 Update

 *****************************************************************************/

void			
GMailboxTreeDir::Update()
{
	itsWidget->Update();
}
