/******************************************************************************
 GNBApp.cc

	<Description>

	BASE CLASS = public JXApplication

	Copyright © 1999 by Glenn W. Bach.  All rights reserved.
	
	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include <GNBApp.h>
#include <GNBMDIServer.h>
#include <GNBPrefsMgr.h>
#include <GNBNoteDir.h>
#include <GNBTreeDir.h>
#include <GNBArrayFlushTask.h>
#include <GNBAboutDialog.h>
#include <GNBStringData.h>

#include <JXChooseSaveFile.h>
#include <JXDisplay.h>
#include <JXDocumentManager.h>
#include <JXRadioGroupDialog.h>
#include <JXUserNotification.h>
#include <JXWindow.h>

#include <JString.h>

#include <GNBGlobals.h>

#include <jDirUtil.h>
#include <jFileUtil.h>
#include <jProcessUtil.h>
#include <jSysUtil.h>

#include <fstream.h>
#include <iostream.h>
#include <jAssert.h>

extern const JCharacter* kNotebookVersionNumberStr;
static const JCharacter* kGNBFileSignature	= "GDBNotebook database file";

const JCharacter* kAppSignature				= "buzzer";
const JCharacter* kOldVersionFile			= ".GNBNotes";

const JFileVersion kCurrentStateVersion		= 1;

const JCharacter* kNewNotebookChoice		= "Create a new notebook";
const JCharacter* kOpenNotebookChoice		= "Open an existing notebook";
const JCharacter* kNotebookChoicePrompt		= "Which option would you like?";
const JCharacter* kNotebookChoiceTitle		= "Choose Notebook";

const JCharacter* kConvertFileInstructions	= 
	"The format has changed for the notebook files.\n"
	"You old notebook will be converted. Please\n"
	"select a new name for your notebook.";
const JCharacter* kConvertDefaultName		= "MyNotebook";

enum
{
	kNewNotebook	= 1,
	kOpenNotebook
};

/******************************************************************************
 Constructor

 *****************************************************************************/

GNBApp::GNBApp
	(
	int* 		argc, 
	char* 		argv[],
	JBoolean*	displayAbout,
	JString*	prevVersStr
	)
	:
	JXApplication(argc, argv, kAppSignature, kGNBDefaultStringData),
	itsTreeDirs(NULL),
	itsRGDialog(NULL)
{
	*displayAbout = GNBCreateGlobals(this);

	if (!*displayAbout)
		{
		*prevVersStr = (GNBGetPrefsMgr())->GetNotebookVersionStr();
		if (*prevVersStr == kNotebookVersionNumberStr)
			{
			prevVersStr->Clear();
			}
		else
			{
			*displayAbout = kJTrue;
			}
		}
	else
		{
		prevVersStr->Clear();
		}

	itsTreeDirs	= new JPtrArray<GNBTreeDir>(JPtrArrayT::kForgetAll);
	assert(itsTreeDirs != NULL);
}

/******************************************************************************
 Destructor

 *****************************************************************************/

GNBApp::~GNBApp()
{
	delete itsTreeDirs;
	GNBDeleteGlobals();
}

/******************************************************************************
 DirectorClosed

 *****************************************************************************/

void
GNBApp::DirectorClosed
	(
	JXDirector* theDirector
	)
{
	GNBTreeDir* dir = dynamic_cast<GNBTreeDir*>(theDirector);
	JIndex findex;
	if (itsTreeDirs->Find(dir, &findex))
		{
		itsTreeDirs->RemoveElement(findex);
		}
		
	JXApplication::DirectorClosed(theDirector);
}

/******************************************************************************
 CleanUpBeforeSuddenDeath

 *****************************************************************************/

void
GNBApp::CleanUpBeforeSuddenDeath
	(
	const JXDocumentManager::SafetySaveReason reason
	)
{
	JXGetDocumentManager()->SafetySave(reason);
}

/******************************************************************************
 DisplayAbout

	prevVersStr can be NULL.

 ******************************************************************************/

void
GNBApp::DisplayAbout
	(
	const JCharacter* prevVersStr
	)
{
	GNBAboutDialog* dlog = new GNBAboutDialog(this, prevVersStr);
	assert( dlog != NULL );
	dlog->BeginDialog();
}

/******************************************************************************
 GetFileSignature (static public)

 ******************************************************************************/

const JCharacter*
GNBApp::GetFileSignature()
{
	return kGNBFileSignature;
}

/******************************************************************************
 OpenNotebook (public)

 ******************************************************************************/

void
GNBApp::OpenNotebook
	(
	const JCharacter* fileName
	)
{
	const JSize count = itsTreeDirs->GetElementCount();
	JString testName;
	JGetTrueName(fileName, &testName);
	for (JSize i = 1; i <= count; i++)
		{
		if (itsTreeDirs->NthElement(i)->GetFileName() == testName)
			{
			itsTreeDirs->NthElement(i)->Activate();
			return;
			}
		}

	GNBTreeDir* dir;
	if (GNBTreeDir::Create(this, fileName, &dir))
		{
		itsTreeDirs->Append(dir);
		dir->Activate();
		}
	else
		{
		JString message = "The notebook \"" + JString(fileName) + "\" could not be opened.";
		JGetUserNotification()->ReportError(message);
		}
}

/******************************************************************************
 RestoreState (public)

 ******************************************************************************/

void
GNBApp::RestoreState
	(
	istream& is
	)
{
	JFileVersion version;
	is >> version;
	if (version > kCurrentStateVersion)
		{
		return;
		}

	JSize count;
	is >> count;

	for (JIndex i = 1; i <= count; i++)
		{
		JString filename;
		is >> filename;
		if (JFileExists(filename) && JFileReadable(filename))
			{
			OpenNotebook(filename);
			}
		}
}

/******************************************************************************
 SaveState (public)

 ******************************************************************************/

JBoolean
GNBApp::SaveState
	(
	ostream& os
	)
{
	os << ' ' << kCurrentStateVersion << ' ';

	const JSize count = itsTreeDirs->GetElementCount();
	if (count == 0)
		{
		return kJFalse;
		}
		
	os << count << ' ';
	
	for (JSize i = 1; i <= count; i++)
		{
		os << itsTreeDirs->NthElement(i)->GetFileName() << ' ';
		}

	return kJTrue;
}

/******************************************************************************
 Close (virtual protected)

 ******************************************************************************/

JBoolean
GNBApp::Close()
{
	GNBGetPrefsMgr()->SaveProgramState();

	const JBoolean success = JXApplication::Close();	// deletes us if successful
	if (!success)
		{
		GNBGetPrefsMgr()->ForgetProgramState();
		}

	return success;
}

/******************************************************************************
 HandleNoArgs (public)

 ******************************************************************************/

void
GNBApp::HandleNoArgs()
{
	const JSize count	= itsTreeDirs->GetElementCount();
	if (count > 0)
		{
		return;
		}
		
	// check for old version. 
	//  ask for new name 
	//  move it to new name
	//  open it

	JString home;
	if (JGetHomeDirectory(&home))
		{
		JString oldfile	= JCombinePathAndName(home, kOldVersionFile);
		JString filename;
		if (JFileExists(oldfile) &&
			JGetChooseSaveFile()->SaveFile("Name your new notebook.", kConvertFileInstructions, kConvertDefaultName, &filename))
			{
			JString cmd	= "mv \"" + oldfile + "\" \"" + filename + "\"";
			JString errors;
			JError err	= JRunProgram(cmd, &errors);
			if (err.OK())
				{
				OpenNotebook(filename);
				return;
				}
			else
				{
				err.ReportIfError();
				}
			}
		}

	//  deal with no old version
	//  do they want to open an old file or create a new one?

	JPtrArray<JString> choices(JPtrArrayT::kDeleteAll);
	JPtrArray<JString> shortcuts(JPtrArrayT::kDeleteAll);

	JString* str	= new JString(kNewNotebookChoice);
	assert(str != NULL);
	choices.Append(str);

	str	= new JString(kOpenNotebookChoice);
	assert(str != NULL);
	choices.Append(str);

	str	= new JString("#N");
	assert(str != NULL);
	shortcuts.Append(str);

	str	= new JString("#O");
	assert(str != NULL);
	shortcuts.Append(str);
	
	itsRGDialog	= 
		new JXRadioGroupDialog(this, kNotebookChoiceTitle, 
			kNotebookChoicePrompt, choices, &shortcuts);
	assert(itsRGDialog != NULL);
	ListenTo(itsRGDialog);
	itsRGDialog->BeginDialog();
}

/******************************************************************************
 Receive (virtual protected)

 ******************************************************************************/

void
GNBApp::Receive
	(
	JBroadcaster* 	sender, 
	const Message&	message
	)
{
	if (sender == itsRGDialog && message.Is(JXDialogDirector::kDeactivated))
		{
		const JXDialogDirector::Deactivated* info	=
			dynamic_cast<const JXDialogDirector::Deactivated*>(&message);
		assert(info != NULL);
		if (info->Successful())
			{
			JIndex index	= itsRGDialog->GetSelectedItem();
			if (index == kNewNotebook)
				{
				JString filename;
				if (JGetChooseSaveFile()->SaveFile("Name your new notebook.", "", "", &filename))
					{
					OpenNotebook(filename);
					}
				}
			else if (index == kOpenNotebook)
				{
				JPtrArray<JString> files(JPtrArrayT::kDeleteAll);
				if (JGetChooseSaveFile()->ChooseFiles("Choose notebooks", "", &files))
					{
					const JSize count	= files.GetElementCount();
					for (JIndex i = 1; i <= count; i++)
						{
						OpenNotebook(*(files.NthElement(i)));
						}
					}
				}
			}
		}
	else
		{
		JXApplication::Receive(sender, message);
		}
}
