0

CBEditorHelp

"<html>
<head>
<title> Text Editor </title>
</head>

<h3> Editing text </h3>

By default, Code Crusader follows the Macintosh clipboard model.  This means that text is <em>not</em> automatically copied when it is selected.  Instead, it is only copied when you use the \"Copy\" item on the Edit menu or Meta-C.  The main advantage of this model is that paste can then replace the selected text.  If you prefer the X clipboard model, the <a href=jxhelp:#Prefs>Preferences</a> dialog lets you use this instead.  Either way, the clipboard is persistent, so if you copy text in a Text Editor window and then close the window, you can still paste the text later on.
<p>
When a file name in the Windows menu is red, it means that the file has been modified and needs to be saved.  This is also shown by drawing three asterisks to the left of the window title.
<p>
Code Crusader can read UNIX, Macintosh, and DOS/Windows text files.  Each file's format is indicated on the \"File format\" submenu on the File menu.  To convert a file to a different format, simply select the desired format from this menu and then save the file.

<h3> <a href=jxhelp:CBSearchTextHelp> Search & Replace </a> </h3>

<h3> <a href=jxhelp:CBCompleterHelp> Keyword completion </a> </h3>

<h3> <a href=jxhelp:CBMacroHelp> Macros </a> </h3>

<h3> <a href=jxhelp:CBStylerHelp> Context sensitive highlighting </a> </h3>

<h3> <a href=jxhelp:CBCRMHelp> Automatic indentation & cleaning paragraph margins </a> </h3>

<h3> <a href=jxhelp:CBFileTemplateHelp> Creating template files </a> </h3>

<h3> <a href=jxhelp:JXComposeHelp>Typing special characters</a> </h3>

<a name=DND>

<h3> Drag-And-Drop </h3>

When Drag-And-Drop is enabled in the Text Editor <a href=jxhelp:#Prefs>Preferences</a> dialog, you can:

<ul>
<li> move text around inside a Text Editor window by dragging it
<li> copy text inside a Text Editor window by holding down the Meta key and dragging
     the text
<p>
<li> copy text to another Text Editor window by dragging it
<li> move text to another Text Editor window by holding down the Meta key and dragging
     the text
<p>
<li> display a dialog asking what to do with the text by holding down the
     Control key and dragging the text
<p>
<li> copy text to any window that interprets middle click to mean paste <br>
     (Unfortunately, you may lose the current contents of the clipboard.
      To get it to work with <tt>xterm</tt>, add \"XTerm.VT100.allowSendEvents:
      True\" to your <tt>.Xdefaults</tt> file.)
</ul>

If the text will be copied when dropped, a small plus (+) will be displayed in the
cursor.  If the dialog will be displayed when the text is dropped, a small
question mark (?) will be displayed in the cursor.
<p>
Drag-And-Drop has the disadvantage that that you cannot click and drag in the
selected text to make a new selection.  Some people find that this slows them
down while editing.
<p>
Holding down the Meta key toggles the Drag-And-Drop setting.  This allows you to
get the other behavior when you need it.  (Once you begin dragging, you can release
the Meta key so that you can move the text.  This trick also works in all text
input fields.)
<p>
Drag-And-Drop can be cancelled by pressing the Escape key before releasing the
mouse button.
<p>
The underlying X protocol is <a href=http://www.newplanetsoftware.com/xdnd/>
XDND</a>.

<a name=BalanceGrouping>

<h3> Balancing grouping symbols </h3>

The \"Balance closest grouping symbols\" item on the Search menu searches for the
closest pair of grouping symbols (<tt>()</tt>, <tt>{}</tt>, <tt>[]</tt>) that enclose
either the caret or the current selection and selects the text between this pair of
grouping symbols.  Repeated use of this menu item expands the selection outward to
the next pair.
<p>
The one special case is that, if you select a single grouping symbol, this menu item
will attempt to balance that symbol instead of treating it like a normal selection.
<p>
This feature is very useful when trying to check a complicated expression
containing many nested pairs of parentheses.  It is also useful for block indenting
since it can instantly select all the text between a pair of braces.
<p>
The algorithm does not use a lexer to balance the grouping symbols.  Because of this
it will incorrectly beep when grouping symbols are used inside character and string
constants in C source code.  The reason for doing it this way is that it allows one to
balance grouping symbols inside all other files, including other
languages such as perl, sh, and FORTRAN.  It makes a few mistakes there, too, but the
ability to get it right 99% of the time in all files is better than the ability to get
it right 100% of the time only in C/C++ files.

<a name=SourceCode>

<h3> Editing <a href=jxhelp:CBFileTypeHelp>source code</a> </h3>

If you have <a href=http://ctags.sourceforge.net/>Exuberant <tt>ctags</tt></a> version 5.0 or later on your execution path, Code Crusader will automatically display an additional menu in the menu bar listing all the functions defined in the file.  When you select a function from this menu, the text scrolls to display that function's definition.  In the <a href=jxhelp:#Prefs>Preferences</a>, you can choose whether to display the function names alphabetically or in the order defined in the file.  With the latter configuration, a horizontal line is drawn on the menu to indicate the location of the caret in the file.  If you want to momentarily display the functions in the opposite order, hold down the Meta key while opening the menu.

<a name=HTML>

<h3> Editing <a href=jxhelp:CBFileTypeHelp>HTML</a> </h3>

The Web Browser Preferences dialog lets you specify the commands for viewing
files and URL's in the browser of your choice.  The default is to use Netscape:

<blockquote>
<dl>
<dt> netscape $u
<dd> Used when you press the View button in the upper right corner of the window.
<p>
<dt> netscape file:'$f'
<dd> Used when you Control-double-click on a URL.
</dl>
</blockquote>

You can use any other browser, if you can figure out the commands to execute.
\"$f\" is replaced by the full path and file name when it is used in the command
to view a file, while \"$u\" is replaced by the URL name when it is used in the
command to view a URL.  If a character is preceded by a backslash, the backslash
is removed and any special meaning is ignored.  Thus, use<tt>\\$</tt> to get a
dollar character and <tt>\\\\</tt> to get a backslash character.

<a name=MouseShortcuts>

<h3> Mouse shortcuts </h3>

Left clicking obviously positions the insertion caret.  Left clicking and dragging
selects the characters that you drag across.  Left double clicking selects the entire
word under the cursor.  If you then drag (click, release, click, drag), the selection will
extend one word at a time.  Left double clicking while holding down the partial word
modifier (adjustable in the <a href=jxhelp:#Prefs>Preferences</a> dialog) selects the
partial word under the cursor, and dragging extends the selection by one partial word at
a time.  Left triple clicking selects the entire line, and dragging
extends the selection by a line at a time.
<p>
Holding down the Shift key while left clicking or simply right clicking extends the
selection in the same way that the original selection was performed.  i.e.  If the
original selection was one word at a time, the extended selection will also be one
word at a time.
<p>
Middle clicking pastes the current contents of the clipboard at the position where
you click.
<p>
If <a href=jxhelp:#DND>Drag-And-Drop</a> is turned on in the <a href=jxhelp:#Prefs>
Preferences</a>, left clicking on the current selection and dragging lets you drag the
selected text instead of selecting text.

<h3> Really cool mouse shortcuts </h3>

<ul>
<li> Button in upper right corner of window containing source or header file to open the header or source file, respectively (or press Meta-Tab if you are using Macintosh style menu shortcuts or Ctrl-Tab if you are using Windows style menu shortcuts)
<li> Button in upper right corner of window containing HTML file to view it in the browser of your choice (see above)
<p>
<li> Control-left-double-click on a file name to automatically find and open it.
<li> Control-left-double-click on a URL to open it in the browser of your choice. (see above)
<p>
<li> Meta-double-click on a symbol name to find it in the <a href=jxhelp:CBSymbolHelp>symbol database</a> and class trees.
</ul>

The double click shortcuts activate when you release the mouse button, so you can select more than a single word.  This is useful for strings like \"<tt>std::ios</tt>\".

<a name=KeyShortcuts>

<h3> Key shortcuts </h3>

The arrow keys obviously move the caret around inside the text.  Holding down the Control key makes the up and down arrows move the caret to the top and bottom of the visible text, respectively, while the left and right arrows move the caret by one word at a time.  Control-up/down is useful for scrolling the text by one line without having to use the scrollbar:  simply press Control-up/down-arrow and then up/down.  It is also useful for bringing the cursor to the visible text after scrolling.
<p>
Holding down the partial word modifier key (settable in the <a href=jxhelp:#Prefs>Preferences</a> dialog) makes the left and right arrows move the caret by one <em>partial</em> word at a time.  As an example, this lets you move around inside both <tt>GetFileName</tt> and <tt>get_file_name</tt>.
<p>
Holding down the Meta key makes the up and down arrows move the caret to the beginning and end of the file, respectively, while the left and right arrows move the caret to the beginning and end of the current line, respectively.  In addition, Meta-left-arrow is smart enough to move the caret to the beginning of the <u>text</u> on the line.  Pressing it a second time moves the caret to the beginning of the line.  (This is configurable in the <a href=jxhelp:#Prefs>preferences</a>.)
<p>
Holding down the Shift key while using the arrow keys selects text.  This works even in conjunction with the Meta, Control, and partial word modifier keys.
<p>
The backspace key on the main keyboard deletes the character to the left of the caret.  The delete key on the keypad deletes the character to the right of the caret.
<p>
If <a href=jxhelp:#Prefs>automatic indentation</a> is turned on, Shift-Return maintains the current indentation but ignores the line prefix.
<p>
Meta-comma activates the line number display so you can jump to a different line.  Meta-Shift-comma activates the column number display so you can jump to a particular column on the current line.  Pressing return takes you to the line or column that you have entered and returns you to the text.  Pressing Shift-return in the line number display takes you to the line and activates the column number display.

<a name=ExtScript>

<h3> External scripts </h3>

This feature allows you to paste the output of an arbitrary program into an editor window.
<p>
If you right-click on selected text (or Meta-right-click if you have \"Allow Drag-and-Drop\" disabled in the Preferences), the resulting context menu will include a menu of all the executable scripts in the directory that you selected in the <a href=jxhelp:CBFileTypeHelp>File Types</a> dialog.  (Subfolders are also displayed so you can group scripts together if you have a lot of them.)  The script that you select is run with the three arguments:  path to the file, name of the file, line number of the start of the selection.  The selected text is fed to the script via <tt>stdin</tt> (file descriptor 0) and is replaced by the script's output (file descriptor 1).
<p>
The \"Run script\" item on Edit menu provides a more general interface which allows you to specify the arguments to the script.  In this case, the script must be on your execution path.  You do not have to select any text in this case, but if you do, it will be fed to the script via <tt>stdin</tt> (file descriptor 0).  The output of the script (file descriptor 1) will either be pasted in at the current caret location or will replace the selected text.
<p>
The following strings are replaced when they are used in the \"Run script\" dialog:

<ul>
<li> <tt>$f</tt> -- full path and file name
<li> <tt>$p</tt> -- path
<li> <tt>$n</tt> -- file name
<li> <tt>$l</tt> -- line number
</ul>

If a character is preceded by a backslash, the backslash is removed and any special
meaning is ignored.  Thus, use<tt>\\$</tt> to get a dollar character and <tt>\\\\</tt>
to get a backslash character.

<a name=Prefs>

<h3> Preferences </h3>

Word wrapping can be adjusted separately for each file type, so this option is
in the <a href=jxhelp:CBFileTypeHelp>File Types</a> dialog.

<p>
The following options can be changed in the Text Editor Preferences dialog:
<blockquote>
<dl>
<dt> Font & Size
<dd> These menus let you change the font used in the Text Editor windows.  The Size menu is only active if you choose a font from the second section of the Font menu.  The sample text to the right of these menus is displayed using the font and size that you select.
<p>
<dt> Change color (6 buttons)
<dd> These buttons let you change the color of the text, the background, the insertion caret, the background of text that is selected, the frame that outlines the selected text when the window does not have focus, and the right margin indicator.  The sample text above the buttons is displayed using the colors that you select.  Note that you have to edit the <a href=jxhelp:CBStylerHelp> context-sensitive highlighting</a> colors separately to make them visible against the background color that you choose.
<p>
<br>
<dt> <a href=jxhelp:#Emulators>Emulator</a>
<dd> Lets you emulate the behavior of anothe editor.
<p>
<br>
<dt> Spaces per tab
<dd> Adjusts the spacing of the tab stops.
<p>
<dt> Clean paragraph margins line width
<dd> Adjusts the width enforced by the <a href=jxhelp:CBCRMHelp>\"Clean paragraphs margins\"</a> item on the Edit menu.
<p>
<dt> Undo depth
<dd> Determines the number of actions that can by undone in each Text Editor window.  Reducing the depth reduces the memory used by each Text Editor window.
<p>
<dt> Draw margin after column
<dd> If this is checked, a margin indicator will be drawn to the right of the specified column in every Text Editor window.
<p>
<br>
<dt> Enable <a href=jxhelp:#DND>Drag-And-Drop</a> & context menu
<dd> If this is checked, you can drag text around inside each Text Editor window and also drag text from one Text Editor window to another.  Also, right-clicking will open a menu of useful commands.  (All these commands are in the menu bar, too, of course.)  Holding down the Meta key toggles this setting while you work in a window.
<p>
<dt> <a href=jxhelp:CBCRMHelp>Automatically indent new lines</a>
<dd> If this is checked, the caret will be placed below the beginning of the text on the previous line after you press return.  You can change this for individual windows using the Settings menu in the lower right corner.
<p>
<dt> Tab inserts spaces
<dd> If this is checked, pressing the tab key will insert spaces to match the tab width set in the \"Spaces per tab\" input field.  This has the advantage that the text will look the same in other programs that use a different tab width, but has the disadvantage that the position will not be updated if you later change the value in the \"Spaces per tab\" input field.  You can change this for individual windows using the Settings menu in the lower right corner.
<p>
<dt> Tab completes words and activates macros
<dd> If this is checked, pressing the tab key after typing a partial keyword will complete the keyword, and pressing the tab key after typing the name of a macro will activate it.  If this is not checked, you can still use Control-Space to perform the same actions.  If this is checked, you can still insert a tab character by holding down the Shift key.
<p>
<dt> Automatically copy text when it is selected
<dd> If this is checked, any text that you select will automatically be copied to the clipboard.  This applies to input fields in dialogs as well as Text Editor windows.
<p>
<dt> Middle button pastes text
<dd> If this is checked, pressing the middle button on the mouse will paste the contents of the clipboard.  This affects all text input areas, including Editor windows and dialog windows.
<p>
<br>
<dt> Balance grouping symbols while typing
<dd> If this is checked and you type <tt>)</tt>, <tt>}</tt>, or <tt>]</tt> in a source window, the matching <tt>(</tt>, <tt>{</tt>, or <tt>[</tt> will flash to show you where it is.
<p>
<dt> Scroll if outside view
<dd> If this is checked, the text will scroll if the balancing grouping symbol is not visible in the window.  After flashing the symbol, the text will scroll back to where it was so you can keep typing.
<p>
<dt> Beep if symbol not balanced
<dd> If this is checked and you type an unbalanced <tt>)</tt>, <tt>}</tt>, or <tt>]</tt>, Code Crusader will beep.
<p>
<br>
<dt> Alphabetize Functions menu in source windows
<dd> If this is checked, the function names displayed in the <a href=jxhelp:#SourceCode>Functions menu</a> in source windows will be alphabetized.  Otherwise, they will be displayed in the order defined in the file.  If you hold down the Meta key and open the menu, the opposite of the current setting will be used.
<p>
<dt> Include namespace in Functions menu
<dd> If this is checked, the function names displayed in the <a href=jxhelp:#SourceCode>Functions menu</a> in source windows will include their namespaces.  If you hold down the Shift key and open the menu, the opposite of the current setting will be used.
<p>
<dt> Use small font in Functions menu
<dd> If this is checked, the function names displayed in the <a href=jxhelp:#SourceCode>Functions menu</a> in source windows will be displayed in a smaller font so that more items fit on the screen.
<p>
<br>
<dt> Create backup file
<dd> Determines whether or not the original contents of the file will be copied to a backup file (e.g. foo.cc goes to foo.cc~) before the new contents are saved.
<p>
<dt> Only create backup file if it doesn't already exist
<dd> If this is checked, a backup file will only be created if one does not already exist.  Otherwise, a backup file will be created every time after you open a file and save the first changes.  This checkbox is disabled if \"Create backup file\" is not checked.
<p>
<dt> Open complement file on top of existing window
<dd> Normally, when one opens a source or header file, the preferences are used to place the window.  When this is checked, however, the window is placed on top of its complement file, if this is already open.
<p>
<dt> Allocate space for *** in window title
<dd> The fvwm window manager decides the size of an iconified window when one iconifies it for the first time and does not change it after that, even if the window title changes.  This can be annoying since Code Crusader prepends *** to the window title after you modify the text.  If this option is checked, Code Crusader will prepend spaces to the initial window title so that the *** won't affect the window title's width.  This option should not be used with fvwm95 because it allocates space in the task bar in a different way.
<p>
<br>
<dt> Modifier to move by partial word
<dd> This lets you choose which modifier key should activate <a href=jxhelp:#KeyShortcuts>\"move by partial word.\"</a>  The <a href=jxhelp:CBMiscHelp#ModifierKeys>Modifier Keys</a> help section explains how to make a key map to Mod2 to Mod5.  This is configurable because hardward constraints force some of Mod2 to Mod5 to be used for modifiers like NumLock, and this varies from system to system.
<p>
<br>
<dt> <a href=jxhelp:#KeyShortcuts>Meta-left-arrow</a> moves to front of text
<dd> If this is checked, Meta-left-arrow will move the caret to the front of the <em>text</em> on the line.  Using it again will move the caret to the front of the line.  Otherwise, Meta-left-arrow will move the caret to the front of the line the first time it is used.
<p>
<dt> Home/End move to beginning/end of line
<dd> If this is checked, the Home/End keys move the caret to the beginning/end of the line instead of scrolling to the top/bottom of the text.  To compensate, Control-Home/End scrolls to the top/bottom of the text.  All the other  <a href=jxhelp:CBEditorHelp#KeyShortcuts>shortcuts</a> still work.
<p>
<dt> Caret follows when you scroll
<dd> If this is checked, the caret follows along when you scroll the text.  You will also lose the selection when it scrolls out of view.  If you use <a href=jxhelp:CBMiscHelp#Scrolling>scrolltabs</a>, then turning this option off makes it easier to return to the position where you are editing.
</dl>
</blockquote>

<a name=Emulators>

<h3> Emulators </h3>

<h4> vi </h4>

Newly opened windows start in Command mode.  When in Input mode, Esc switches to Command mode.  The following key bindings are implemented in Command mode:

<blockquote>
<dl>
<dt>Arrow keys</dt>
<dd>Move cursor</dd>
<p>
<dt>0 or ^</dt>
<dd>Go to beginning of line.</dd>
<dt>$</dt>
<dd>Go to end of line.</dd>
<dt>Return</dt>
<dd>Go to beginning of next line.</dd>
<dt>G</dt>
<dd>Go to end of file.</dd>
<dt>:0 Return</dt>
<dd>Go to beginning of file.</dd>
<dt>:# Return</dt>
<dd>Go to line.</dd>
<dt>:$ Return</dt>
<dd>Go to end of file.</dd>
<p>
<dt>Ctrl-U</dt>
<dd>Go up 1/2 page.</dd>
<dt>Ctrl-D</dt>
<dd>Go down 1/2 page.</dd>
<dt>Ctrl-B</dt>
<dd>Go up 1 page.</dd>
<dt>Ctrl-F</dt>
<dd>Go down 1 page.</dd>
<p>
<dt>i</dt>
<dd>Insert before cursor.</dd>
<dt>a</dt>
<dd>Insert after cursor.</dd>
<dt>I</dt>
<dd>Insert at beginning of line.</dd>
<dt>A</dt>
<dd>Insert at end of line.</dd>
<p>
<dt>o</dt>
<dd>Open new line below cursor.</dd>
<dt>O</dt>
<dd>Open new line above cursor.</dd>
<p>
<dt>x</dt>
<dd>Delete character at cursor.</dd>
<dt>X</dt>
<dd>Delete character before cursor.</dd>
<p>
<dt>yy or Y</dt>
<dd>Copy (yank) line.</dd>
<dt>y$</dt>
<dd>Copy (yank) from cursor to end of line.</dd>
<dt>dd</dt>
<dd>Delete line.</dd>
<dt>D or d$</dt>
<dd>Delete from cursor to end of line.</dd>
<dt>C</dt>
<dd>Delete from cursor to end of line and switch to insert mode.</dd>
<p>
<dt>/ or ?</dt>
<dd>Regular expression search.</dd>
<dt>n</dt>
<dd>Find next match.</dd>
<p>
<dt>u</dt>
<dd>Undo last change.</dd>
<dt>:w Return</dt>
<dd>Save file.</dd>
<dt>:w! Return</dt>
<dd>Save file.</dd>
<dt>:q Return</dt>
<dd>Close file.  (Warns if unsaved.)</dd>
<dt>:q! Return</dt>
<dd>Close file.  (Discards changes.)</dd>
<dt>:wq Return</dt>
<dd>Save and close file.</dd>
</dl>
</blockquote>

For any command that deletes, yanks, or pastes text, you can prepend a number to specify the number of items, e.g., 5x deletes five characters.  You can also specify a named buffer, e.g., 5\"ax deletes five characters and places them in the \"a\" buffer instead of the default buffer.  \"ap will then paste the contents of the \"a\" buffer.

<h3> Safety features </h3>

Code Crusader has several features to protect you from accidental crashes of
both the X Server and Code Crusader itself:

<ul>
<li> As mentioned in the Text Editor Preferences section above, Code Crusader can
     create a backup of the previous contents whenever you save a file.
     (This is turned on by default.)
<p>
<li> Each file that has unsaved changes is <em>safety saved</em> every 30 seconds
     in a # file.  (e.g. \"hello_world.c\" is safety saved in \"#hello_world.c#\")
<p>
<li> If the X Server crashes, every unsaved file is safety saved again to catch
     the very latest changes.
<p>
<li> If Code Crusader itself crashes on an <tt>assert()</tt>, every file is safety
     saved in a ## file.  (e.g. \"hello_world.c\" is safety saved in
     \"##hello_world.c##\")  The original # file is not modified because, when the
     program itself crashes, data may have become corrupted, so the # file may be
     better than the ## file.
<p>
<li> When a file is opened, Code Crusader automatically checks to see if a newer
     safety saved version exists, and asks if you would like to open it.
</ul>

</html>"
