0

CBStylerHelp

"<html>
<head>
<title> Context-sensitive Highlighting </title>
</head>

Code Crusader provides context-sensitive highlighting for the following
<a href=jxhelp:CBFileTypeHelp>file types</a>:

<ul>
<li> Bourne shell
<li> C shell
<li> C/C++
<li> HTML/PHP/XML
<li> TCL
</ul>

The \"... styles\" items on the Preferences menu in the Text Editor windows allow you to turn highlighting on or off and to set the styles to be displayed.
<p>
The top list specifies the styles for the different types of text.  As an example, the \"Comment\" item for C/C++ specifies how comments will be displayed in source and header files.
<p>
The bottom list specifies the styles for specific words that override the top list.  As an example, if you created an item \"#pragma\" in the C/C++ window, then all <tt>#pragma</tt> directives would use this style instead of the style for \"Preprocessor directive\" in the top list.  (The words in this list are also used for <a href=jxhelp:CBCompleterHelp>keyword completion</a>.)
<p>
To change the style of an item, right-click on the item, and select from the menu that appears.  To change the style of several items, select them and then right-click on any one of them.  (There are separate sections devoted to <a href=jxhelp:CBMiscHelp#MultiSelect>selecting multiple items</a> and the <a href=jxhelp:CBMiscHelp#ColorChooser>Color Chooser</a> dialog.)  Note that fonts like <tt>6x13</tt> cannot be displayed in italic because there is no italic version of these fonts installed on most systems.  <tt>Courier</tt> can be displayed in italic, however.
<p>
You cannot change the items in the top list, only their styles.
<p>
To add an item to the bottom list, click the \"New\" button.  To remove items from the bottom list, select them and click the \"Remove\" button.  To change the text of an item in the bottom list, double click on it.

<h3> Notes for Bourne/C shell </h3>

The items in the bottom list must be one of the following types:

<ul>
<li> Identifier
<li> Variable
<li> Reserved keyword
<li> Built-in command
<li> Operator
</ul>

The last item in the top list is \"<u>Detectable</u> error\" because only a few of the simplest errors can be found by a lexer:

<ul>
<li> Empty variables
<li> Unterminated strings
</ul>

Heredoc strings are not styled because this would require evaluation of the delimiter.

<h3> Notes for C/C++ </h3>

The items in the bottom list must be one of the following types:

<ul>
<li> Identifier
<li> Reserved keyword
<li> Numerical or character constant
<li> Preprocessor directive
<li> Operator (e.g. <tt>+=</tt>)
<li> Delimiter (parentheses, brackets, braces, comma, semicolon)
<li> Trigraph
<li> Respelling
</ul>

Preprocessor directives are specified by their name (e.g. <tt>#include</tt>) even though the style is applied to both the name and the arguments.
<p>
The last item in the top list is \"<u>Detectable</u> error\" because only a few of the simplest errors can be found by a lexer:

<ul>
<li> Illegal character and octal constants
<li> Unterminated strings
<li> Unterminated C comments
<li> Illegal characters (e.g. lone #)
</ul>

<h3> Notes for HTML/PHP/XML </h3>

The items in the bottom list must be one of the following types:

<ul>
<li> HTML
	<p>
	<ul>
	<li> Tag
	<li> Name of scripting language
	<li> Special character
	</ul>
<p>
<li> PHP
	<p>
	<ul>
	<li> Identifier
	<li> Variable
	<li> Reserved keyword
	<li> Built-in data type
	<li> Numerical constant
	<li> Operator (e.g. <tt>+=</tt>)
	<li> Delimiter (parentheses, brackets, braces, comma, semicolon)
	</ul>
<p>
<li> XML
	<p>
	<ul>
	<li> Fully qualified tag
	<li> Namespace followed by colon (:)
	</ul>
</ul>

Tags are specified by their name (e.g. <tt>font</tt>) even though the style is applied to both the name and the arguments.
<p>
Special characters are specified by their name, excluding the leading &amp. (e.g. <tt>lt</tt> instead of <tt>&amp;lt</tt>)
<p>
The last item in the top list is \"<u>Detectable</u> error\" because only a few of the simplest errors can be found by a lexer:

<ul>
<li> Empty/unterminated tags
<li> Invalid escape characters
<li> Unterminated PHP strings
<li> Unterminated C-style comments
<li> Illegal octal constants
<li> Illegal characters (e.g. lone $)
</ul>

Note that only the leading variable name of the {$...} construct for evaluating expressions within strings is marked because detecting the end of the construct would require a parser.
<p>
When a closing PHP tag (e.g. ?&gt;) is deleted, the styles following it will not be updated correctly.  To fix this would require sacrificing the optimizations that make it possible to restyle the text while you type.  To force an update of all the styles, delete and then re-type the &lt; character from the preceding opening PHP tag (i.e. &lt;?php).

<h3> Notes for TCL </h3>

The items in the bottom list must be one of the following types:

<ul>
<li> Word
<li> Variable
</ul>

The last item in the top list is \"<u>Detectable</u> error\" because only a few of the simplest errors can be found by a lexer:

<ul>
<li> Empty variables
<li> Unterminated strings
</ul>

<h3> Supporting other languages </h3>

The context-senstitive highlighting API is very simple, so it is easy to add support for other languages <em>once a lexer is written</em>.  This cannot be linked in dynamically, however, because it does require minor changes to other parts of Code Crusader, such as the preferences file and the Preferences menus.  If you are interested in adding support for another language, please contact <a href=http://johnlindal.wix.com/aboutme>John Lindal</a>.
<p>
Note that, in order to be compatible with Code Crusader, the code will have to be written in C++ and will have to use the <b>JCore</b> library.
<p>
Also, before suggesting support for FORTRAN, please realize that it is impossible to write a lexer for it.  Pure FORTRAN requires a full parser, which, while not impossible, is a <em>lot</em> more work.  One ought to be able to write a lexer if one requires whitespace between symbols, however.  This is unlikely to cause problems with any existing source code.

</html>"
