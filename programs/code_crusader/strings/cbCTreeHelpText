0

CBCTreeHelp

"<html>
<head>
<title> C++ Class Tree </title>
</head>

The tree displays the inheritance relationships between the C++ classes that are found by parsing header files.  Green indicates public inheritance, yellow is protected inheritance, and red is private inheritance.  For the primary parent, black is used to indicate public inheritance to avoid too many distracting colors and make the protected and private inheritances stand out more.
<p>
Classes that are declared with \"class\" are drawn with black text.  Classes that are declared as \"struct\" or \"enum\" are drawn with gray text.  The names of classes that declare pure virtual functions are italicized.
<p>
If the parent of a class is not found in any of the files that are parsed, a \"ghost\" class is created to indicate this.  Ghost classes are drawn with a gray background.
<p>
To add classes to the tree, use the \"Add classes...\" item on the Tree menu.  (Classes in the Project window are always included in the tree.)  To update the current tree without quitting, use the \"Update\" item.  The <a href=jxhelp:CBFileTypeHelp>\"Edit file types...\"</a> item lets you set the suffixes for source and header files.  It is a good idea to add all the directories that contain source or header files, not just those that contain classes.  This way, when Code Crusader searches for a file (e.g. when you use \"Open selection\" in a Text Editor window), it is more likely to find it.  (Note that <tt>/usr/include</tt> is always searched.)
<p>
To locate a particular class, press the space bar and then type the first few letters in its name.  This search is case-insensitive and ignores the namespaces.  To then open the source file, press Return.  To open the header file, press Meta-Tab if you are using Macintosh style menu shortcuts or Ctrl-Tab if you are using Windows style menu shortcuts.  You do not have to de-iconify the window before typing.
<p>
To locate all classes that implement a particular function, select \"Find function\" from the Tree menu and then enter the name of the function to search for.  This is case sensitive.  If a single function is found, its definition will automatically be displayed.
<p>
If you click on a class in the Tree window:

<blockquote>
<dl>
<dt> Any button once (or type the first few characters of the name)
<dd> select the class
<p>
<dt> Shift key + any button once
<dd> select/deselect the class without deselecting other classes
<p>
<dt> Left button twice (or Return)
<dd> open source file for the class
<br> (opens documentation file if source can't be found)
<p>
<dt> Middle button twice (or Meta-Tab if you are using Macintosh style menu shortcuts or Ctrl-Tab if you are using Windows style menu shortcuts)
<dd> open header file for the class
<p>
<dt> Right button twice
<dd> open list of functions implemented by the class
</dl>
</blockquote>

There are also several <a href=jxhelp:CBEditorHelp#MouseShortcuts>shortcuts</a>
in the <a href=jxhelp:CBEditorHelp>built-in editor</a> that connect back to
the tree.

<a name=FunctionList>

<h3> Displaying the functions implemented by a class </h3>

To get a list of the functions that a class implements, either click on it and hold
for a moment to display a menu or right-double-click to create a new window.
<p>
The function names are colored to indicate whether they are public (black), protected
(brown, since yellow text on a white background is very difficult to read), or private
(red).  Italic indicates a pure virtual function.  Qt signals are indicated by an
icon showing an arrow leaving an object.  Qt slots are indicated by an icon showing an
arrow entering an object.
<p>
The setting in the Tree Preferences dialog controls whether or not the menu and each new
window also displays the functions inherited from base classes.  If this is turned on,
functions implemented by the class itself are boldfaced to make them easy to find.
Changing the setting in the Tree Preferences dialog does not affect existing windows.
In these windows, there is a menu item on the Options menu that controls the display.
<p>
To locate a particular function, press the space bar and then type the first few
letters in its name.  This search is case-insensitive.
To then open the file containing the function's code, press Return.  To open the
header file, press Meta-Tab if you are using Macintosh style menu shortcuts or Ctrl-Tab if you are using Windows style menu shortcuts.  You do not have to de-iconify the window before typing.
<p>
If you click on a function name in a Function List window:

<blockquote>
<dl>
<dt> Any button once (or type the first few characters of the name)
<dd> select the function
<p>
<dt> Left button twice (or Return)
<dd> display source for the function
<p>
<dt> Middle button twice (or Meta-Tab if you are using Macintosh style menu shortcuts or Ctrl-Tab if you are using Windows style menu shortcuts)
<dd> display prototype for the function
<p>
<dt> Right button twice
<dd> search the tree for all classes that implement the function
</dl>
</blockquote>

When using the menu, the mouse button that was pressed determines the action, just like
when double clicking in the window.

<h3> <a href=jxhelp:CBTreePrefsHelp>Preferences</a> </h3>

<a name=CPP>

<h3> Defining preprocessor symbols </h3>

Code Crusader can never automatically know which preprocessor symbols that are defined
at compile time.  In order to parse header files correctly, however, it does need to
know the definitions of the symbols used in your class definitions.  You can specify
these using the \"Preprocessor macros...\" item on the Preferences menu.
<p>
As an example, the <a href=http://cs.wustl.edu/~schmidt/ACE.html>ACE networking
library</a> defines classes with

<pre>
    class ACE_Export class_name {...}
</pre>

On Windows, <tt>ACE_Export</tt> evaluates to the compiler dependent stuff required to
build a DLL.  On UNIX, it evaluates to nothing, so it simply disappears.  Code Crusader
requires that you define ACE_Export to evaluate to nothing, because otherwise the
parser will not recognize it as a class definition.
<p>
This implementation is not a true preprocessor.  It can handle only simple names,
not full macros with arguments.  This is generally sufficient because only macros
in the class declaration need to be defined, and as above, they usually only need
to be removed.  If this is not sufficient, please contact the author.
<p>
Code Crusader can, however, replace a macro that takes arguments with a fixed string.
As an example, the <a href=http://www.trolltech.com/>Qt</a> widget library defines
the macro <tt>Q_PROPERTY(...)</tt>.  This confuses Code Crusader's parser, but defining
<tt>Q_PROPERTY()</tt> to be replaced by nothing (i.e. removed) is sufficient to allow
Code Crusader to parse the rest of the file.

</html>"
