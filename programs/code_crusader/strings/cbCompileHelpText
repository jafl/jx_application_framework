0

CBCompileHelp

"<html>
<head>
<title> Compiling your program </title>
</head>

<h3> Introduction to compiling under UNIX </h3>

Development environments on the Macintosh (e.g. Metrowerks) and on Windows (e.g. Visual C++) hide the process of compiling the source files and building the finished program.  They are able to do this because the project manager, compiler, and linker are all integrated into one system.
<p>
On UNIX, however, the compiler and linker are separate programs, and different people and different platforms (e.g. Linux vs Solaris) prefer to use different compilers and linkers.  Thus, while Code Crusader and <a href=jxhelp:CBMakemakeHelp><tt>makemake</tt></a> do hide most of the work done by a project manager, they do not hide the details of dealing with the compiler and linker.
<p>
If a C program is contained entirely within one source file and does not require any header files other than those in <tt>/usr/include</tt>, one can compile and link it with the following command:

<blockquote><tt>
  gcc -o program_name source_file.c
</tt></blockquote>

A C++ program that is contained within one source file can be compiled and linked with:

<blockquote><tt>
  g++ -o program_name source_file.cc
</tt></blockquote>

If you have GNU's version of <tt>make</tt>, you can use:

<blockquote><tt>
  make source_file
</tt></blockquote>

in place of either of the above commands.
<p>
For a program that is spread across more than one source file, you <em>want</em> to learn how to use <tt>makemake</tt> and GNU's version of <tt>make</tt>.  <a href=jxhelp:CBMakemakeHelp><tt>makemake</tt></a> is included as part of the Code Crusader package.  You can learn more about <tt>make</tt> either by reading books published by <a href=http://www.oreilly.com/>O'Reilly</a>, such as <cite>Programming with GNU software</cite> and <cite>Managing projects with make</cite>, or by studying the <a href=http://www.gnu.org/manual/make/>on-line documentation for GNU make</a>.

<h3> Compiling with Code Crusader </h3>

In order to compile anything, you must first create or open a project.  You can create a new project by using the \"New project...\" item on the File menu.  The <a href=jxhelp:CBProjectTutorialHelp>tutorial</a> walks you through the basics of creating a project and compiling and running a very simple program.  Once you have mastered these basics, you can get as fancy as you want by adding build targets to <tt>Make.header</tt> and defining your own tasks on the <a href=jxhelp:CBTasksHelp>Tasks menu</a>.
<p>
The basic tasks for compiling a program are automatically included on the Tasks menu.  These are:

<blockquote>
<dl>
<dt> Build (via make)
<dd> Compiles and links your program.
<p>
<dt> Compile source file (via make)
<dd> From an Editor window, compiles the source file.  From any other window, compiles the selected source files or classes.
<p>
<dt> Remove object files (make tidy)
<dd> Deletes compiler output files to free up space on your disk.
</dl>
</blockquote>

The command to build a Makefile for the project is specified in the <a href=jxhelp:CBProjectHelp#Config>Project Configuration</a> dialog.
<p>
The output of the compile process is displayed in an editor window, so you can use <a href=jxhelp:CBEditorHelp#MouseShortcuts>Control-double-click</a> to open a file (line numbers are also parsed, e.g. <tt>/usr/include/stdio.h:35</tt>) and also edit and save the output.
<p>
While the compile process is running, you can pause it by pressing the Pause button in the upper right corner or by pressing Control-Z, just like on the command line.  You can stop it by pressing the Stop button in the upper right corner or by pressing Control-C (as on the command line) or Meta-period (for Macintosh fans).  You can use the key shortcuts even when the window is iconified.  (Note that, while the window is iconified, the *** in the window title tells you that the compile is running.  If errors are found, this changes to !!!.)
<p>
If the compiler reports errors, the Errors menu in the Compiler Output window will become active.  This lets you jump from one error to the next.  For convenience, if you haven't already started looking at the errors, the first error is hilighted when the process finishes.  You can examine the errors before the compile finishes because the Errors menu becomes active as soon as the first error is detected.  To open the file containing an error, you can either <a href=jxhelp:CBEditorHelp#MouseShortcuts>Control-double-click</a> on the file name or use \"Open selection to error\" on the Errors menu.
<p>
When the compile is finished and errors have occurred, the window will be de-iconized if it is iconized but will not be raised otherwise.  This allows users who prefer a single virtual screen to be notified by having the window de-iconize and allows users who prefer multiple virtual screens to avoid having the window appear on their current screen by leaving it de-iconized on another virtual screen.

</html>"
