0

CBCRMHelp

"<html>
<head>
<title> Cleaning paragraph margins </title>
</head>

<h3> Automatic indentation </h3>

When this feature is turned on in the <a href=jxhelp:CBEditorHelp#Prefs>
Text Editor Preferences</a> and you press Return, the Clean Paragraph Margin Rules
discussed below are used to determine the current line's prefix.  This
prefix is then used to compute the prefix of the newly created line.
<p>
To copy only the whitespace, hold down the Shift key while pressing Return.

<h3> Cleaning paragraph margins </h3>

The \"Clean paragraph margins\" item on the Edit menu inserts and removes newlines in the
paragraph that contains the caret so that no line exceeds the width set in the
<a href=jxhelp:CBEditorHelp#Prefs>Text Editor Preferences</a>.  (default: 75)
<p>
A paragraph is defined as a sequence of non-empty lines that have the same prefix.
A line is empty if it has no characters or only prefix characters.
<p>
If there is a selection, the item reads \"Clean margins for selection\" instead and
performs the above operation on each paragraph touched by the selection.
<p>
The \"Coerce paragraph margins\" item defines a paragraph as a sequence of non-empty
lines, even if the prefixes are different.  This is useful if you want to force a
change in the prefix, because you only have to change the prefix of the first line by
hand.

<h3> Defining paragraph prefixes </h3>

The \"Clean paragraph margins rules...\" item on the Preferences menu in the Text Editor
windows lets you define what a paragraph prefix is.  You can define as many different
sets of rules as you wish, and you can share them with others by using the \"Load\"
and \"Save\" buttons.  The <a href=jxhelp:CBFileTypeHelp>File Type</a> dialog
lets you choose which set of rules to use for each file.
<p>
Each rule has three parts:

<ol>
<li> <b>First line prefix</b> <br>
     <a href=jxhelp:JXRegexHelp>regular expression</a> that matches the prefix of
     the first line of the paragraph
<p>
<li> <b>Rest of lines prefix</b> <br>
     <a href=jxhelp:JXRegexHelp>regular expression</a> that matches the prefix of
     the rest of the lines of the paragraph
<p>
<li> <b>Replace prefix with</b> <br>
     <a href=jxhelp:JXRegexHelp#Replace>replace expression</a> from which the prefix of
     the rest of the lines of the paragraph is calculated
</ol>

The rule for treating only whitespace as a prefix is built in, so you only have to
specify rules for other patterns.  You also do not need to use the up caret
(<tt>^</tt>) anchor to specify that the match must occur at the beginning of the line
because Code Crusader does this automatically.
<p>
A simple example is the single rule required for email:

<ol>
<li> <tt>[[:space:]]*(&gt;+[[:space:]]*)+</tt>
<li> <tt>[[:space:]]*(&gt;+[[:space:]]*)+</tt>
<li> <tt>$0</tt>
</ol>

The First and Rest patterns are the same because all lines begin with some mix of
brackets (&gt;) and spaces.  The Replace pattern simply says to use the first line's
prefix on all the following lines.  \"Clean paragraph margins\" will therefore collect
consecutive lines that begin with exactly the same pattern of brackets and spaces and
rearrange the words to fit within the line width constraint set in the
<a href=jxhelp:CBEditorHelp#Prefs>Text Editor Preferences</a>.  \"Coerce paragraph margins\"
will first collect consecutive lines that begin with <em>any</em> pattern of brackets
and spaces and will then change the prefix of each line to match the prefix of the
first line before rearranging the words to fit within the line width constraint.
Both will stop collecting if they find a line that contains nothing but brackets and
spaces, because this is recognized as an empty line.
<p>
Here is an example:
<p>

Original text:

<pre>
|---------------|
 > This sentence does not
 > fit on one
 >>line.
</pre>

\"Clean paragraph margins\" result:

<pre>
|---------------|
 > This sentence
 > does not fit
 > on one
 >>line.
</pre>

\"Coerce paragraph margins\" result:

<pre>
|---------------|
 > This sentence
 > does not fit
 > on one line.
</pre>

A more complicated example is the two rules required for multiline C comments:

<ol>
<li> <tt>([[:space:]]*)/((\\*+[[:space:]]*)+)</tt>
<li> <tt>[[:space:]]*(\\*+/?[[:space:]]*)+</tt>
<li> <tt>$1 $2</tt>
</ol>
<ol>
<li> <tt>[[:space:]]*(\\*+[[:space:]]*)+</tt>
<li> <tt>[[:space:]]*(\\*+/?[[:space:]]*)+</tt>
<li> <tt>$0</tt>
</ol>

The first rule specifies that the prefix of the first line is <tt>/*</tt>
followed by more asterisks and spaces.  Following lines start with spaces
and asterisks, like this:

<pre>
    /* This C comment
     * spans two lines.
     */
</pre>

The Rest pattern includes the possibility of a slash following the last
asterisk in order to treat the line with <tt>*/</tt> as empty and force
the collecting to stop.
<p>
The second rule specifies that one can also have a paragraph where all the
prefixes are spaces and asterisks, like this:

<pre>
    /* This is the first line.
     *
     * This is a paragraph
     * within a C comment.
     */
</pre>

Note the Rest pattern again includes the possibility of <tt>*/</tt>, for the
same reason.
<p>
<b>Whenever you specify a rule where the first line's prefix is
different from the rest, you must include a second rule which matches only the
first rule's Rest pattern.</b>
<p>
This not only allows sub-paragraphs, as in the C comment above, but it is also
required by the algorithm that Code Crusader uses to find paragraph boundaries.

</html>"
