0

CBProjectHelp

"<html>
<head>
<title> Project Window </title>
</head>

The Project window is a convenient place to store all the files associated with a project and provides a foundation for the interface to <a href=http://www.gnu.org/manual/make/>GNU <tt>make</tt></a>.  The <a href=jxhelp:CBProjectTutorialHelp>tutorial</a> provides an introduction to this interface.
<p>
Any file can be added to the project, not only a source file.  To do this, use \"Add files...\" on the Source menu.  You can also add a file that is open in a <a href=jxhelp:CBEditorHelp>Text Editor</a> window to a project by using the \"Add to project\" menu on the Tasks menu in the <a href=jxhelp:CBEditorHelp>Text Editor</a> window.  If you select a file in the project before using \"Add files...\" or \"Add to project\", the new files will be inserted after the selection.  If you select a group, the new files will be appended to the group.
<p>
When you select the files, you can also choose the type of path information to store.  The default is relative to the project file's path, which makes it easy to transfer the project's directory structure to a different location or even a different machine.  Once a file has been added to the project, its path can be changed by holding down the Meta key and double clicking on the file with the left mouse button.  You can then either change the name directly or click on the button to use the Choose File dialog.
<p>
To open a file from the Project window, double click with the left button.  To open the complement file of a C/C++ source or header file, double click with the middle button.  If you have <a href=jxhelp:CBMiscHelp#MultiSelect>selected multiple files</a>, you can either use the items on the Source menu or the shortcuts Return and Ctrl-Tab.  These are the same bindings as in the inheritance trees.
<p>
If you add a library to the project and then try to open it, you will be asked to find the project file corresponding to the library.  This makes it easy to open sub-projects from the main project window.  These sub-projects are automatically built before building the main project.  You can change the project file for the library and other options via the \"Edit sub-project configuration\" item on the Source menu.  Each sub-project will be built using the command specified in its own Project Configuration dialog.
<p>
As with all lists in Code Crusader, to find a group or a file that is visible, simply type the first few letters of its name.
<p>
Groups are used to collect related files and hide them when you are not working on them.  To rearrange files or groups, simply <a href=jxhelp:CBMiscHelp#MultiSelect>select them</a> and drag them to where you want them to be.  You can also drag them to other windows that support the <a href=http://johnlindal.wix.com/xdnd>XDND protocol</a>, like the multi-file search list in the Search Text dialog.  If you drag a group, it is like dragging all the files in that group.
<p>
To change the name of a group, simply double click on it.
<p>
To open or close a group, click on the triangle to the left of the name.  You can also use the following key shortcuts:

<blockquote>
<dl>
<dt> Left arrow
<dd> close selected groups
<p>
<dt> Right arrow
<dd> open selected groups
<p>
<dt> Shift-left arrow
<dd> close all groups
<p>
<dt> Shift-right arrow
<dd> open all groups
</dl>
</blockquote>

The Shift modifier also works when clicking on the triangle.

<h3> The interface to <a href=http://www.gnu.org/manual/make/>GNU <tt>make</tt></a> </h3>

Code Crusader allows you to maintain and use your own Makefile if you wish to do so.  However, it is usually preferable to let Code Crusader build the Makefile for you.  You have the choice of using either <a href=jxhelp:CBMakemakeHelp>makemake</a>, CMake, or qmake.  The basic steps are the same for either one:

<ol>
<li> Add the source files to the Project window.
<li> <a href=jxhelp:#Config>Configure</a> the project.
<li> Configure the compiler and linker by editing Make.header (for makemake), CMake.header (for CMake), or QMake.header (for qmake).  (Simply click on the Config button in the Project window.)
<li> Ask Code Crusader to build the project by selecting the \"Build (via make)\" item on the Tasks menu.  This first writes Make.files (for makemake), CMakeLists.txt (for CMake), or a .pro file (for qmake), then invokes the command to update the project's Makefile, then builds the project associated with each library in the project, and finally invokes the actual \"Build (via make)\" task.
</ol>

The <a href=jxhelp:CBProjectTutorialHelp>tutorial</a> provides a step-by-step introduction to this procedure when using makemake.  Once you understand this, you should study the help section on <a href=jxhelp:CBCompileHelp>compiling</a>.
<p>
The Config button in the upper right corner of the Project window opens the Make.header file (for makemake), the CMake.header (for CMake), the QMake.header file (for qmake), or the Makefile (for the manual option).
<p>
As mentioned above, you can add libraries to the project. (static or shared, as specified in the <a href=jxhelp:CBFileTypeHelp>Edit File Types</a> dialog) When using makemake, these will be included in Make.files as dependencies.  Unfortunately, <tt>make</tt> is not powerful enough to recognize .so.&lt;vers&gt;, so Code Crusader doesn't recognize it either.  To get a pure .so file, either create a symbolic link or place the version number in front of the .so suffix.  (The latter is preferred because then there is never any confusion at link time.)
<p>
<blockquote>
If you use CMake, the libraries cannot be included as dependencies.  You have to edit CMake.header to change the LINK_LIBRARIES() command.
<p>
If you use qmake, the libraries cannot be included as dependencies.  You have to edit QMake.header to change the LIBS variable.
</blockquote>
<p>
Note that the directories that you specify in the Search Paths dialog are not passed to the compiler because every compiler has a different way of handling this.  If you are using makemake, you have to edit Make.header to modify SEARCHDIRS.  If you are using CMake, you have to edit CMake.header to modify the INCLUDE_DIRECTORIES() command.  If you are using qmake, you have to edit QMake.header to modify INCLUDEPATH.
<p>
<b>Notes on CMake</b>
<p>
If you want to use the platform specification features of CMake, then you must invoke them by hand in CMake.header.  Define a variable (e.g., <tt>MY_OS_FILES</tt>) within an IF ... ELSE ... ENDIF block and add this variable (e.g., <tt>${MY_OS_FILES}</tt>) in the \"Expression to append to list of dependencies\" in the Project Configuration dialog.
<p>
<b>Notes on qmake</b>
<p>
Since qmake requires a list of both source and header files, Code Crusader attempts to build the list of header files automatically.  However, only header files that directly correspond to source files in the project will be included.  If you have additional header files, or if you place your header files in a different directory than your source files, you will have to explicitly add these header files to the project if you want them to be included in the .pro file.
<p>
If you want to use the platform specification features of qmake, then you must invoke them by hand in QMake.header.  Use -= to remove files from the list and += to add files to the list.
<p>
Since qmake is a generic utility, the default configuration in QMake.header does not include anything specific to Qt.  If you want to use qmake to build Qt programs, you need to add <tt>qt</tt> to the line that begins with <tt>CONFIG</tt>.

<a name=Config>

<h3> Configuring the project </h3>

The following options can be changed in the Project Configuration dialog:

<blockquote>
<dl>
<dt> Maintain Makefile by hand
<dt> Generate Make.files from files in Project window
<dt> Generate CMake input file from files in Project window
<dt> Generate qmake input file from files in Project window
<dd> These options control whether Code Crusader lets you maintain your own Makefile or uses makemake, CMake, or qmake.
<p>
<dt> Target name
<dd> This is the name of the program or library to be built.  If you are using makemake, it can also be a list of names separated by commas.  All names will be built using the same set of source files, so this is mainly useful for generating both static and shared versions of a library.
<p>
<dt> Expression to append to list of dependencies in Make.files
<dd> This expression can do anything that <tt>make</tt> allows: evaluate variables, invoke functions, etc.  This is useful for conditional or variable dependencies.
<p>
<dt> Command to update this project's Makefile
<dd> This command is used to re-build the Makefile when files are added to or removed from project.  It can also be invoked directly by using the \"Update Makefile\" item on the Project menu in the Project window.
<p>
<dt> Command to build this project when used by other projects
<dd> If project A depends on project B, this command is used to automatically build project B when you ask Code Crusader to build project A.
</dl>
</blockquote>

<a name=Prefs>

<h3> Preferences </h3>

The following options can be changed in the Project Preferences dialog:

<blockquote>
<dl>
<dt> Reopen text files when project is opened
<dd> If this is checked, the files that were open when the project was closed will be reopened the next time you open the project.
<p>
<dt> Update symbol database while compiling
<dd> If this is checked, Code Crusader will update all affected inheritance trees and symbol browsers while you build a project or compile a source file.
<p>
<dt> Double space compiler output
<dd> If this is checked, Code Crusader separates each line of compiler output with a blank line.  This often makes it much easier to read.
<p>
<dt> Rebuild Makefile daily to update dependencies
<dd> If this is checked, Code Crusader will re-build the Makefile once a day, even if you have not added files to or removed files from the project.  This is very useful because it updates the list of header files on which each source file depends.
<p>
<dt> Path type to use when adding files via Drag-And-Drop
<dd> If \"Ask when files are dropped\" is selected, the other options will be presented in a dialog when you drop files on a project.  Otherwise, the selected path type will be used.
</dl>
</blockquote>

<a name=ExtEditor>

<h3> Choosing your text and binary editors </h3>

You can use the \"External editors...\" item on the Preferences menu to set which text and binary editors to use when displaying files.  For the text editor, the common choices are:

<ol>
<li> built-in editor
<p>
<li> emacs: <br>
     emacsclient $f <br>
     emacsclient +$l $f <br>
     (you must also run \"M-x server-start\" from within emacs)
<p>
<li> vi:<br>
     xterm -title \"$f\" -e vi $f <br>
     xterm -title \"$f\" -e vi +$l $f
</ol>

For the binary editor, the choices are:

<ol>
<li> emacs: <br>
     If you install the full remote control package (not just
     emacsclient), you can tell emacs to open a file via the
     hexl-find-file command.
<p>
<li> vi: <br>
     xterm -title \"$f\" -e vi $f
</ol>

If a character is preceded by a backslash, the backslash is removed and any special meaning is ignored.  Thus, use<tt>\\$</tt> to get a dollar character and <tt>\\\\</tt> to get a backslash character.
<p>
The advantages of using the built-in text editor are explained in the <a href=jxhelp:CBEditorHelp>Text Editor</a> help section.

</html>"
