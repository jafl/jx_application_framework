// code/CBHTMLScanner.h generated by reflex 3.0.10 from code/CBHTMLScanner.ll

#ifndef allow_multiple_includesREFLEX_CODE_CBHTMLSCANNER_H
#define allow_multiple_includesREFLEX_CODE_CBHTMLSCANNER_H
#define allow_multiple_includesIN_HEADER 1
#define REFLEX_VERSION "3.0.10"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_freespace
#undef REFLEX_OPTION_full
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_nodefault
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_prefix
#undef REFLEX_OPTION_token_type
#undef REFLEX_OPTION_unicode

#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "code/CBHTMLScanner.h"
#define REFLEX_OPTION_lex                 NextToken
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           CB::HTML
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_outfile             "code/CBHTMLScanner.cpp"
#define REFLEX_OPTION_prefix              allow_multiple_includes
#define REFLEX_OPTION_token_type          CBStylingScannerBase::Token
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "code/CBHTMLScanner.ll"

/*
Copyright Â© 2001 by John Lindal.

This scanner reads an HTML/XML/PHP/JSP file and returns CB::HTML::Scanner::Tokens.
*/

#include "CBStylingScannerBase.h"
#include <JRegex.h>
#include <jAssert.h>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace CB {
namespace HTML {

class Scanner : public CBStylingScannerBase {
#line 17 "code/CBHTMLScanner.ll"


public:

	// these types are ordered to correspond to the type table in CBHTMLStyler

	enum TokenType
	{
		kHTMLEmptyTag = kEOF+1,
		kHTMLUnterminatedTag,
		kHTMLInvalidNamedCharacter,
		kUnterminatedString,
		kUnterminatedComment,
		kUnterminatedPHPVariable,
		kUnterminatedJSRegex,
		kJavaBadCharConst,
		kPHPBadInt,
		kBadHex,
		kIllegalChar,

		kWhitespace,		// must be the one before the first item in type table

		// HTML

		kHTMLText,
		kHTMLTag,
		kHTMLScript,
		kHTMLNamedCharacter,
		kHTMLComment,
		kCDATABlock,

		// Mustache

		kMustacheCommand,

		// PHP

		kPHPStartEnd,
		kPHPID,
		kPHPVariable,
		kPHPReservedKeyword,
		kPHPBuiltInDataType,

		kPHPOperator,
		kPHPDelimiter,

		kPHPSingleQuoteString,
		kPHPDoubleQuoteString,
		kPHPHereDocString,
		kPHPNowDocString,
		kPHPExecString,

		// JSP/Java

		kJSPStartEnd,
		kJSPComment,

		kJavaID,
		kJavaReservedKeyword,
		kJavaBuiltInDataType,

		kJavaOperator,
		kJavaDelimiter,

		kJavaString,
		kJavaCharConst,

		// JavaScript

		kJSID,
		kJSReservedKeyword,

		kJSOperator,
		kJSDelimiter,

		kJSString,
		kJSTemplateString,
		kJSRegexSearch,

		// shared

		kFloat,
		kDecimalInt,
		kHexInt,
		kPHPOctalInt,

		kComment,
		kDocCommentHTMLTag,
		kDocCommentSpecialTag,

		kError			// place holder for CBHTMLStyler
	};

public:

	virtual void	BeginScan(const JStyledText* text,
							  const JStyledText::TextIndex& startIndex,
							  std::istream& input);

protected:

	bool	InTagState() const;

	virtual const JString&	GetScannedText() const = 0;

private:

	JString	itsScriptLanguage;
	JString	itsPHPHereDocTag;
	JString	itsPHPNowDocTag;
	bool	itsProbableJSOperatorFlag;	// kTrue if / is most likely operator instead of regex
	JSize	itsBraceCount;

private:

	Token	ScriptToken();
	bool	IsScript(JString* language) const;
	bool	InTagState(const int state) const;

 public:
  typedef CBStylingScannerBase AbstractBaseLexer;
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int TAG_STATE = 1;
  static const int SCRIPT_STATE = 2;
  static const int CHAR_ESC_STATE = 3;
  static const int QUOTED_ATTR_VALUE_STATE = 4;
  static const int CDATA_STATE = 5;
  static const int MUSTACHE_STATE = 6;
  static const int PHP_STATE = 7;
  static const int PHP_QUOTED_VARIABLE_STATE = 8;
  static const int PHP_CPP_COMMENT_STATE = 9;
  static const int PHP_SINGLE_STRING_STATE = 10;
  static const int PHP_DOUBLE_STRING_STATE = 11;
  static const int PHP_HEREDOC_STRING_STATE = 12;
  static const int PHP_NOWDOC_STRING_STATE = 13;
  static const int PHP_EXEC_STRING_STATE = 14;
  static const int PHP_COMPLEX_VARIABLE_STATE = 15;
  static const int JSP_STATE = 16;
  static const int JSP_CPP_COMMENT_STATE = 17;
  static const int JAVA_STRING_STATE = 18;
  static const int HTML_COMMENT_STATE = 19;
  static const int JSP_HTML_COMMENT_STATE = 20;
  static const int C_COMMENT_STATE = 21;
  static const int DOC_COMMENT_STATE = 22;
  static const int JAVA_SCRIPT_STATE = 23;
  static const int JS_C_COMMENT_STATE = 24;
  static const int JS_DOC_COMMENT_STATE = 25;
  static const int JS_CPP_COMMENT_STATE = 26;
  static const int JS_SINGLE_STRING_STATE = 27;
  static const int JS_DOUBLE_STRING_STATE = 28;
  static const int JS_TEMPLATE_STRING_STATE = 29;
  static const int JS_REGEX_SEARCH_STATE = 30;
  static const int JS_REGEX_CHAR_CLASS_STATE = 31;
  virtual CBStylingScannerBase::Token NextToken(void);
  CBStylingScannerBase::Token NextToken(const reflex::Input& input)
  {
    in(input);
    return NextToken();
  }
  CBStylingScannerBase::Token NextToken(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return NextToken();
  }
};

} // namespace CB
} // namespace HTML

#endif
