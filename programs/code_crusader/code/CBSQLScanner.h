// code/CBSQLScanner.h generated by reflex 3.0.10 from code/CBSQLScanner.ll

#ifndef allow_multiple_includesREFLEX_CODE_CBSQLSCANNER_H
#define allow_multiple_includesREFLEX_CODE_CBSQLSCANNER_H
#define allow_multiple_includesIN_HEADER 1
#define REFLEX_VERSION "3.0.10"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_freespace
#undef REFLEX_OPTION_full
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_nodefault
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_prefix
#undef REFLEX_OPTION_token_type
#undef REFLEX_OPTION_unicode

#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "code/CBSQLScanner.h"
#define REFLEX_OPTION_lex                 NextToken
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           CB::SQL
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_outfile             "code/CBSQLScanner.cpp"
#define REFLEX_OPTION_prefix              allow_multiple_includes
#define REFLEX_OPTION_token_type          CBStylingScannerBase::Token
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "code/CBSQLScanner.ll"

/*
Copyright Â© 2017 by John Lindal.

This scanner reads a SQL file and returns CB::SQL::Scanner::Tokens.
*/

#include "CBStylingScannerBase.h"
#include <jAssert.h>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace CB {
namespace SQL {

class Scanner : public CBStylingScannerBase {
#line 16 "code/CBSQLScanner.ll"


public:

	// these types are ordered to correspond to the type table in CBSQLStyler

	enum TokenType
	{
		kUnterminatedString = kEOF+1,
		kUnterminatedComment,
		kIllegalChar,

		kWhitespace,	// must be the one before the first item in type table

		kID,
		kVariable,
		kKeyword,
		kReservedWord,
		kBuiltInFunction,
		kExtensionMySQL,
		kExtensionPostgreSQL,
		kExtensionOracle,

		kOperator,
		kDelimiter,
		kMySQLOperator,

		kSingleQuoteString,
		kDoubleQuoteString,
		kBackQuoteString,

		kFloat,
		kDecimalInteger,
		kHexInteger,

		kComment,
		kMySQLComment,
		kError			// place holder for CBSQLStyler
	};

 public:
  typedef CBStylingScannerBase AbstractBaseLexer;
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int SINGLE_STRING_STATE = 1;
  static const int DOUBLE_STRING_STATE = 2;
  static const int BACK_STRING_STATE = 3;
  static const int MULTILINE_COMMENT_STATE = 4;
  virtual CBStylingScannerBase::Token NextToken(void);
  CBStylingScannerBase::Token NextToken(const reflex::Input& input)
  {
    in(input);
    return NextToken();
  }
  CBStylingScannerBase::Token NextToken(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return NextToken();
  }
};

} // namespace CB
} // namespace SQL

#endif
