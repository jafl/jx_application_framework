// code/CBGoTreeScanner.h generated by reflex 3.0.10 from code/CBGoTreeScanner.l

#ifndef REFLEX_CODE_CBGOTREESCANNER_H
#define REFLEX_CODE_CBGOTREESCANNER_H
#define IN_HEADER 1
#define REFLEX_VERSION "3.0.10"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "code/CBGoTreeScanner.h"
#define REFLEX_OPTION_lex                 CreateClasses
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           CB::GoTree
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_outfile             "code/CBGoTreeScanner.cpp"
#define REFLEX_OPTION_params              const JFAID_t fileID, CBTree* tree, JPtrArray<CBClass>* classList
#define REFLEX_OPTION_token_type          bool
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "code/CBGoTreeScanner.l"

/*
Copyright Â© 2021 by John Lindal.

This scanner reads a GoLang file and creates CBGoClass instances.
*/

#include "CBGoClass.h"
#include <JStringIterator.h>
#include <JRegex.h>
#include <JPtrArray.h>
#include <JStringPtrMap.h>
#include <JFAID.h>
#include <jAssert.h>

static const JRegex modulePattern("(?:.+?/)*(.+?)(?:/[vV][.0-9]+)?");


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace CB {
namespace GoTree {

class Scanner : public reflex::AbstractLexer<reflex::Matcher> {
#line 24 "code/CBGoTreeScanner.l"


public:

	virtual ~Scanner();

private:

	JString					itsPackage;
	JString					itsImportAlias;
	JStringPtrMap<JString>*	itsImportMap;
	JString					itsTypeName;
	JUtf8Character			itsAbstractFlag;
	CBGoClass*				itsCurrentClass;
	JString					itsTypeContent;

private:

	void	ParseTypeContent(CBClass* goClass);

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
#line 45 "code/CBGoTreeScanner.l"

	itsImportMap = jnew JStringPtrMap<JString>(JPtrArrayT::kDeleteAll);
	assert( itsImportMap != nullptr );

  }
  static const int INITIAL = 0;
  static const int PACKAGE_STATE = 1;
  static const int IMPORT_STATE = 2;
  static const int CLASS_NAME_STATE = 3;
  static const int INHERIT_STATE = 4;
  static const int C_COMMENT_STATE = 5;
  static const int CPP_COMMENT_STATE = 6;
  static const int STRING_STATE = 7;
  virtual bool CreateClasses(const JFAID_t fileID, CBTree* tree, JPtrArray<CBClass>* classList);
  bool CreateClasses(const reflex::Input& input, const JFAID_t fileID, CBTree* tree, JPtrArray<CBClass>* classList)
  {
    in(input);
    return CreateClasses(fileID, tree, classList);
  }
  bool CreateClasses(const reflex::Input& input, std::ostream *os, const JFAID_t fileID, CBTree* tree, JPtrArray<CBClass>* classList)
  {
    in(input);
    if (os)
      out(*os);
    return CreateClasses(fileID, tree, classList);
  }
};

} // namespace CB
} // namespace GoTree

#endif
