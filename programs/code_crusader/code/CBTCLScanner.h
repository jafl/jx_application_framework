// code/CBTCLScanner.h generated by reflex 3.0.11 from code/CBTCLScanner.ll

#ifndef REFLEX_CODE_CBTCLSCANNER_H
#define REFLEX_CODE_CBTCLSCANNER_H
#define IN_HEADER 1
#define REFLEX_VERSION "3.0.11"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_freespace
#undef REFLEX_OPTION_full
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_nodefault
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_token_type
#undef REFLEX_OPTION_unicode

#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "code/CBTCLScanner.h"
#define REFLEX_OPTION_lex                 NextToken
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           CB::TCL
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_outfile             "code/CBTCLScanner.cpp"
#define REFLEX_OPTION_token_type          CBStylingScannerBase::Token
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "code/CBTCLScanner.ll"

/*
Copyright Â© 2001 by John Lindal.

This scanner reads a TCL file and returns CB::TCL::Scanner::Tokens.
*/

#include "CBStylingScannerBase.h"
#include <jAssert.h>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace CB {
namespace TCL {

class Scanner : public CBStylingScannerBase {
#line 16 "code/CBTCLScanner.ll"


public:

	// these types are ordered to correspond to the type table in CBTCLStyler

	enum TokenType
	{
		kEmptyVariable = kEOF+1,
		kUnterminatedString,

		kWhitespace,	// must be the one before the first item in type table

		kPredefinedWord,
		kVariable,
		kString,
		kComment,

		kBrace,
		kSquareBracket,
		kParenthesis,
		kSemicolon,

		kOtherWord,
		kError			// place holder for CBTCLStyler
	};

public:

	virtual void	BeginScan(const JStyledText* text,
							  const JStyledText::TextIndex& startIndex,
							  std::istream& input);

private:

	JSize	itsBraceDepth;

 public:
  typedef CBStylingScannerBase AbstractBaseLexer;
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int WORD_STATE = 1;
  static const int VAR_STATE = 2;
  static const int COMMENT_STATE = 3;
  static const int STRING_STATE = 4;
  virtual CBStylingScannerBase::Token NextToken(void);
  CBStylingScannerBase::Token NextToken(const reflex::Input& input)
  {
    in(input);
    return NextToken();
  }
  CBStylingScannerBase::Token NextToken(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return NextToken();
  }
};

} // namespace CB
} // namespace TCL

#endif
