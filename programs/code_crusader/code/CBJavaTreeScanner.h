// code/CBJavaTreeScanner.h generated by reflex 3.0.10 from code/CBJavaTreeScanner.l

#ifndef REFLEX_CODE_CBJAVATREESCANNER_H
#define REFLEX_CODE_CBJAVATREESCANNER_H
#define IN_HEADER 1
#define REFLEX_VERSION "3.0.10"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "code/CBJavaTreeScanner.h"
#define REFLEX_OPTION_lex                 CreateClasses
#define REFLEX_OPTION_lexer               Scanner
#define REFLEX_OPTION_namespace           CB::JavaTree
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_outfile             "code/CBJavaTreeScanner.cpp"
#define REFLEX_OPTION_params              const JFAID_t fileID, CBTree* tree, JPtrArray<CBClass>* classList
#define REFLEX_OPTION_token_type          bool
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "code/CBJavaTreeScanner.l"

/*
Copyright Â© 1999 by John Lindal.

This scanner reads a Java file and builds a CBJavaClass.
*/

#include "CBJavaClass.h"
#include <JPtrArray.h>
#include <JStringIterator.h>
#include <JFAID.h>
#include <jAssert.h>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace CB {
namespace JavaTree {

class Scanner : public reflex::AbstractLexer<reflex::Matcher> {
#line 20 "code/CBJavaTreeScanner.l"


public:

	virtual ~Scanner();

private:

	JString		itsPackage;
	bool		itsAbstractFlag;
	bool		itsPublicFlag;
	bool		itsFinalFlag;
	CBClass*	itsCurrentClass;

	JInteger	itsGenericDepth;
	bool		itsGenericPop;

	JPtrArray<JString>*	itsImportList;

private:

	void ResetState()
	{
		itsAbstractFlag = false;
		itsPublicFlag   = false;
		itsFinalFlag    = false;
		itsCurrentClass = nullptr;
	}

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Scanner(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
#line 50 "code/CBJavaTreeScanner.l"

	itsImportList = jnew JPtrArray<JString>(JPtrArrayT::kDeleteAll);
	assert( itsImportList != nullptr );

  }
  static const int INITIAL = 0;
  static const int CLASS_NAME_STATE = 1;
  static const int INHERIT_STATE = 2;
  static const int GENERIC_STATE = 3;
  static const int C_COMMENT_STATE = 4;
  static const int CPP_COMMENT_STATE = 5;
  static const int STRING_STATE = 6;
  virtual bool CreateClasses(const JFAID_t fileID, CBTree* tree, JPtrArray<CBClass>* classList);
  bool CreateClasses(const reflex::Input& input, const JFAID_t fileID, CBTree* tree, JPtrArray<CBClass>* classList)
  {
    in(input);
    return CreateClasses(fileID, tree, classList);
  }
  bool CreateClasses(const reflex::Input& input, std::ostream *os, const JFAID_t fileID, CBTree* tree, JPtrArray<CBClass>* classList)
  {
    in(input);
    if (os)
      out(*os);
    return CreateClasses(fileID, tree, classList);
  }
};

} // namespace CB
} // namespace JavaTree

#endif
