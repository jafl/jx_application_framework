/******************************************************************************
 SMTPMessage.cc

	<Description>

	BASE CLASS = <NONE>

	Copyright © 1997 by Glenn W. Bach.  All rights reserved.
	
	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include <SMTPMessage.h>
#include <SMTPDebugDir.h>
#include "gMailUtils.h"

#include <JString.h>
#include <JInetTCPIOStream.h>

#include <jTypes.h>
#include <jStreamUtil.h>
#include <jStrStreamUtil.h>
#include <jDirUtil.h>

#include <GMGlobals.h>

#include <sys/timeb.h>
#include <fstream.h>
#include <strstream.h>
#include <iostream.h>
#include <unistd.h>
#include <jAssert.h>

const JCharacter EOT = '\1';

/******************************************************************************
 Constructor

 *****************************************************************************/

SMTPMessage::SMTPMessage()
{
	itsTo = new JString();
	assert(itsTo != NULL);

	itsFrom = new JString();
	assert(itsFrom != NULL);

	itsSubject = new JString();
	assert(itsSubject != NULL);

	itsReplyTo = new JString();
	assert(itsReplyTo != NULL);

	itsCC = new JString();
	assert(itsCC != NULL);

	itsBCC = new JString();
	assert(itsBCC != NULL);

	itsData = new JString();
	assert(itsData != NULL);

	itsAddedHeaders = new JString();
	assert(itsAddedHeaders != NULL);
}

/******************************************************************************
 Destructor

 *****************************************************************************/

SMTPMessage::~SMTPMessage()
{
	delete itsTo;
	delete itsFrom;
	delete itsSubject;
	delete itsReplyTo;
	delete itsCC;
	delete itsBCC;
	delete itsData;
	delete itsAddedHeaders;
}

/******************************************************************************
 SetTo

 *****************************************************************************/

void
SMTPMessage::SetTo
	(
	const JString& to
	)
{
	*itsTo = to;
}

/******************************************************************************
 SetFrom

 *****************************************************************************/

void
SMTPMessage::SetFrom
	(
	const JString& from
	)
{
	*itsFrom = from;
}

/******************************************************************************
 SetSubject

 *****************************************************************************/

void
SMTPMessage::SetSubject
	(
	const JString& subject
	)
{
	*itsSubject = subject;
}

/******************************************************************************
 SetReplyTo

 *****************************************************************************/

void
SMTPMessage::SetReplyTo
	(
	const JString& replyto
	)
{
	*itsReplyTo = replyto;
}

/******************************************************************************
 SetCC

 *****************************************************************************/

void
SMTPMessage::SetCC
	(
	const JString& cc
	)
{
	*itsCC = cc;
}

/******************************************************************************
 SetBCC

 *****************************************************************************/

void
SMTPMessage::SetBCC
	(
	const JString& bcc
	)
{
	*itsBCC = bcc;
}

/******************************************************************************
 SetData

 *****************************************************************************/

void
SMTPMessage::SetData
	(
	const JString& data
	)
{
	*itsData = data;
}

/******************************************************************************
 AddHeaders

 *****************************************************************************/

void
SMTPMessage::AddHeaders
	(
	const JString& headers
	)
{
	*itsAddedHeaders = headers;
}

/******************************************************************************
 HandleCc

 *****************************************************************************/

void
SMTPMessage::HandleCc
	(
	iostream& sock
	)
{
	if (itsCC->IsEmpty())
		{
		return;
		}
	JString buffer(*itsCC);;
	JString name;
	JString senddata;
	JIndex findindex;
	while(buffer.LocateSubstring(",", &findindex))
		{
		name = buffer.GetSubstring(1, findindex-1);
		name.TrimWhitespace();
		buffer.RemoveSubstring(1, findindex);
		buffer.TrimWhitespace();
		senddata = "RCPT TO: " + name + "\n";
		senddata.Print(sock);
		}
	senddata = "RCPT TO: " + buffer + "\n";
	senddata.Print(sock);
}

/******************************************************************************
 HandleBcc

 *****************************************************************************/

void
SMTPMessage::HandleBcc
	(
	iostream& sock
	)
{
	if (itsBCC->IsEmpty())
		{
		return;
		}
	JString buffer(*itsBCC);;
	JString name;
	JString senddata;
	JIndex findindex;
	while(buffer.LocateSubstring(",", &findindex))
		{
		name = buffer.GetSubstring(1, findindex-1);
		name.TrimWhitespace();
		buffer.RemoveSubstring(1, findindex);
		buffer.TrimWhitespace();
		senddata = "RCPT TO: " + name + "\n";
		senddata.Print(sock);
		}
	senddata = "RCPT TO: " + buffer + "\n";
	senddata.Print(sock);

}

/******************************************************************************
 HandleAddresses

 *****************************************************************************/

void
SMTPMessage::HandleAddresses
	(
	iostream& sock
	)
{
	JPtrArray<JString> names;
	GParseNameLists(*itsTo, *itsCC, *itsBCC, names);
	JSize i = 1;
	while (i <= names.GetElementCount())
		{
		JString name = *(names.NthElement(i));
		JString alias;
		JString fcc;
		if (GGetAddressBookMgr()->NameIsAlias(name, alias, fcc))
			{
			names.DeleteElement(i);
			GParseNameList(alias, names);
			GParseNameList(fcc, names);
			}
		else
			{
			i++;
			}
		}
	JString senddata;
	char s[256];
	for (i = 1; i <= names.GetElementCount(); i++)
		{
		JString name = *(names.NthElement(i));
		senddata = "RCPT TO: " + name + "\n";
		senddata.Print(sock);
		GMGetSMTPDebugDir()->AddText(senddata);
		sock.getline(s, 256);
		GMGetSMTPDebugDir()->AddText(s);
		}

/*	if (addresses.IsEmpty())
		{
		return;
		}
	JString buffer(addresses);;
	JString name;
	JString senddata;
	JIndex findindex;
	char s[256];
	while(buffer.LocateSubstring(",", &findindex))
		{
		name = buffer.GetSubstring(1, findindex-1);
		name.TrimWhitespace();
		buffer.RemoveSubstring(1, findindex);
		buffer.TrimWhitespace();
		senddata = "RCPT TO: " + name + "\n";
		senddata.Print(sock);
		GMGetSMTPDebugDir()->AddText(senddata);
		sock.getline(s, 256);
		GMGetSMTPDebugDir()->AddText(s);
		}
	senddata = "RCPT TO: " + buffer + "\n";
	senddata.Print(sock);
	GMGetSMTPDebugDir()->AddText(senddata);
	sock.getline(s, 256);
	GMGetSMTPDebugDir()->AddText(s);*/
}


/******************************************************************************
 Send

 *****************************************************************************/

void
SMTPMessage::Send()
{
	JString homeDir;
	JBoolean fileok = JGetHomeDirectory(&homeDir);
	JAppendDirSeparator(&homeDir);
	JString outbox = homeDir + ".outbox";
	ofstream os(outbox, ios::out|ios::app);

	os << "From ";
	itsFrom->Print(os);
	os << " ";
	
	struct timeb tp;
	ftime(&tp);
	JString date(ctime(&(tp.time)));
	date.Print(os);

	istrstream is(date);
	JString dow;
	JString mon;
	JString day;
	JString rest;
	dow = JReadUntilws(is);
	mon = JReadUntilws(is);
	day = JReadUntilws(is);	
	JReadAll(is, &rest);

	os << "Date: ";
	dow.Print(os);
	os << ", ";
	day.Print(os);
	os << " ";
	mon.Print(os);
	os << " ";
	rest.Print(os);

	JCharacter hostname[255];
	gethostname(hostname, 255);
	JInetTCPIOStream sock(hostname, 25);

	sock.SetBlockingMode(kTrue);
	JCharacter c;
	char s[256];
	sock.getline(s, 256);

	JString senddata = "HELO ";
	senddata += hostname;
	senddata += "\n";
	senddata.Print(sock);
	
	GMGetSMTPDebugDir()->AddText(senddata);

	sock.getline(s, 256);
	GMGetSMTPDebugDir()->AddText(s);
	
	senddata = "MAIL FROM: " + *itsFrom + "\n";
	senddata.Print(sock);
	os << "From: ";
	itsFrom->Print(os);
	os << endl;

	GMGetSMTPDebugDir()->AddText(senddata);

	sock.getline(s, 256);
	GMGetSMTPDebugDir()->AddText(s);

	HandleAddresses(sock);
//	HandleAddresses(sock, *itsTo);
//	HandleAddresses(sock, *itsCC);
//	HandleAddresses(sock, *itsBCC);

	senddata = "DATA\n";
	senddata.Print(sock);

	GMGetSMTPDebugDir()->AddText(senddata);
	GMGetSMTPDebugDir()->AddText("Data not shown ...\n");

	if (!itsTo->IsEmpty())
		{
		senddata = "To: " + *itsTo + "\n";
		senddata.Print(sock);
		os << "To: ";
		itsTo->Print(os);
		os << endl;
		}

	if (!itsReplyTo->IsEmpty())
		{
		senddata = "Reply-To: " + *itsReplyTo + "\n";
		senddata.Print(sock);
		}

	if (!itsCC->IsEmpty())
		{
		senddata = "Cc: " + *itsCC + "\n";
		senddata.Print(sock);
		os << "Cc: ";
		itsCC->Print(os);
		os << endl;
		}

	if (!itsSubject->IsEmpty())
		{
		senddata = "Subject: " + *itsSubject + "\n";
		senddata.Print(sock);
		os << "Subject: ";
		itsSubject->Print(os);
		os << endl;
		}

	if (!itsAddedHeaders->IsEmpty())
		{
		senddata = *itsAddedHeaders + "\n";
		senddata.Print(sock);
		}
		
	senddata = "\n";
	senddata.Print(sock);
	os << endl;
	
	senddata = *itsData + "\n";
	senddata.Print(sock);
	itsData->Print(os);
	os << endl;
	os << endl;
	
	senddata = ".\n";
	senddata.Print(sock);
	sock.getline(s, 256);
	sock.getline(s, 256);
	GMGetSMTPDebugDir()->AddText(s);
	GMGetSMTPDebugDir()->AddText("\n-------------------------------------\n");
	sock << EOT;
}
	