/******************************************************************************
 GNBTreeDir.cc

	<Description>

	BASE CLASS = public JXDocument

	Copyright (C) 1998 by Glenn W. Bach.  All rights reserved.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

// includes

//Class Header
#include <GNBTreeDir.h>
#include <GNBNoteDir.h>
#include <GNBTree.h>
#include <GNBRootNode.h>
#include <GNBNoteNode.h>
#include <GNBToDoNode.h>
#include <GNBTreeWidgetBase.h>
#include "GNBTreeWidget.h"
#include "GNBTrashWidget.h"
#include <JNamedTreeList.h>
#include <GNBGlobals.h>
#include <GNBApp.h>
#include <GNBPrefsMgr.h>
#include "GNBHelpText.h"

#include <notebook.xpm>
#include <GNBTreeIcon.xpm>
#include <GNBTrashIcon.xpm>

#include <JXToolBar.h>

#include <JXApplication.h>
#include <JXDocumentManager.h>
#include <JXDocumentMenu.h>
#include <JXHelpManager.h>
#include <JXImage.h>
#include <JXMenuBar.h>
#include <JXScrollbarSet.h>
#include <JXTextButton.h>
#include <JXTextMenu.h>
#include <JXWindow.h>

#include <JChooseSaveFile.h>
#include <JError.h>
#include <JFileArray.h>
#include <JString.h>

#include <jDirUtil.h>

#include <jAssert.h>

const JCoordinate kCloseButtonWidth 	= 50;
const JCoordinate kCurrentPrefsVersion	= 0;

const JIndex kSavedIDListIndex			= 3;

const JFileVersion kIDListVersion		= 2;
const JFileVersion kFileVersionNumber	= 1;


const JCharacter* GNBTreeDir::kDataChanged = "DataChanged::GNBTreeDir";


const JCharacter* kTreeWindowMenuTitleStr = "Windows";

static const JCharacter* kHelpMenuTitleStr = "Help";
static const JCharacter* kHelpMenuStr =
	"About"
	"%l|Table of Contents|Getting started |This window"
	"%l|Changes|Credits";

enum
{
	kAboutCmd = 1,
	kTOCCmd,
	kOverviewCmd,
	kThisWindowCmd,
	kChangesCmd,
	kCreditsCmd
};

const JCharacter* kTrashFileName	= ".GNBTrashFile";

/******************************************************************************
 Create

 *****************************************************************************/

JBoolean
GNBTreeDir::Create
	(
	JXDirector* 		supervisor,
	const JCharacter*	filename,
	GNBTreeDir** 		dir
	)
{
	*dir	= new GNBTreeDir(supervisor);
	assert(*dir != NULL);

	return (*dir)->GNBTreeDirX(filename);
}

/******************************************************************************
 CreateTrash

 *****************************************************************************/

JBoolean
GNBTreeDir::CreateTrash
	(
	JXDirector* 		supervisor,
	GNBTreeDir** 		dir
	)
{
	*dir	= new GNBTreeDir(supervisor);
	assert(*dir != NULL);

	(*dir)->itsIsTrash	= kJTrue;

	JString home;
	if (JGetHomeDirectory(&home))
		{
		JString filename = JCombinePathAndName(home, kTrashFileName);
		return (*dir)->GNBTreeDirX(filename);
		}
	return kJFalse;
}

/******************************************************************************
 Constructor

 *****************************************************************************/

GNBTreeDir::GNBTreeDir
	(
	JXDirector* 		supervisor
	)
	:
	JXDocument(supervisor),
	itsTreeChanged(kJFalse),
	itsIsTrash(kJFalse)
{
	itsNoteDirs = new JPtrArray<GNBNoteDir>(JPtrArrayT::kForgetAll);
	assert(itsNoteDirs != NULL);
}

/******************************************************************************
 GNBTreeDirX (protected)

 ******************************************************************************/

JBoolean
GNBTreeDir::GNBTreeDirX
	(
	const JCharacter* filename
	)
{
	if (LoadFileArray(filename))
		{
		BuildWindow();
		OpenWindows();
		return kJTrue;
		}
	else
		{
		return kJFalse;
		}

}

/******************************************************************************
 Destructor

 *****************************************************************************/

GNBTreeDir::~GNBTreeDir()
{
	itsWidget->Save();
	delete itsTree;
	delete itsNoteDirs;
	delete itsFileArray;
}

/******************************************************************************
 BuildWindow


 ******************************************************************************/

void
GNBTreeDir::BuildWindow()
{
	JString name;
	if (itsIsTrash)
		{
		name	= "Trash";
		}
	else
		{
		JString path;
		JSplitPathAndName(itsFileName, &path, &name);
		}

	JCoordinate w = 300;
	JCoordinate h = 500;
	JXWindow* window = new JXWindow(this, w,h, name);
	assert( window != NULL );
	window->SetCloseAction(JXWindow::kCloseDirector);
	window->PlaceAsDialogWindow();
	window->LockCurrentMinSize();
	window->SetWMClass(GNBGetWMClassInstance(), GNBGetNotebookWindowClass());

	JXMenuBar* menuBar =
		new JXMenuBar(window, JXWidget::kHElastic, JXWidget::kFixedTop,
			0,0, w,kJXDefaultMenuBarHeight);
	assert( menuBar != NULL );

	JXToolBar* toolBar =
		new JXToolBar(GNBGetPrefsMgr(), kGTreeToolBarID,
			menuBar, 300, 500,
			window, JXWidget::kHElastic, JXWidget::kVElastic,
			0,kJXDefaultMenuBarHeight, w,h - kJXDefaultMenuBarHeight);
	assert( toolBar != NULL );

	JSize newHeight = toolBar->GetWidgetEnclosure()->GetBoundsHeight();

	JXScrollbarSet* scrollbarSet =
		new JXScrollbarSet(toolBar->GetWidgetEnclosure(),
						   JXWidget::kHElastic,JXWidget::kVElastic,
						   0, 0,
						   w, newHeight);
	assert( scrollbarSet != NULL );

	GNBRootNode* base = new GNBRootNode(itsTree, "");
	assert(base != NULL);
	itsTree = new GNBTree(base, this);
	assert(itsTree != NULL);
	JNamedTreeList* list = new JNamedTreeList(itsTree);
	assert(list != NULL);

	if (itsIsTrash)
		{
		itsWidget =
			GNBTrashWidget::Create(this, itsTree, list, menuBar, toolBar,
				scrollbarSet, scrollbarSet->GetScrollEnclosure(),
				JXWidget::kHElastic, JXWidget::kVElastic,
				0,0,w,newHeight);
		assert(itsWidget != NULL);
		ListenTo(itsWidget);
		}
	else
		{
		itsWidget =
			GNBTreeWidget::Create(this, itsTree, list, menuBar, toolBar,
				scrollbarSet, scrollbarSet->GetScrollEnclosure(),
				JXWidget::kHElastic, JXWidget::kVElastic,
				0,0,w,newHeight);
		assert(itsWidget != NULL);
		ListenTo(itsWidget);
		}

	JXDocumentMenu* fileListMenu =
		new JXDocumentMenu(kTreeWindowMenuTitleStr, menuBar,
						   JXWidget::kFixedLeft, JXWidget::kVElastic, 0,0, 10,10);
	assert( fileListMenu != NULL );
	menuBar->AppendMenu(fileListMenu);

	itsIcon = new JXImage(GetDisplay(), JXPM(notebook));
	assert( itsIcon != NULL );
	window->SetIcon(itsIcon);

	itsHelpMenu = menuBar->AppendTextMenu(kHelpMenuTitleStr);
	itsHelpMenu->SetMenuItems(kHelpMenuStr);
	itsHelpMenu->SetUpdateAction(JXMenu::kDisableNone);
	ListenTo(itsHelpMenu);
}

/******************************************************************************
 Receive (virtual protected)


 ******************************************************************************/

void
GNBTreeDir::Receive
	(
	JBroadcaster*	sender,
	const Message&	message
	)
{
	if (sender == itsWidget && message.Is(GNBTreeWidgetBase::kDataChanged))
		{
		DataModified();
		}
	else if (sender == itsHelpMenu && message.Is(JXMenu::kItemSelected))
		{
		const JXMenu::ItemSelected* selection =
			dynamic_cast<const JXMenu::ItemSelected*>(&message);
		assert( selection != NULL );
		HandleHelpMenu(selection->GetIndex());
		}
	else
		{
		JXDocument::Receive(sender, message);
		}
}

/******************************************************************************
 Close (virtual public)

 ******************************************************************************/

JBoolean
GNBTreeDir::Close()
{
	SaveOpenWindows();
	return JXDocument::Close();
}

/******************************************************************************
 OKToClose

 ******************************************************************************/

JBoolean
GNBTreeDir::OKToClose()
{
	if (itsWidget->EndEditing())
		{
		return kJTrue;
		}
	return kJFalse;
}

/******************************************************************************
 NeedsSave

 ******************************************************************************/

JBoolean
GNBTreeDir::NeedsSave()
	const
{
	return itsTreeChanged;
}

/******************************************************************************
 SafetySave

 ******************************************************************************/

void
GNBTreeDir::SafetySave
	(
	const JXDocumentManager::SafetySaveReason reason
	)
{
	if (reason == JXDocumentManager::kTimer)
		{
//		tellApp = kJTrue;
		}
	itsWidget->Save();
	DataReverted();
}

/******************************************************************************
 DiscardChanges

 ******************************************************************************/

void
GNBTreeDir::DiscardChanges()
{

}

/******************************************************************************
 GetMenuIcon (virtual)

	Override of JXDocument::GetMenuIcon().

 ******************************************************************************/

JXPM
GNBTreeDir::GetMenuIcon()
	const
{
	if (itsIsTrash)
		{
		return JXPM(kfm_trash);
		}
	return JXPM(GNBTreeIcon);
}

/******************************************************************************
 DataModified (public)

 ******************************************************************************/

void
GNBTreeDir::DataModified()
{
	itsTreeChanged = kJTrue;
}

/******************************************************************************
 DataReverted (public)

 ******************************************************************************/

void
GNBTreeDir::DataReverted()
{
	itsTreeChanged = kJFalse;
}

/******************************************************************************
 HandleHelpMenu

 ******************************************************************************/

void
GNBTreeDir::HandleHelpMenu
	(
	const JIndex index
	)
{
	if (index == kAboutCmd)
		{
		GNBGetApplication()->DisplayAbout();
		}
	else if (index == kTOCCmd)
		{
		(JXGetHelpManager())->ShowSection(kTOCHelpName);
		}
	else if (index == kOverviewCmd)
		{
		(JXGetHelpManager())->ShowSection(kGettingStartedHelpName);
		}
	else if (index == kThisWindowCmd)
		{
		(JXGetHelpManager())->ShowSection(kMainHelpName);
		}
	else if (index == kChangesCmd)
		{
		(JXGetHelpManager())->ShowSection(kChangeLogName);
		}
	else if (index == kCreditsCmd)
		{
		(JXGetHelpManager())->ShowSection(kCreditsName);
		}
}

/******************************************************************************
 OpenNote (public)

 ******************************************************************************/

void
GNBTreeDir::OpenNote
	(
	const JFAID_t id
	)
{
	const JSize count = itsNoteDirs->GetElementCount();
	for (JSize i = 1; i <= count; i++)
		{
		if (itsNoteDirs->NthElement(i)->GetID() == id)
			{
			itsNoteDirs->NthElement(i)->Activate();
			return;
			}
		}

	GNBNoteDir* dir = new GNBNoteDir(this, id);
	assert(dir != NULL);
	itsNoteDirs->Append(dir);
	dir->Activate();
}

/******************************************************************************
 CloseNote (public)

 ******************************************************************************/

void
GNBTreeDir::CloseNote
	(
	const JFAID_t id
	)
{
	const JSize count = itsNoteDirs->GetElementCount();
	for (JSize i = 1; i <= count; i++)
		{
		if (itsNoteDirs->NthElement(i)->GetID() == id)
			{
			itsNoteDirs->NthElement(i)->Close();
			return;
			}
		}
}

/******************************************************************************
 NewNote (public)

 ******************************************************************************/

JFAID_t
GNBTreeDir::NewNote()
{
	itsFileArray->AppendElement("");
	JSize count = itsFileArray->GetElementCount();
	JFAID id;
	JBoolean ok = itsFileArray->IndexToID(count, &id);
	assert(ok);
	return id.GetID();
}

/******************************************************************************
 DeleteFileElement (public)

 ******************************************************************************/

void
GNBTreeDir::DeleteFileElement
	(
	const JFAID_t id
	)
{
	const JSize count = itsNoteDirs->GetElementCount();
	for (JSize i = 1; i <= count; i++)
		{
		if (itsNoteDirs->NthElement(i)->GetID() == id)
			{
			itsNoteDirs->NthElement(i)->Close();
			return;
			}
		}
	itsFileArray->RemoveElement(JFAID(id));
}

/******************************************************************************
 SaveOpenWindows (private)

 ******************************************************************************/

void
GNBTreeDir::SaveOpenWindows()
{
	std::ostringstream os;
	os << kIDListVersion << ' ';
	const JSize count = itsNoteDirs->GetElementCount();
	os << count << ' ';
	for (JSize i = 1; i <= count; i++)
		{
		JFAID_t id = itsNoteDirs->NthElement(i)->GetID();
		os << id << ' ';
		}

	assert(itsFileArray->IndexValid(JFAIndex(kSavedIDListIndex)));
	itsFileArray->SetElement(JFAIndex(kSavedIDListIndex), os);
}

/******************************************************************************
 OpenWindows (private)

 ******************************************************************************/

void
GNBTreeDir::OpenWindows()
{
	std::string data;
	itsFileArray->GetElement(JFAIndex(kSavedIDListIndex), &data);
	if (!data.length() == 0)
		{
		std::istringstream is(data);
		JFileVersion version;
		is >> version;
		JSize count;
		is >> count;
		for (JSize i = 1; i <= count; i++)
			{
			JFAID_t id;
			is >> id;
			OpenNote(id);
			}
		if (version == 1)
			{
			JBoolean active;
			is >> active;
			}
		}
}

/******************************************************************************
 NoteNameChanged (public)

 ******************************************************************************/

void
GNBTreeDir::NoteNameChanged
	(
	const JFAID_t  id,
	const JString& title
	)
{
	Broadcast(DataChanged(id, title));
}

/******************************************************************************
 LoadFileArray (private)

 ******************************************************************************/

JBoolean
GNBTreeDir::LoadFileArray
	(
	const JCharacter* filename
	)
{
	JError err 	= JFileArray::Create(filename, GNBGetApplication()->GetFileSignature(), &itsFileArray, JFileArray::kIgnoreIfOpen);
	if (!err.OK())
		{
		err.ReportIfError();
		return kJFalse;
		}
	itsFileArray->ShouldFlushChanges(kJTrue);
	JBoolean ok	= JGetTrueName(filename, &itsFileName);
	if (!ok)
		{
		return kJFalse;
		}
	if (itsFileArray->GetElementCount() == 0)
		{
		itsFileArray->AppendElement("");
		itsFileArray->AppendElement("");
		itsFileArray->AppendElement("");
		itsFileArray->AppendElement("");
		itsFileArray->SetVersion(kFileVersionNumber);
		}
	return kJTrue;
}

/******************************************************************************
 DirectorClosed

 *****************************************************************************/

void
GNBTreeDir::DirectorClosed
	(
	JXDirector* theDirector
	)
{
	GNBNoteDir* dir = dynamic_cast<GNBNoteDir*>(theDirector);
	JIndex findex;
	if (itsNoteDirs->Find(dir, &findex))
		{
		itsNoteDirs->RemoveElement(findex);
		}

	JXDocument::DirectorClosed(theDirector);
}

/******************************************************************************
 StealNode (public)

 ******************************************************************************/

void
GNBTreeDir::StealNode
	(
	JTreeNode* node
	)
{
	JTreeNode* base 	= itsTree->GetRoot();
	GNBBaseNode* bnode	= GNBBaseNode::Create(*node, itsTree);
	base->Append(bnode);
	bnode	= dynamic_cast<GNBBaseNode*>(node);
	assert(bnode != NULL);
	GNBTreeDir* dir		= bnode->GetGNBTree()->GetDir();
	GNBBaseNode::Type type = bnode->GetType();
	if (type == GNBBaseNode::kNoteNode)
		{
		GNBNoteNode* nnode = dynamic_cast<GNBNoteNode*>(node);
		assert(nnode != NULL);
		dir->CloseNote(nnode->GetID());
		}
	else if (type == GNBBaseNode::kToDoNode)
		{
		GNBToDoNode* tdnode = dynamic_cast<GNBToDoNode*>(node);
		assert(tdnode != NULL);
		JFAID_t id;
		if (tdnode->GetID(&id))
			{
			dir->CloseNote(id);
			}
		}
	bnode	= dynamic_cast<GNBBaseNode*>(node);
	assert(bnode != NULL);
	bnode->DiscardNode();
	delete node;
}

/******************************************************************************
 DeleteAll (public)

 ******************************************************************************/

void
GNBTreeDir::DeleteAll()
{
	assert(itsIsTrash);
	GNBTrashWidget* widget	= dynamic_cast<GNBTrashWidget*>(itsWidget);
	assert(widget != NULL);
	widget->FlushDiscards();
}

/******************************************************************************
 OKToRevert

 *****************************************************************************/

JBoolean
GNBTreeDir::OKToRevert()
{
	return kJFalse;
}

/******************************************************************************
 CanRevert

 *****************************************************************************/

JBoolean
GNBTreeDir::CanRevert()
{
	return kJFalse;
}
