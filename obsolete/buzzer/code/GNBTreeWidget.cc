/******************************************************************************
 GNBTreeWidget.cc

	<Description>

	BASE CLASS = public JXNamedTreeListWidget

	Copyright (C) 1997 by Glenn W. Bach.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include <GNBTreeWidget.h>
#include <GNBTreeDir.h>
#include <GNBCategoryNode.h>
#include <GNBNoteNode.h>
#include <GNBToDoNode.h>
#include <GNBGlobals.h>
#include "GNBApp.h"

#include <jx_file_new.xpm>
#include <jx_file_open.xpm>

#include "GNBFolderIcon.xpm"
#include <GNBTrashIcon.xpm>
#include <tododone.xpm>
#include <markdone.xpm>
#include <todonotedone.xpm>
#include <todourgent.xpm>

#include <JTree.h>
#include <JNamedTreeList.h>
#include <JNamedTreeNode.h>

#include <JXToolBar.h>

#include <JXApplication.h>
#include <JXChooseSaveFile.h>
#include <JXColormap.h>
#include <JXDisplay.h>
#include <JXDirector.h>
#include <JXDNDManager.h>
#include <JXImage.h>
#include <JXInputField.h>
#include <JXMenuBar.h>
#include <JXSelectionManager.h>
#include <JXTextMenu.h>
#include <JXUserNotification.h>
#include <JXWindow.h>
#include <JXWindowPainter.h>

#include <JError.h>
#include <JFontManager.h>
#include <JListIterator.h>
#include <JString.h>
#include <JTableSelection.h>
#include <JTableSelectionIterator.h>
#include <JDirInfo.h>
#include <JDirEntry.h>

#include <jx_plain_file_small.xpm>
#include <jx_file_print.xpm>

#include <jDirUtil.h>
#include <jFileUtil.h>
#include <jProcessUtil.h>
#include <jASCIIConstants.h>
#include <jStreamUtil.h>
#include <jErrno.h>
#include <jMath.h>

#include <X11/keysym.h>
#include <strstream>
#include <iostream.h>
#include <fstream.h>
#include <jAssert.h>

static const JCharacter* kGNBMenuTitleStr = "Notebook";
static const JCharacter* kGNBMenuStr =
	"    New notebook              %k Meta-B       %i NewBook::Notebook"
	"  | Open notebook             %k Meta-O       %i OpenBook::Notebook"
	"%l| New note                  %k Meta-N       %i NewNote::Notebook"
	"  | New category              %k Meta-Shift-N %i NewCategory::Notebook"
	"  | New to-do                 %k Meta-T       %i NewToDo::Notebook "
	"  | Add note                  %k Meta-Shift-T %i AddNote::Notebook"
	"  | Remove note                               %i RemoveNote::Notebook"
	"  | Toggle Urgency            %k Meta-U       %i ToggleUrgency::Notebook"
	"  | Mark selected as done     %k Meta-M       %i MarkDone::Notebook"
	"  | Mark selected as not done %k Meta-Shift-M %i MarkUnDone::Notebook"
	"%l| Export selected notes...                  %i ExportSelected::Notebook"
	"  | Print...                  %k Meta-P       %i Print::Notebook"
	"%l| Remove selected           %k Backspace.   %i RemoveSelected::Notebook"
	"  | View discards                             %i ViewDiscards::Notebook"
	"  | Flush discards                            %i FlushDiscards::Notebook"
	"%l| Edit tool bar...                          %i EditToolBar::Notebook"
	"%l| Close                     %k Meta-W       %i Close::Notebook"
	"  | Quit                      %k Meta-Q       %i Quit::Notebook";

enum
{
	kNewBookCmd = 1,
	kOpenBookCmd,
	kNewNoteCmd,
	kNewCategoryCmd,
	kNewToDoCmd,
	kAddNoteCmd,
	kRemoveNoteCmd,
	kToggleUrgentCmd,
	kMarkDoneCmd,
	kMarkUnDoneCmd,
	kExportSelCmd,
	kPrintCmd,
	kRemoveCmd,
	kViewDiscardsCmd,
	kFlushCmd,
	kEditToolBarCmd,
	kCloseCmd,
	kQuitCmd
};

static const JIndex kGNBMainTreePrefsIndex = 1;

/******************************************************************************
 Constructor

 *****************************************************************************/

GNBTreeWidget*
GNBTreeWidget::Create
	(
	GNBTreeDir*			dir,
	JTree*				tree,
	JNamedTreeList* 	treeList,
	JXMenuBar* 			menuBar,
	JXToolBar* 			toolBar,
	JXScrollbarSet* 	scrollbarSet,
	JXContainer* 		enclosure,
	const HSizingOption	hSizing,
	const VSizingOption vSizing,
	const JCoordinate 	x,
	const JCoordinate 	y,
	const JCoordinate 	w,
	const JCoordinate 	h
	)
{
	GNBTreeWidget* widget =
		new GNBTreeWidget(dir, tree, treeList, menuBar, toolBar,
			scrollbarSet,	enclosure, hSizing, vSizing, x, y, w, h);
	assert(widget != NULL);

	widget->itsToolBar->LoadPrefs();

	if (widget->itsToolBar->IsEmpty())
		{
		widget->itsToolBar->AppendButton(widget->itsNBMenu, kNewNoteCmd);
		widget->itsToolBar->AppendButton(widget->itsNBMenu, kNewCategoryCmd);
		widget->itsToolBar->AppendButton(widget->itsNBMenu, kNewToDoCmd);
		widget->itsToolBar->AppendButton(widget->itsNBMenu, kAddNoteCmd);
		widget->itsToolBar->AppendButton(widget->itsNBMenu, kToggleUrgentCmd);
		widget->itsToolBar->NewGroup();
		widget->itsToolBar->AppendButton(widget->itsNBMenu, kViewDiscardsCmd);
		}

	widget->ReadSetup();

	return widget;
}

GNBTreeWidget::GNBTreeWidget
	(
	GNBTreeDir*			dir,
	JTree*				tree,
	JNamedTreeList* 	treeList,
	JXMenuBar* 			menuBar,
	JXToolBar* 			toolBar,
	JXScrollbarSet* 	scrollbarSet,
	JXContainer* 		enclosure,
	const HSizingOption	hSizing,
	const VSizingOption vSizing,
	const JCoordinate 	x,
	const JCoordinate 	y,
	const JCoordinate 	w,
	const JCoordinate 	h
	)
	:
   GNBTreeWidgetBase(kGNBMainTreePrefsIndex, dir, tree, treeList,
					  scrollbarSet,	enclosure, hSizing, vSizing, x, y, w, h),
   itsToolBar(toolBar)
{
	itsNBMenu = menuBar->AppendTextMenu(kGNBMenuTitleStr);
	itsNBMenu->SetMenuItems(kGNBMenuStr);
	itsNBMenu->SetUpdateAction(JXMenu::kDisableAll);
	ListenTo(itsNBMenu);

	JXImage* image = new JXImage(GetDisplay(), JXPM(jx_plain_file_small));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kNewNoteCmd, image, kJTrue);

	image = new JXImage(GetDisplay(), JXPM(jx_file_new));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kNewBookCmd, image, kJTrue);

	image = new JXImage(GetDisplay(), JXPM(jx_file_open));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kOpenBookCmd, image, kJTrue);

	image = new JXImage(GetDisplay(), JXPM(GNBFolderIcon));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kNewCategoryCmd, image, kJTrue);

	image = new JXImage(GetDisplay(), JXPM(tododone));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kNewToDoCmd, image, kJTrue);

	image = new JXImage(GetDisplay(), JXPM(todonotedone));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kAddNoteCmd, image, kJTrue);

	image = new JXImage(GetDisplay(), JXPM(todourgent));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kToggleUrgentCmd, image, kJTrue);

	image = new JXImage(GetDisplay(), JXPM(markdone));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kMarkDoneCmd, image, kJTrue);

	image = new JXImage(GetDisplay(), JXPM(jx_file_print));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kPrintCmd, image, kJTrue);

	image = new JXImage(GetDisplay(), JXPM(kfm_trash));
	assert(image != NULL);
	itsNBMenu->SetItemImage(kViewDiscardsCmd, image, kJTrue);

}

/******************************************************************************
 Destructor

 *****************************************************************************/

GNBTreeWidget::~GNBTreeWidget()
{
}

/******************************************************************************
 Receive (virtual protected)


 ******************************************************************************/

void
GNBTreeWidget::Receive
	(
	JBroadcaster*	sender,
	const Message&	message
	)
{
	if (sender == itsNBMenu && message.Is(JXMenu::kItemSelected))
		{
		 const JXMenu::ItemSelected* selection =
			dynamic_cast<const JXMenu::ItemSelected*>(&message);
		assert( selection != NULL );
		HandleNBMenu(selection->GetIndex());
		}
	else if (sender == itsNBMenu && message.Is(JXMenu::kNeedsUpdate))
		{
		UpdateNBMenu();
		}
	else
		{
		GNBTreeWidgetBase::Receive(sender, message);
		}
}

/******************************************************************************
 UpdateNBMenu


 ******************************************************************************/

void
GNBTreeWidget::UpdateNBMenu()
{
	JTableSelection& s = GetTableSelection();
	JSize count = s.GetSelectedCellCount();
	GNBTreeWidgetBase::SelectionType seltype = GetSelectionType();
	if (seltype == GNBTreeWidgetBase::kNoneSelected)
		{
		itsNBMenu->EnableItem(kNewNoteCmd);
		itsNBMenu->EnableItem(kNewToDoCmd);
		itsNBMenu->EnableItem(kNewCategoryCmd);
		JPoint cell;
		if (GetEditedCell(&cell))
			{
			JTreeNode* jnode = GetTreeList()->GetNode(cell.y);
			GNBBaseNode* bnode = dynamic_cast<GNBBaseNode*>(jnode);
			assert(bnode != NULL);
			GNBBaseNode::Type type = bnode->GetType();
			if (type == GNBBaseNode::kToDoNode)
				{
				itsNBMenu->EnableItem(kToggleUrgentCmd);
				itsNBMenu->EnableItem(kMarkDoneCmd);
				itsNBMenu->EnableItem(kMarkUnDoneCmd);
				GNBToDoNode* tdnode = dynamic_cast<GNBToDoNode*>(jnode);
				assert(tdnode != NULL);
				if (!tdnode->HasNote())
					{
					itsNBMenu->EnableItem(kAddNoteCmd);
					}
				else
					{
					itsNBMenu->EnableItem(kRemoveNoteCmd);
					}
				}
			itsNBMenu->EnableItem(kRemoveCmd);
			}
		}
	else if (seltype == GNBTreeWidgetBase::kCategoriesSelected)
		{
		if (count == 1)
			{
			itsNBMenu->EnableItem(kNewNoteCmd);
			itsNBMenu->EnableItem(kNewToDoCmd);
			itsNBMenu->EnableItem(kNewCategoryCmd);
			}
		itsNBMenu->EnableItem(kRemoveCmd);
		}
	else
		{
		itsNBMenu->EnableItem(kNewNoteCmd);
		itsNBMenu->EnableItem(kNewToDoCmd);
		itsNBMenu->EnableItem(kNewCategoryCmd);
		itsNBMenu->EnableItem(kRemoveCmd);
		itsNBMenu->EnableItem(kExportSelCmd);

		if (seltype == GNBTreeWidgetBase::kToDosSelected)
			{
			itsNBMenu->EnableItem(kToggleUrgentCmd);
			itsNBMenu->EnableItem(kAddNoteCmd);
			itsNBMenu->EnableItem(kRemoveNoteCmd);
			itsNBMenu->EnableItem(kMarkDoneCmd);
			itsNBMenu->EnableItem(kMarkUnDoneCmd);
			}
		else if (seltype == GNBTreeWidgetBase::kItemsSelected)
			{
			JTableSelectionIterator iter(&s);
			JPoint cell;
			JBoolean ok = kJTrue;
			while (iter.Next(&cell) && ok)
				{
				JTreeNode* iternode = GetTreeList()->GetNode(cell.y);
				GNBBaseNode* bnode = dynamic_cast<GNBBaseNode*>(iternode);
				assert(bnode != NULL);
				GNBBaseNode::Type type = bnode->GetType();
				if (type != GNBBaseNode::kToDoNode)
					{
					ok = kJFalse;
					}
				}
			if (ok)
				{
				itsNBMenu->EnableItem(kToggleUrgentCmd);
				itsNBMenu->EnableItem(kAddNoteCmd);
				itsNBMenu->EnableItem(kRemoveNoteCmd);
				}
			}
		}

	itsNBMenu->EnableItem(kNewBookCmd);
	itsNBMenu->EnableItem(kOpenBookCmd);
	itsNBMenu->EnableItem(kViewDiscardsCmd);
	itsNBMenu->EnableItem(kFlushCmd);
	itsNBMenu->EnableItem(kCloseCmd);
	itsNBMenu->EnableItem(kQuitCmd);
	itsNBMenu->EnableItem(kEditToolBarCmd);
	itsNBMenu->EnableItem(kPrintCmd);
}

/******************************************************************************
 HandleNBMenu


 ******************************************************************************/

void
GNBTreeWidget::HandleNBMenu
	(
	const JIndex index
	)
{
	JTableSelection& s 		= GetTableSelection();
	JPoint cell;
	JBoolean ok 			= s.GetLastSelectedCell(&cell);
	if (!ok)
		{
		ok = GetEditedCell(&cell);
		}
	JTreeNode* jnode 		= NULL;
	JNamedTreeNode* parent	= NULL;
	JTreeNode* jsibling 	= NULL;
	JBoolean afterSibling 	= kJFalse;
	if (ok)
		{
		jnode = GetTreeList()->GetNode(cell.y);
		assert(jnode != NULL);
		if (jnode->IsOpenable())
			{
			parent = dynamic_cast<JNamedTreeNode*>(jnode);
			assert(parent != NULL);
			}
		else
			{
			afterSibling 	= kJTrue;
			parent			= dynamic_cast<JNamedTreeNode*>(jnode->GetParent());
			jsibling		= jnode;
			}
		}
	else
		{
		parent = dynamic_cast<JNamedTreeNode*>(GetTreeList()->GetTree()->GetRoot());
		assert(parent != NULL);
		}
	if (index == kNewBookCmd)
		{
		JString filename;
		if (JGetChooseSaveFile()->SaveFile("Name your new notebook.", "", "", &filename))
			{
			GNBGetApplication()->OpenNotebook(filename);
			}
		}
	else if (index == kOpenBookCmd)
		{
		JPtrArray<JString> files(JPtrArrayT::kDeleteAll);
		if (JGetChooseSaveFile()->ChooseFiles("Choose notebooks", "", &files))
			{
			const JSize count	= files.GetElementCount();
			for (JIndex i = 1; i <= count; i++)
				{
				GNBGetApplication()->OpenNotebook(*(files.GetElement(i)));
				}
			}
		}
	else if (index == kEditToolBarCmd)
		{
		itsToolBar->Edit();
		}
	else if (index == kNewNoteCmd)
		{
		JFAID_t id = GetDir()->NewNote();
		GNBNoteNode* node = new GNBNoteNode(GetTreeList()->GetTree(), "", id);
		PlaceNewNode(parent, node, jsibling, afterSibling);
		GetDir()->OpenNote(node->GetID());
		}
	else if (index == kNewCategoryCmd)
		{
		GNBCategoryNode* node = new GNBCategoryNode(GetTreeList()->GetTree(), "");
		assert(node != NULL);
		PlaceNewNode(parent, node, jsibling, afterSibling, kJTrue);
		}
	else if (index == kNewToDoCmd)
		{
		GNBToDoNode* node = new GNBToDoNode(GetTreeList()->GetTree(), "");
		assert(node != NULL);
		PlaceNewNode(parent, node, jsibling, afterSibling, kJTrue);
		}
	else if (index == kAddNoteCmd)
		{
		if (IsEditing())
			{
			GNBToDoNode* tdnode = dynamic_cast<GNBToDoNode*>(jnode);
			assert(tdnode != NULL);
			if (!tdnode->HasNote())
				{
				tdnode->AddNote();
				GetTreeList()->GetTree()->BroadcastChange(jnode);
				JFAID_t id;
				if (tdnode->GetID(&id))
					{
					GetDir()->OpenNote(id);
					}
				}
			}
		else
			{
			JTableSelectionIterator iter(&s);
			JPoint cell;
			while (iter.Next(&cell))
				{
				JTreeNode* iternode = GetTreeList()->GetNode(cell.y);
				GNBToDoNode* tdnode = dynamic_cast<GNBToDoNode*>(iternode);
				assert(tdnode != NULL);
				if (!tdnode->HasNote())
					{
					tdnode->AddNote();
					GetTreeList()->GetTree()->BroadcastChange(iternode);
					if (s.GetSelectedCellCount() == 1)
						{
						JFAID_t id;
						if (tdnode->GetID(&id))
							{
							GetDir()->OpenNote(id);
							}
						}
					}
				}
			}
		}
	else if (index == kRemoveNoteCmd)
		{
		if (IsEditing())
			{
			GNBToDoNode* tdnode = dynamic_cast<GNBToDoNode*>(jnode);
			assert(tdnode != NULL);
			tdnode->RemoveNote();
			GetTreeList()->GetTree()->BroadcastChange(jnode);
			}
		else
			{
			JTableSelectionIterator iter(&s);
			JPoint cell;
			while (iter.Next(&cell))
				{
				JTreeNode* iternode = GetTreeList()->GetNode(cell.y);
				GNBToDoNode* tdnode = dynamic_cast<GNBToDoNode*>(iternode);
				assert(tdnode != NULL);
				if (tdnode->HasNote())
					{
					tdnode->RemoveNote();
					GetTreeList()->GetTree()->BroadcastChange(iternode);
					}
				}
			}
		}
	else if (index == kToggleUrgentCmd)
		{
		if (IsEditing())
			{
			GNBBaseNode* bnode = dynamic_cast<GNBBaseNode*>(jnode);
			assert(bnode != NULL);
			GNBBaseNode::Type type = bnode->GetType();
			if (type == GNBBaseNode::kToDoNode)
				{
				GNBToDoNode* tdnode = dynamic_cast<GNBToDoNode*>(jnode);
				assert(tdnode != NULL);
				tdnode->ToggleUrgency();
				GetTreeList()->GetTree()->BroadcastChange(jnode);
				}
			}
		else
			{
			JTableSelectionIterator iter(&s);
			JPoint cell;
			while (iter.Next(&cell))
				{
				JTreeNode* iternode = GetTreeList()->GetNode(cell.y);
				GNBToDoNode* tdnode = dynamic_cast<GNBToDoNode*>(iternode);
				assert(tdnode != NULL);
				tdnode->ToggleUrgency();
				GetTreeList()->GetTree()->BroadcastChange(iternode);
				}
			}
		}
	else if (index == kMarkDoneCmd)
		{
		MarkSelectedAsDone(kJTrue);
		}
	else if (index == kMarkUnDoneCmd)
		{
		MarkSelectedAsDone(kJFalse);
		}
	else if (index == kExportSelCmd)
		{
		ExportSelected();
		}
	else if (index == kPrintCmd)
		{
		Print();
		}
	else if (index == kRemoveCmd)
		{
		if (IsEditing())
			{
			CancelEditing();
			GNBGetTrashDir()->StealNode(jnode);
			}
		else
			{
			JTableSelectionIterator iter(&s);
			JPoint cell;
			while (iter.Next(&cell))
				{
				JTreeNode* node = GetTreeList()->GetNode(cell.y);
				GNBGetTrashDir()->StealNode(node);
				}
			}
		SelectedFlushed();
		}
	else if (index == kViewDiscardsCmd)
		{
		GNBGetTrashDir()->Activate();
		}
	else if (index == kFlushCmd)
		{
		GNBGetTrashDir()->DeleteAll();
		}
	else if (index == kCloseCmd)
		{
		GetWindow()->GetDirector()->Close();
		}
	else if (index == kQuitCmd)
		{
		GNBGetApplication()->Quit();
		}
}

/******************************************************************************
 HandleKeyPress (virtual public)

 ******************************************************************************/

void
GNBTreeWidget::HandleKeyPress
	(
	const int 				key,
	const JXKeyModifiers&   modifiers
	)
{
	if (key == kJForwardDeleteKey || key == kJDeleteKey)
		{
		HandleNBMenu(kRemoveCmd);
		}
	else
		{
		GNBTreeWidgetBase::HandleKeyPress(key, modifiers);
		}
}
