/******************************************************************************
 GNBTreeDir.h

	Interface for the GNBTreeDir class

	Copyright © 1998 by Glenn W. Bach.  All rights reserved.
	
	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#ifndef _H_GNBTreeDir
#define _H_GNBTreeDir

//includes

// Superclass Header
#include <JXDocument.h>
#include <JFileArray.h>
#include <JString.h>
#include <JXPM.h>

class GNBTreeWidgetBase;
class GNBNoteDir;
class GNBTree;

class JFileArray;
class JTree;
class JTreeNode;

class JXImage;
class JXTextMenu;

class GNBTreeDir : public JXDocument
{
public:

public:
	
	static JBoolean Create(JXDirector* supervisor, const JCharacter* filename, GNBTreeDir** dir);
	static JBoolean CreateTrash(JXDirector* supervisor, GNBTreeDir** dir);
		
	virtual ~GNBTreeDir();

	virtual JXPM		GetMenuIcon() const;
	virtual JBoolean	NeedsSave() const;
	virtual void		SafetySave(const JXDocumentManager::SafetySaveReason reason);

	void				DataModified();
	void				DataReverted();

	void				OpenNote(const JFAID_t id);
	void				CloseNote(const JFAID_t id);
	JFAID_t				NewNote();
	void				DeleteFileElement(const JFAID_t id);
	void				NoteNameChanged(const JFAID_t id, const JString& title);

	JFileArray*			GetFileArray();
	const JFileArray*	GetFileArray() const;

	virtual JBoolean	Close();

	const JString&		GetFileName() const;
	void				StealNode(JTreeNode* node);
	void				DeleteAll();

protected:

	GNBTreeDir(JXDirector* supervisor);
	JBoolean GNBTreeDirX(const JCharacter* filename);

	virtual void		Receive(JBroadcaster* sender, const Message& message);
	virtual JBoolean	OKToClose();
	virtual JBoolean	OKToRevert();
	virtual JBoolean	CanRevert();
	virtual void		DiscardChanges();
	virtual void		DirectorClosed(JXDirector* theDirector);

private:

	GNBTree*			itsTree;
	GNBTreeWidgetBase*	itsWidget;
	JBoolean			itsTreeChanged;
	JXImage*			itsIcon;
	JXTextMenu*			itsHelpMenu;

	JPtrArray<GNBNoteDir>*	itsNoteDirs;
	JFileArray*				itsFileArray;
	JString					itsFileName;

	JBoolean				itsIsTrash;

private:

	JBoolean 	LoadFileArray(const JCharacter* filename);
	void 		BuildWindow();

	void HandleHelpMenu(const JIndex index);

	void ReadPrefs();
	void WritePrefs();

	void SaveOpenWindows();
	void OpenWindows();

	// not allowed

	GNBTreeDir(const GNBTreeDir& source);
	const GNBTreeDir& operator=(const GNBTreeDir& source);

public:

	static const JCharacter* kDataChanged;

	class DataChanged: public JBroadcaster::Message
		{
		public:
		
			DataChanged
				(
				const JFAID_t  id,
				const JString& title
				)
				:
				JBroadcaster::Message(kDataChanged),
				itsID(id),
				itsTitle(title)
				{ };

			const JString&
			GetTitle()
				const
				{
				return itsTitle;
				}

			JFAID_t
			GetID()
				const
				{
				return itsID;
				}

		private:

			JFAID_t 		itsID;
			const JString&	itsTitle;
		};
};


/******************************************************************************
 GetFileArray (public)

 ******************************************************************************/

inline JFileArray*
GNBTreeDir::GetFileArray()
{
	return itsFileArray;
}

/******************************************************************************
 GetFileArray (public)

 ******************************************************************************/

inline const JFileArray*
GNBTreeDir::GetFileArray()
	const
{
	return itsFileArray;
}

/******************************************************************************
 GetFileName (public)

 ******************************************************************************/

inline const JString&
GNBTreeDir::GetFileName()
	const
{
	return itsFileName;
}


#endif
