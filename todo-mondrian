place, drag, resize, remove rectangles
set options
auto-stacking
	check after every place,drag,resize:
	if rect A is fully contained within rect B,
	raise rect A immediately before rect B

layout model
	(just like partitions)
	stacked/nested horiz and vert compartments
	each compartment requests min width for each contained item
		if cannot shrink other item to make space, request more space from container
	existing layout parameters still apply
		allows resizing for translation/font sizing

-----

build
	string list
	main window with single, generic widget type
		create by dragging from palette
		class name
			widget renders based on class name
				button with ^M => return button
			tab complete in class name input field
			menu next to class name input field with known types
		x,y,w,h
		text (enabled for some types)
		shortcuts
		sizing
		variable name
		ctor arguments
		validation (for input fields)
	palette
		just another layout window
		save in prefs -- allows rearranging, resizing, custom objects, etc
	import from .fd
	load/save own format

main window is sorted JXStringList
hash table stores serialized layouts
open item from main window => look up and deserialize into layout
	JXLayoutCanvas contains tree of JXLayoutObject
	JXLayoutObject has option to accept drop to create child node
layout window options
	show rulers/grid
	snap to grid (5,10,other)
	align selected: top,bottom,center; right,left,center
	outline bounding rects
need option to control tab order
	show index in each item
	cmd-click to select item without re-ordering
	click to make object the next in list
resize object:  only show corner handles if object very small
special object for JXTabGroup, to allow direct editing of all cards
sizing references
	http://developer.apple.com/documentation/DeveloperTools/Conceptual/IB_UserGuide/Introduction/chapter_1_section_1.html
	http://www.reportmill.com/ribs/support/layout-management/
sizing
	fixedLeft, fixedRight, elastic
	floatingCenter, proportional
	fixedLeftProportional, fixedRightProportional
