#ifndef _T_evt_handlers
#define _T_evt_handlers

/******************************************************************************
 evt_handlers.tmpl

	Classes to handle asynchronous connections.

	BASE CLASS = ACE_Svc_Handler

	Written by John Lindal.

 ******************************************************************************/

#include "evt_handlers.h"
#include "util.h"
#include <jAssert.h>

/******************************************************************************
 ClientHandler::open

	This is called when a connection to the server succeeds.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
int
ClientHandler<ACE_PEER_STREAM_2>::open
	(
	void* data
	)
{
	std::cout << "Connection established" << std::endl;
	TalkToServer(ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::peer());
	ACE_Reactor::end_event_loop();
	ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::destroy();
	return 0;
}

/******************************************************************************
 ServerHandler::open

	This is called when a client connects.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
int
ServerHandler<ACE_PEER_STREAM_2>::open
	(
	void* data
	)
{
	std::cout << "Connection established, fd=" << (ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::peer()).get_handle() << std::endl;

	(ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::reactor())->register_handler(this, ACE_Event_Handler::WRITE_MASK);

	return ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>::open(data);
}

/******************************************************************************
 ServerHandler::handle_input

	This is called when we receive data from the client.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
int
ServerHandler<ACE_PEER_STREAM_2>::handle_input
	(
	ACE_HANDLE
	)
{
	TalkToClient(ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::peer());
	ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::destroy();
	return 0;
}

/******************************************************************************
 ServerHandler::handle_output

	This is called when we can send more data to the client.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
int
ServerHandler<ACE_PEER_STREAM_2>::handle_output
	(
	ACE_HANDLE
	)
{
	std::cout << "Data can now be written" << std::endl;
	(ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::reactor())->remove_handler(this, ACE_Event_Handler::WRITE_MASK | ACE_Event_Handler::DONT_CALL);
	return 0;
}

#endif
