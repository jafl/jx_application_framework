# should be included after defining "default" target
#
# requires that jx_config_common has already been included

SHELL=/bin/bash

.PHONY : libs
libs::
	@for path in ${TOUCHPATHS}; do \
       if ! ( if cd $$path; then ${MAKE}; fi ); then exit 1; fi \
     done;

.PHONY : staticACE
staticACE:
  ifdef J_BUILD_SHARED_LIB
	@cd ${ACELIBDIR}; ${MAKE} static
  endif

#
# Building packages
#

ifneq (${shell which rpm 2> /dev/null},)
  HAS_RPM := 1
endif

ifneq (${shell which dpkg-deb 2> /dev/null},)
  HAS_DEB := 1
endif

ifneq (${shell echo $$UID},0)
  SUDO := sudo
endif

.PHONY : pre_build_pkgs
pre_build_pkgs:
  ifeq (${HAS_RPM},1)
	@echo Please authorize sudo access for building RPM...
	@${SUDO} echo sudo access authorized...
  endif

# init_tarball (PKG_PATH, const MENU_STRINGS_FILE)

.PHONY : init_tarball
init_tarball:
	@${RM} -r ${PKG_PATH}
	@mkdir -p ${PKG_PATH}/lib ${PKG_PATH}/docs_HTML
	@if [[ -e README ]];    then ln -s ../README    ${PKG_PATH}/README;    fi
	@if [[ -e README.md ]]; then ln -s ../README.md ${PKG_PATH}/README.md; fi
	@ln -s ../COPYING               ${PKG_PATH}/COPYING
	@ln -s ../release/pkg/install   ${PKG_PATH}/install
	@ln -s ../release/pkg/uninstall ${PKG_PATH}/uninstall
	@ln -s ../release/pkg/desktop   ${PKG_PATH}/desktop
ifdef MENU_STRINGS_FILE
	@ln -s ../${MENU_STRINGS_FILE} ${PKG_PATH}/menu_strings
endif

ifdef J_RPM_GZ_LIBS
	@${foreach LIB, ${J_RPM_GZ_LIBS}, \
         cp ${LIB} ${PKG_PATH}/lib/; gzip ${PKG_PATH}/lib/${notdir ${LIB}}; }
endif

#
# build_pkgs (PKG_PATH, SOURCE_TAR_NAME)
#

.PHONY : build_pkgs
build_pkgs: _pre_build_pkgs build_rpm build_deb _post_build_pkgs

.PHONY : _pre_build_pkgs
_pre_build_pkgs:
	@${TAR} -chf ${SOURCE_TAR_NAME} ${PKG_PATH}
	@${RM} -r ${PKG_PATH}
	@mv ${SOURCE_TAR_NAME} ${J_DISTR_TAR_DIR}/

.PHONY : _post_build_pkgs
_post_build_pkgs:
	@gzip ${J_DISTR_TAR_DIR}/${SOURCE_TAR_NAME}

#
# build_rpm (SOURCE_TAR_NAME, const RPM_TAR_FILE, const RPM_SPEC_FILE)
#

.PHONY : build_rpm
build_rpm:
  ifeq (${HAS_RPM},1)
	@${SUDO} mkdir -p -m 755 ${RPM_BUILD_DIR} ${RPM_SRC_DIR} ${RPM_SPEC_DIR} ${RPM_BIN_DIR} ${RPM_SRPM_DIR}
	@${SUDO} ./release/pkg/uninstall
	@${SUDO} cp ${J_DISTR_TAR_DIR}/${SOURCE_TAR_NAME} ${RPM_TAR_FILE}
	@${SUDO} ${RPM} --define '_topdir ${RPM_SRC_ROOT}' ${RPM_SPEC_FILE}
	@${SUDO} mv ${RPM_BIN_DIR}/*.rpm ${J_DISTR_TAR_DIR}/
	@${SUDO} chown ${USER}. ${J_DISTR_TAR_DIR}/*.rpm
	@${SUDO} ./release/pkg/uninstall
  endif

#
# build_deb (SOURCE_TAR_NAME, const DEB_CTRL_FILE, const DEB_PKG_FILE)
#

DEB_INSTALL_SCRIPT_PATH = ${dir ${shell find debian -name install}}

.PHONY : build_deb
build_deb:
  ifeq (${HAS_DEB},1)
	@${RM} -r debian; mkdir -p debian/DEBIAN
	@cp ${J_DISTR_TAR_DIR}/${SOURCE_TAR_NAME} debian/
	@cd debian; tar -xf ${SOURCE_TAR_NAME}
	@${MAKE} SOURCE_TAR_NAME=${SOURCE_TAR_NAME} _build_deb_sub
	@cp ${DEB_CTRL_FILE} debian/DEBIAN/control
	@dpkg-deb --build debian
	@mv debian.deb ${J_DISTR_TAR_DIR}/${DEB_PKG_FILE}
	@${RM} -r debian
  endif

# this has to be a sub-make to evaluate DEB_INSTALL_SCRIPT_PATH correctly

.PHONY : _build_deb_sub
_build_deb_sub:
	@cd ${DEB_INSTALL_SCRIPT_PATH}; ./install ..
	@${RM} -r debian/${SOURCE_TAR_NAME} ${DEB_INSTALL_SCRIPT_PATH}
