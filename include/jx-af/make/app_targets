# should be included after defining "default" target
#
# requires that jx_config has already been included

APP_VERSION := ${shell if { test -f release/VERSION; } then cat release/VERSION; fi}

.PHONY : default
default: libs all post_link

.PHONY : post_link
post_link::

.PHONY : Makefiles
Makefiles::

#
# Libraries (const LIB_DEPS)
#

ifdef J_SYSTEM_HAS_SHARED_LIBS
  LDFLAGS += -Xlinker -R${JX_INSTALL_ROOT}/${SIGNATURE}
endif

.PHONY : libs
libs::
	@for dep in $$(for d in ${LIB_DEPS}; do echo $$d; done | tac); do \
       lib=$${dep##*/}; \
       dir=$${lib%.a}; \
       path=${JX_ROOT}/$$dir; \
       if ! ( if test -d $$path && cd $$path; then ${MAKE}; fi ); then exit 1; fi \
     done;

#
# Install (const APP_NAME, const JX_INSTALL_ROOT)
#

EXE_NAME := ${call EXE,${APP_NAME}}

.PHONY : install
install:: ${APP_NAME}
	@${J_STRIP_DEBUG} ${EXE_NAME}
	@mkdir -p ${JX_INSTALL_ROOT}/bin
	@cp ${APP_NAME} ${JX_INSTALL_ROOT}/bin

.PHONY : uninstall
uninstall::
	@${RM} ${JX_INSTALL_ROOT}/bin/${APP_NAME}

#
# Strings (const APP_NAME, const SIGNATURE)
#

MENU_STRING_FILE := ./strings/${APP_NAME}_menu_strings
JX_ACTION_DEFS   := ${JX_INCLUDE_ROOT}/jx-af/jx/jXActionDefs.h \
                    ${JX_INCLUDE_ROOT}/jx-af/jx/JXTEBase.cpp

.PHONY : strings
strings:
	@${RM} ${MENU_STRING_FILE} strings/version
	@echo -e '0\nVERSION "${APP_VERSION}"' > strings/version
	compile_jstrings ${J_STRING_FILES} \
      --code kDefaultStringData ./code/stringData.h

.PHONY : stringdb
stringdb:
	compile_jstrings ${J_STRING_FILES} --db ${SIGNATURE}_us

.PHONY : menu_strings
menu_strings:
	@${JX_INCLUDE_ROOT}/jx-af/scripts/extract_menu_strings \
       ${MENU_STRING_FILE} ${SIGNATURE} \
       -a ./code/actionDefs.h ${JX_ACTION_DEFS} \
       -m ./code/*.cpp ${JX_INCLUDE_ROOT}/jx-af/jx/*.cpp ${EXTRA_MENU_STRING_FILES}

#
# Building packages (const APP_NAME)
#

PKG_PATH        := ${APP_NAME}-${APP_VERSION}
SOURCE_TAR_NAME := ${subst -,_,${APP_NAME}}_${APP_VERSION}.tar

.PHONY : release
release: _pre_build_pkgs default
	@${J_STRIP_DEBUG} ${EXE_NAME}

	@${RM} -r ${PKG_PATH}
	@mkdir -p ${PKG_PATH}/lib
	@ln -s ../${EXE_NAME}           ${PKG_PATH}/
	@ln -s ../COPYING               ${PKG_PATH}/
	@ln -s ../release/pkg/install   ${PKG_PATH}/
	@ln -s ../release/pkg/uninstall ${PKG_PATH}/
	@ln -s ../release/pkg/desktop   ${PKG_PATH}/
	@if { test -e README; }    then ln -s ../README    ${PKG_PATH}/; fi
	@if { test -e README.md; } then ln -s ../README.md ${PKG_PATH}/; fi
	@if { test -f ${MENU_STRING_FILE}; } then \
         ln -s ../${MENU_STRING_FILE} ${PKG_PATH}/menu_strings; \
     fi

ifdef J_RPM_GZ_LIBS
	@${foreach LIB, ${J_RPM_GZ_LIBS}, \
       if { test -f ${LIB}; } then \
         cp ${LIB} ${PKG_PATH}/lib/; gzip ${PKG_PATH}/lib/${notdir ${LIB}}; \
       fi; }
endif

	@${MAKE} init_tarball_extra
	@${MAKE} _build_pkgs

.PHONY : init_tarball_extra
init_tarball_extra::

.PHONY : _pre_build_pkgs
_pre_build_pkgs:
  ifeq (${HAS_RPM},1)
	@echo Please authorize sudo access for building RPM...
	@${SUDO} echo sudo access authorized...
  endif

.PHONY : _build_pkgs
_build_pkgs:
	@${TAR} -chf ${SOURCE_TAR_NAME} ${PKG_PATH}
	@${RM} -r ${PKG_PATH}
	@mv ${SOURCE_TAR_NAME} ../

  ifeq (${HAS_RPM},1)
	@${SUDO} mkdir -p -m 755 ${RPM_BUILD_DIR} ${RPM_SRC_DIR} ${RPM_SPEC_DIR} ${RPM_BIN_DIR} ${RPM_SRPM_DIR}
	@${SUDO} ./release/pkg/uninstall
	@${SUDO} cp ../${SOURCE_TAR_NAME} ${RPM_SRC_DIR}/${SOURCE_TAR_NAME}
	@${SUDO} ${RPM} --define '_topdir ${RPM_SRC_ROOT}' \
                    --define 'pkg_version ${APP_VERSION}' ./release/pkg/${APP_NAME}.spec
	@${SUDO} mv ${RPM_BIN_DIR}/*/*.rpm ../
	@${SUDO} chown ${USER}. ../*.rpm
	@${SUDO} ./release/pkg/uninstall
  endif

  ifeq (${HAS_DEB},1)
	@${RM} -r debian; mkdir -p debian/DEBIAN
	@cp ../${SOURCE_TAR_NAME} debian/
	@cd debian; tar -xf ${SOURCE_TAR_NAME}
	@${MAKE} SOURCE_TAR_NAME=${SOURCE_TAR_NAME} _build_deb_sub
	@cp ./release/pkg/${APP_NAME}.debctrl debian/DEBIAN/control
	@perl -pi -e 's/%VERSION%/${APP_VERSION}/' debian/DEBIAN/control;
	@dpkg-deb --build debian
	@mv debian.deb ../${APP_NAME}_${APP_VERSION}_i386.deb
	@${RM} -r debian
  endif

	@gzip ../${SOURCE_TAR_NAME}

# this has to be a sub-make to evaluate DEB_INSTALL_SCRIPT_PATH correctly

DEB_INSTALL_SCRIPT_PATH = ${dir ${shell find debian -name install}}

.PHONY : _build_deb_sub
_build_deb_sub:
	@cd ${DEB_INSTALL_SCRIPT_PATH}; ./install ..
	@${RM} -r debian/${SOURCE_TAR_NAME} ${DEB_INSTALL_SCRIPT_PATH}
