##make

# should be included after defining "default" target
#
# requires that jx_config has already been included

APP_VERSION := $(shell if [[ -f release/VERSION ]]; then cat release/VERSION; fi)

ifndef BIN_NAME
  BIN_NAME := ${APP_NAME}
endif

ifndef REPO_NAME
  REPO_NAME := ${APP_NAME}
endif

ifndef FORGE_NAME
  FORGE_NAME := ${APP_NAME}
endif

ifndef SIGNATURE
  SIGNATURE := ${BIN_NAME}
endif

.PHONY : default
default: libs all post_link

${BIN_NAME}:: strings
	@true # without this, compile_jstrings doesn't link

.PHONY : post_link
post_link::

.PHONY : Makefiles
Makefiles::

#
# managing releases
#

.PHONY : update_version
update_version:
	@echo -n 'current version: '; cat release/VERSION; echo
	@read -e -p 'new version: ' V; export V; \
     echo -n $$V >| release/VERSION; \
     if [[ -f snap/snapcraft.yaml ]]; then \
         perl -pi -e 's/version: .+/version: "$$ENV{V}"/' snap/snapcraft.yaml; \
     fi

.PHONY : github_release
github_release:
	@V=`cat release/VERSION`; git tag -a -m $$V v$$V; git push origin v$$V

.PHONY : push_version
push_version:
	@scp release/VERSION release/doc/* jafl,${FORGE_NAME}@web.sourceforge.net:htdocs/

.PHONY : push_help
push_help:
	@scp release/doc/help.html jafl,${FORGE_NAME}@web.sourceforge.net:htdocs/

.PHONY : test_snap
test_snap:
	@chmod a+r snap/gui/*
	@snapcraft --debug --shell-after

.PHONY : check_version
check_version:
	@echo -n "local:    "; cat release/VERSION; echo
	@echo -n "released: "
	@curl -L https://${FORGE_NAME}.sourceforge.net/VERSION; echo

#
# Core dumps on macOS
#

.PHONY : macos_sign_for_core
macos_sign_for_core:
	@if [[ -x /usr/libexec/PlistBuddy ]]; then \
         /usr/libexec/PlistBuddy -c "Add :com.apple.security.get-task-allow bool true" tmp.entitlements > /dev/null; \
         codesign -s - -f --entitlements tmp.entitlements ${BIN_NAME}; \
         rm -f tmp.entitlements; \
     fi

#
# Libraries
#

ifdef SNAPCRAFT_PART_INSTALL
  LDFLAGS += -L${JX_ROOT}/lib
endif

.PHONY : libs
libs::
	@for dep in $$(for d in ${LIB_DEPS}; do echo $$d; done | tac); do \
       lib=$${dep##*/}; \
       dir=$${lib%.a}; \
       path=${JX_ROOT}/$$dir; \
       if ! ( if test -d $$path && cd $$path; then ${MAKE}; fi ); then exit 1; fi \
     done;

#
# Install
#

EXE_NAME := $(call EXE,${BIN_NAME})

.PHONY : install
install:: default
	@${J_STRIP_DEBUG} ${EXE_NAME}
	@mkdir -p ${JX_INSTALL_BIN}
	@${RM} ${JX_INSTALL_BIN}/${EXE_NAME}
	@cp ${EXE_NAME} ${JX_INSTALL_BIN}

.PHONY : uninstall
uninstall::
	@${RM} ${JX_INSTALL_BIN}/${EXE_NAME}

#
# Strings
#

.PHONY : strings
strings:
  ifneq (${J_STRING_FILES},)
	@${RM} strings/version
	@echo -e '0\nVERSION "${APP_VERSION}"' > strings/version
	compile_jstrings ${J_STRING_FILES} \
      --code kDefaultStringData ./code/stringData.h
  endif

.PHONY : stringdb
stringdb:
	compile_jstrings ${J_STRING_FILES} --db ${SIGNATURE}_us

#
# Building packages
#

PKG_PATH        := ${APP_NAME}-${APP_VERSION}
SOURCE_TAR_NAME := ${APP_NAME}_${APP_VERSION}_${SYS_NAME}_${SYS_ARCH}.tar
RPM_PKG_NAME    := ${APP_NAME}-${APP_VERSION}.${SYS_NAME}.${SYS_ARCH}.rpm
DEB_PKG_NAME    := ${APP_NAME}_${APP_VERSION}_${SYS_NAME}_${SYS_ARCH}.deb

.PHONY : release
release: _pre_build_pkgs default
	@${J_STRIP_DEBUG} ${EXE_NAME}

  ifneq (${J_IS_APP_RELEASE_BUILD},1)
	@echo You can only build a package when you './configure release'
	@false
  endif

	@${RM} -r ${PKG_PATH}; mkdir -p ${PKG_PATH}
	@ln -s -t ${PKG_PATH}/ \
         ../${EXE_NAME} ../README.md ../COPYING \
         ../release/pkg/install ../release/pkg/uninstall
  ifneq (${SYS_NAME},macos)
	@ln -s -t ${PKG_PATH}/ \
         ../release/pkg/desktop
  endif
	@${MAKE} init_tarball_extra

	@${TAR} -chf ${SOURCE_TAR_NAME} ${PKG_PATH}
	@${RM} -r ${PKG_PATH}
	@mv ${SOURCE_TAR_NAME} ../

  ifeq (${HAS_RPM},1)
	@${SUDO} rm -rf ${RPM_SRC_ROOT};

	@${SUDO} mkdir -p -m 755 ${RPM_BUILD_DIR} ${RPM_SRC_DIR} ${RPM_SPEC_DIR} ${RPM_BIN_DIR} ${RPM_SRPM_DIR}
	@${SUDO} cp ../${SOURCE_TAR_NAME} ${RPM_SRC_DIR}/${SOURCE_TAR_NAME}
	@${SUDO} ${RPM} --define '_topdir ${RPM_SRC_ROOT}' \
                    --define 'app_name ${APP_NAME}' \
                    --define 'pkg_version ${APP_VERSION}' \
                    --define 'pkg_name ${SOURCE_TAR_NAME}' \
                    ./release/pkg/${APP_NAME}.spec
	@${SUDO} mv ${RPM_BIN_DIR}/*/${APP_NAME}-*.rpm ../${RPM_PKG_NAME}
	@${SUDO} chown ${USER}: ../*.rpm

	@${SUDO} rm -rf ${RPM_SRC_ROOT};
  endif

  ifeq (${HAS_DEB},1)
	@${RM} -r debian; mkdir -p debian/DEBIAN
	@cp ../${SOURCE_TAR_NAME} debian/
	@cd debian; tar -xf ${SOURCE_TAR_NAME}
	@${MAKE} SOURCE_TAR_NAME=${SOURCE_TAR_NAME} _build_deb_sub
	@cp ./release/pkg/${APP_NAME}.debctrl debian/DEBIAN/control
	@perl -pi -e 's/%NAME%/${APP_NAME}/' debian/DEBIAN/control;
	@perl -pi -e 's/%VERSION%/${APP_VERSION}/' debian/DEBIAN/control;
	@perl -pi -e 's/%ARCH%/${SYS_ARCH}/' debian/DEBIAN/control
	@dpkg-deb --build debian
	@mv debian.deb ../${DEB_PKG_NAME}
	@${RM} -r debian
  endif

	@gzip ../${SOURCE_TAR_NAME}

.PHONY : init_tarball_extra
init_tarball_extra::

.PHONY : _pre_build_pkgs
_pre_build_pkgs:
  ifeq (${HAS_RPM},1)
	@echo Please authorize sudo access for building RPM...
	@${SUDO} echo sudo access authorized...
  endif

# this has to be a sub-make to evaluate DEB_INSTALL_SCRIPT_PATH correctly

DEB_INSTALL_SCRIPT_PATH = $(dir $(shell find debian -name install))

.PHONY : _build_deb_sub
_build_deb_sub:
	@cd ${DEB_INSTALL_SCRIPT_PATH}; ./install ../usr/local
	@${RM} -r debian/${SOURCE_TAR_NAME} ${DEB_INSTALL_SCRIPT_PATH}

#
# Uploading packages
#

.PHONY : upload_release
upload_release:
	@${MAKE} FILE=../${SOURCE_TAR_NAME}.gz upload_release_file
	@if [[ -f ../${DEB_PKG_NAME} ]]; then \
       ${MAKE} FILE=../${DEB_PKG_NAME} upload_release_file; \
     fi
	@RPM_FILE=$(wildcard ../${APP_NAME}-${APP_VERSION}*.rpm); \
     if [[ -f $$RPM_FILE ]]; then \
       ${MAKE} FILE=$$RPM_FILE upload_release_file; \
     fi

.PHONY : upload_release_file
upload_release_file:
	@curl -X POST \
        -H "Content-Length: "`wc -c ${FILE} | cut -d ' ' -f1` \
        -H "Content-Type: "`file -b --mime-type ${FILE}` \
        -T "${FILE}" \
        -H "Authorization: token "`cat ~/.ssh/GITHUB_TOKEN` \
        -H "Accept: application/vnd.github.v3+json" \
        https://uploads.github.com/repos/jafl/${REPO_NAME}/releases/`curl -s  https://api.github.com/repos/jafl/${REPO_NAME}/releases/latest | jq -r '.id'`/assets?name=$(notdir ${FILE})

.PHONY : mirror_sourceforge
mirror_sourceforge:
	@R=`curl https://api.github.com/repos/jafl/${REPO_NAME}/releases/latest`; \
     V=`echo $$R | jq -r '.tag_name'`; V=$${V#v}; \
     echo "mkdir /home/frs/project/${FORGE_NAME}/v$$V" | sftp -b - jafl@frs.sourceforge.net; \
     for url in `echo $$R | jq -r '.assets[].browser_download_url'`; do \
         f=$${url##*/}; \
         curl -L -O $$url; \
         scp $$f jafl@frs.sourceforge.net:/home/frs/project/${FORGE_NAME}/$$V/; \
         rm -f $$f; \
         if [[ $$url == *macos* ]]; then \
             curl -H "Accept: application/json" -X PUT -d "default=mac" -d "api_key="`cat ~/.ssh/FORGE_API_KEY` https://sourceforge.net/projects/${FORGE_NAME}/files/v$$V/$$f; \
         fi; \
     done
