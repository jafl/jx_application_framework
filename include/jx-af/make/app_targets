##make

# should be included after defining "default" target
#
# requires that jx_config has already been included

APP_VERSION := $(shell if [[ -f release/VERSION ]]; then cat release/VERSION; fi)

ifndef BIN_NAME
  BIN_NAME := ${APP_NAME}
endif

ifndef SIGNATURE
  SIGNATURE := ${BIN_NAME}
endif

.PHONY : default
default: libs all post_link

${BIN_NAME}:: strings
	@true # without this, compile_jstrings doesn't link

.PHONY : post_link
post_link::

.PHONY : Makefiles
Makefiles::

.PHONY : update_rb
update_homebrew_formula:
	@${JX_ROOT}/bin/update_homebrew_formula ${APP_NAME}

#
# Libraries
#

ifdef J_SYSTEM_HAS_SHARED_LIBS
  LDFLAGS += -Xlinker -R${JX_INSTALL_ROOT}/${SIGNATURE}
endif

.PHONY : libs
libs::
	@for dep in $$(for d in ${LIB_DEPS}; do echo $$d; done | tac); do \
       lib=$${dep##*/}; \
       dir=$${lib%.a}; \
       path=${JX_ROOT}/$$dir; \
       if ! ( if test -d $$path && cd $$path; then ${MAKE}; fi ); then exit 1; fi \
     done;

#
# Install
#

EXE_NAME := $(call EXE,${BIN_NAME})

.PHONY : install
install:: ${BIN_NAME}
	@${J_STRIP_DEBUG} ${EXE_NAME}
	@mkdir -p ${JX_INSTALL_ROOT}/bin
	@cp ${EXE_NAME} ${JX_INSTALL_ROOT}/bin

.PHONY : uninstall
uninstall::
	@${RM} ${JX_INSTALL_ROOT}/bin/${EXE_NAME}

#
# Strings
#

MENU_STRING_FILE := ./strings/menu_strings
JX_ACTION_DEFS   := ${JX_INCLUDE_ROOT}/jx-af/jx/jXActionDefs.h \
                    ${JX_INCLUDE_ROOT}/jx-af/jx/JXTEBase.cpp

.PHONY : strings
strings:
  ifneq (${J_STRING_FILES},)
	@${RM} ${MENU_STRING_FILE} strings/version
	@echo -e '0\nVERSION "${APP_VERSION}"' > strings/version
	compile_jstrings ${J_STRING_FILES} \
      --code kDefaultStringData ./code/stringData.h
  endif

.PHONY : stringdb
stringdb:
	compile_jstrings ${J_STRING_FILES} --db ${SIGNATURE}_us

.PHONY : menu_strings
menu_strings:
	@${JX_INCLUDE_ROOT}/jx-af/scripts/extract_menu_strings \
       ${MENU_STRING_FILE} ${SIGNATURE} \
       -a ./code/actionDefs.h ${JX_ACTION_DEFS} \
       -m ./code/*.cpp ${JX_INCLUDE_ROOT}/jx-af/jx/*.cpp ${EXTRA_MENU_STRING_FILES}

#
# Building packages
#

PKG_PATH        := ${APP_NAME}-${APP_VERSION}
SOURCE_TAR_NAME := ${APP_NAME}_${APP_VERSION}_${SYS_NAME}_${SYS_ARCH}.tar
DEB_PKG_NAME    := ${APP_NAME}_${APP_VERSION}_${SYS_ARCH}.deb

.PHONY : release
release: _pre_build_pkgs default menu_strings
	@${J_STRIP_DEBUG} ${EXE_NAME}

	@${RM} -r ${PKG_PATH}; mkdir -p ${PKG_PATH}
	@ln -s -t ${PKG_PATH}/ \
         ../${EXE_NAME} ../README.md ../COPYING \
         ../release/pkg/install ../release/pkg/uninstall
  ifneq (${SYS_NAME},macos)
	@ln -s -t ${PKG_PATH}/ \
         ../release/pkg/desktop
  endif
	@if [[ -f ${MENU_STRING_FILE} ]]; then \
         cp ${MENU_STRING_FILE} ${PKG_PATH}; \
         ${RM} ${MENU_STRING_FILE}; \
     fi
	@${MAKE} init_tarball_extra

	@${TAR} -chf ${SOURCE_TAR_NAME} ${PKG_PATH}
	@${RM} -r ${PKG_PATH}
	@mv ${SOURCE_TAR_NAME} ../

  ifeq (${HAS_RPM},1)
	@${SUDO} mkdir -p -m 755 ${RPM_BUILD_DIR} ${RPM_SRC_DIR} ${RPM_SPEC_DIR} ${RPM_BIN_DIR} ${RPM_SRPM_DIR}
	@${SUDO} ./release/pkg/uninstall
	@${SUDO} cp ../${SOURCE_TAR_NAME} ${RPM_SRC_DIR}/${SOURCE_TAR_NAME}
	@${SUDO} ${RPM} --define '_topdir ${RPM_SRC_ROOT}' \
                    --define 'app_name ${APP_NAME}' \
                    --define 'pkg_version ${APP_VERSION}' \
                    --define 'pkg_name ${SOURCE_TAR_NAME}' \
                    ./release/pkg/${APP_NAME}.spec
	@${SUDO} mv ${RPM_BIN_DIR}/*/*.rpm ../
	@${SUDO} chown ${USER}. ../*.rpm
	@${SUDO} ./release/pkg/uninstall
  endif

  ifeq (${HAS_DEB},1)
	@${RM} -r debian; mkdir -p debian/DEBIAN
	@cp ../${SOURCE_TAR_NAME} debian/
	@cd debian; tar -xf ${SOURCE_TAR_NAME}
	@${MAKE} SOURCE_TAR_NAME=${SOURCE_TAR_NAME} _build_deb_sub
	@cp ./release/pkg/${APP_NAME}.debctrl debian/DEBIAN/control
	@perl -pi -e 's/%NAME%/${APP_NAME}/' debian/DEBIAN/control;
	@perl -pi -e 's/%VERSION%/${APP_VERSION}/' debian/DEBIAN/control;
	@perl -pi -e 's/%ARCH%/${SYS_ARCH}/' debian/DEBIAN/control
	@dpkg-deb --build debian
	@mv debian.deb ../${DEB_PKG_NAME}
	@${RM} -r debian
  endif

	@gzip ../${SOURCE_TAR_NAME}

.PHONY : init_tarball_extra
init_tarball_extra::

.PHONY : _pre_build_pkgs
_pre_build_pkgs:
  ifeq (${HAS_RPM},1)
	@echo Please authorize sudo access for building RPM...
	@${SUDO} echo sudo access authorized...
  endif

# this has to be a sub-make to evaluate DEB_INSTALL_SCRIPT_PATH correctly

DEB_INSTALL_SCRIPT_PATH = $(dir $(shell find debian -name install))

.PHONY : _build_deb_sub
_build_deb_sub:
	@cd ${DEB_INSTALL_SCRIPT_PATH}; ./install ..
	@${RM} -r debian/${SOURCE_TAR_NAME} ${DEB_INSTALL_SCRIPT_PATH}

#
# Uploading packages
#

.PHONY : upload_release
upload_release:
	@${MAKE} FILE=../${SOURCE_TAR_NAME}.gz upload_release_file
	@if [[ -f ../${DEB_PKG_NAME} ]]; then \
       ${MAKE} FILE=../${DEB_PKG_NAME} upload_release_file; \
     fi
	@if [[ -f ../${APP_NAME}-${APP_VERSION}*.rpm ]]; then \
       ${MAKE} FILE=../${APP_NAME}-${APP_VERSION}*.rpm upload_release_file; \
     fi

.PHONY : upload_release_file
upload_release_file:
	@curl -v -X POST \
        -H "Content-Length: $$(wc -c ${FILE} | cut -d ' ' -f1)" \
        -H "Content-Type: $$(file -b --mime-type ${FILE})" \
        -T "${FILE}" \
        -H "Authorization: token $$(cat ~/.ssh/GITHUB_TOKEN)" \
        -H "Accept: application/vnd.github.v3+json" \
        https://uploads.github.com/repos/jafl/${REPO_NAME}/releases/$$(curl -s  https://api.github.com/repos/jafl/ssh-askpass/releases/latest | jq '.id')/assets?name=$(notdir ${FILE})
