#!/bin/bash

set -e;

export ACE_VERSION=7.0.0
export REFLEX_VERSION=3.2.2

#
# functions
#

function get_ace
{
	if [[ -n $ACE_ROOT || -e ACE/ACE_wrappers ]]; then
		return;
	fi

	pushd ACE;

	if [[ ! -f ACE.tgz ]]; then
		if command -v wget; then
			wget -O ACE.tgz http://libjx.sourceforge.net/data/ACE-$ACE_VERSION.tar.gz;
		elif command -v curl; then
			curl -o ACE.tgz http://libjx.sourceforge.net/data/ACE-$ACE_VERSION.tar.gz;
		else
			echo "Please install either curl or wget";
			exit 1;
		fi
	fi

	tar -xzf ACE.tgz;
	popd;
}

function configure_ace
{
	if [[ -n $ACE_ROOT ]]; then
		return;
	fi

	ACE_CONFIG=$1;
	MAKE_CONFIG=$2;

	if [[ ! -f ACE/ACE_wrappers/ace/config.h ]]; then
		ln -sf $ACE_CONFIG ACE/ACE_wrappers/ace/config.h;
	fi

	if [[ -d ACE/ACE_wrappers/include/makeinclude && ! -f ACE/ACE_wrappers/include/makeinclude/platform_macros.GNU ]]; then
		ln -sf $MAKE_CONFIG ACE/ACE_wrappers/include/makeinclude/platform_macros.GNU;
	fi
}

function get_reflex
{
	if [[ ! -d misc/reflex || ! -f misc/reflex/lib/libreflex.a ]]; then
		rm -rf misc/reflex;
		git clone -b $REFLEX_VERSION https://github.com/Genivia/RE-flex misc/reflex 2> /dev/null;
	fi
}

function clean_links
{
	rm -f include/jx-af/make/jx_config
	rm -f include/jx-af/jcore/jMissingProto.h

	if [[ -d ACE/ACE_wrappers ]]; then
		rm -f ACE/ACE_wrappers/ace/config.h;
		rm -f ACE/ACE_wrappers/include/makeinclude/platform_macros.GNU;
	fi
}

function configure_linux
{
	get_reflex;
	clean_links;

	ln -sf sys/Linux_g++  include/jx-af/make/jx_config;
	ln -sf ../../misc/missing_proto/jMissingProto_empty.h include/jx-af/jcore/jMissingProto.h;

	if [[ -d ACE/ACE_wrappers ]]; then
		configure_ace config-linux.h platform_linux.GNU;
	fi
}

#
# main script
#

SYS=`uname -o || uname -s`;		# Darwin doesn't support -o

if [[ $UID != 0 ]]; then
	SUDO="sudo";
fi

if [[ $1 == release ]]; then
	echo -n 1 >| 0-RELEASE;
elif [[ $1 == package ]]; then
	mkdir ACE misc;
fi

if [[ $SYS == Darwin ]]; then

	if [[ -z $HOMEBREW_VERSION ]]; then
		if ! command -v brew; then
			echo Installing Homebrew...;
			sudo /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)";
		fi

		brew bundle;
	fi

	if [[ $1 != package ]]; then
		clean_links;
		ln -sf sys/MacOS_g++ include/jx-af/make/jx_config;
		ln -sf ../../misc/missing_proto/jMissingProto_empty.h include/jx-af/jcore/jMissingProto.h;
	fi

elif command -v apt-get; then

	# debian

	if [[ -z $LGTM_SRC ]]; then
		$SUDO apt update;
		$SUDO apt -y install curl \
			g++ bison make automake \
			libx11-dev libxinerama-dev libxft-dev libxmu-dev libxi-dev \
				libx11-xcb-dev libxcb-xfixes0-dev libxcb-dri2-0-dev \
			libxpm-dev libjpeg-dev libpng-dev libgd-dev \
			libace-dev libicu-dev libpcre3-dev libxml2-dev \
			xutils-dev libdrm-dev \
			libforms-bin aspell;
	fi

	if [[ $1 != package ]]; then
		configure_linux;
	fi

elif command -v dnf || command -v yum; then

	# redhat

	if command -v dnf; then
		PKGMGR=dnf;
	else
		PKGMGR=yum;
	fi

	$SUDO $PKGMGR -y install findutils perl python-libxml2 \
		gcc-c++ bison make rpm-build imake libtool \
		libX11-devel libXinerama-devel libXft-devel libXmu-devel libXi-devel \
			xorg-x11-proto-devel xorg-x11-server-devel libXdamage-devel  \
		libXpm-devel libjpeg-devel libpng-devel gd-devel \
		libicu-devel pcre-devel libxml2-devel \
		expat-devel libdrm-devel \
		xforms-devel aspell aspell-en;

	if [[ $1 != package ]]; then
		get_ace;
		configure_linux;
	fi

elif command -v zypper; then

	# openSUSE

	$SUDO zypper -in install curl perl python-libxml2 \
		gcc-c++ bison make rpm-build imake libtool \
		libX11-devel libXinerama-devel libXft-devel libXmu-devel libXi-devel \
			xorg-x11-proto-devel xorg-x11-server-devel libXdamage-devel  \
		libXpm-devel libjpeg-devel libpng-devel gd-devel \
		libicu-devel pcre-devel libxml2-devel \
		expat-devel libdrm-devel \
		xforms-devel aspell aspell-en;

	if [[ $1 != package ]]; then
		get_ace;
		configure_linux;
	fi

elif [[ $SYS == Cygwin ]]; then

	ARCH=`uname -i`;
	if [[ $ARCH == x86_64 ]]; then
		SETUP=setup-x86_64.exe;
		echo "Unsupported architecture '$ARCH'.  Please file an issue on github.";
		exit 1;
	elif [[ ${ARCH:0:1} == i ]]; then
		SETUP=setup-x86.exe;
		SYS_CONFIG=sys/Linux-Intel-cygwin32;
		ACE_CONFIG=config-cygwin32.h;
		ACE_MAKE_CONFIG=platform_cygwin32.GNU;
	else
		echo "Unknown architecture '$ARCH'.  Please file an issue on github.";
		exit 1;
	fi

	$SETUP -q -P curl,perl,python2-libxml2;
	$SETUP -q -P gcc-g++,bison,make,gdb;
	$SETUP -q -P libX11-devel,libXinerama-devel,libXpm-devel,libXft-devel,libXmu-devel,libXi-devel;
	$SETUP -q -P libxml2-devel,libgd-devel,libjpeg-devel,libpng-devel,libicu-devel,libpcre-devel;
	$SETUP -q -P imake,libtool,xorg-server-devel,libXdamage-devel,libexpat-devel;
	$SETUP -q -P aspell,aspell-en;

	if [[ $1 != package ]]; then
		get_ace;
		get_reflex;

		clean_links;
		ln -sf $SYS_CONFIG include/jx-af/make/jx_config;
		ln -sf ../../misc/missing_proto/jMissingProto_CygWin.h include/jx-af/jcore/jMissingProto.h;
		configure_ace $ACE_CONFIG $ACE_MAKE_CONFIG;
	fi

else

	echo "Unrecognized system!  Please file an issue on github.";
	exit 1;

fi

#
# final setup
#

if [[ ! -e libjcore/code/jStringData.h && $1 != package ]]; then
	cp -f libjcore/jStringData_init.h libjcore/code/jStringData.h;
	chmod u+w libjcore/code/jStringData.h;
fi
