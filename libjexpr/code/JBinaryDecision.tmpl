#ifndef _T_JBinaryDecision
#define _T_JBinaryDecision

/******************************************************************************
 JBinaryDecision.cc

							The Binary Decision Class

	This abstract class defines the requirements for all decisions that take
	two arguments.

	BASE CLASS = JDecision

	Copyright (C) 1995 by John Lindal. All rights reserved.

 ******************************************************************************/

#include <JBinaryDecision.h>
#include <jAssert.h>

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JBinaryDecision<T>::JBinaryDecision
	(
	const JCharacter*	name,
	const JDecisionType	type
	)
	:
	JDecision(type)
{
	itsName = name;
	itsArg1 = NULL;
	itsArg2 = NULL;
}

template <class T>
JBinaryDecision<T>::JBinaryDecision
	(
	T*					arg1,
	T*					arg2,
	const JCharacter*	name,
	const JDecisionType	type
	)
	:
	JDecision(type)
{
	itsName = name;
	itsArg1 = arg1;
	itsArg2 = arg2;
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JBinaryDecision<T>::~JBinaryDecision()
{
	jdelete itsArg1;
	jdelete itsArg2;
}

/******************************************************************************
 Copy constructor

 ******************************************************************************/

template <class T>
JBinaryDecision<T>::JBinaryDecision
	(
	const JBinaryDecision& source
	)
	:
	JDecision(source)
{
	itsName = source.itsName;
	itsArg1 = (source.itsArg1)->Copy();
	itsArg2 = (source.itsArg2)->Copy();
}

/******************************************************************************
 Print

 ******************************************************************************/

template <class T>
void
JBinaryDecision<T>::Print
	(
	ostream& output
	)
	const
{
	itsArg1->Print(output);
	output << ' ' << itsName << ' ';
	itsArg2->Print(output);
}

/******************************************************************************
 SameAs

	Derived classes must use SameAsEitherOrder, SameAsSameOrder,
	or provide their own code.

 ******************************************************************************/

template <class T>
JBoolean
JBinaryDecision<T>::SameAs
	(
	const JDecision& theDecision
	)
	const
{
	assert( 0 );
	return kJFalse;
}

/******************************************************************************
 SameAsSameOrder (protected)

	Returns kJTrue if the given function is identical to us.
	The arguments in corresponding slots must be identical.

 ******************************************************************************/

template <class T>
JBoolean
JBinaryDecision<T>::SameAsSameOrder
	(
	const JDecision& theDecision
	)
	const
{
	if (!JDecision::SameAs(theDecision))
		{
		return kJFalse;
		}

	const JBinaryDecision<T>& theBinaryDecision = (const JBinaryDecision<T>&) theDecision;
	return JConvertToBoolean(
			itsArg1->SameAs(*(theBinaryDecision.itsArg1)) &&
			itsArg2->SameAs(*(theBinaryDecision.itsArg2)) );
}

/******************************************************************************
 SameAsEitherOrder (protected)

	Returns kJTrue if the given function is identical to us.
	The arguments can be in either order.

 ******************************************************************************/

template <class T>
JBoolean
JBinaryDecision<T>::SameAsEitherOrder
	(
	const JDecision& theDecision
	)
	const
{
	if (!JDecision::SameAs(theDecision))
		{
		return kJFalse;
		}

	const JBinaryDecision<T>& theBinaryDecision = (const JBinaryDecision<T>&) theDecision;
	if (itsArg1->SameAs(*(theBinaryDecision.itsArg1)))
		{
		return itsArg2->SameAs(*(theBinaryDecision.itsArg2));
		}
	if (itsArg1->SameAs(*(theBinaryDecision.itsArg2)))
		{
		return itsArg2->SameAs(*(theBinaryDecision.itsArg1));
		}
	else
		{
		return kJFalse;
		}
}

/******************************************************************************
 GetName

 ******************************************************************************/

template <class T>
const JCharacter*
JBinaryDecision<T>::GetName()
	const
{
	return itsName;
}

/******************************************************************************
 GetArg

 ******************************************************************************/

template <class T>
const T*
JBinaryDecision<T>::GetArg1()
	const
{
	return itsArg1;
}

template <class T>
const T*
JBinaryDecision<T>::GetArg2()
	const
{
	return itsArg2;
}

template <class T>
T*
JBinaryDecision<T>::GetArg1()
{
	return itsArg1;
}

template <class T>
T*
JBinaryDecision<T>::GetArg2()
{
	return itsArg2;
}

/******************************************************************************
 SetArg

	We can't inline this because we don't want to require the header file
	for T to be included by everybody who uses us.

 ******************************************************************************/

template <class T>
void
JBinaryDecision<T>::SetArg1
	(
	T* arg
	)
{
	jdelete itsArg1;
	itsArg1 = arg;
}

template <class T>
void
JBinaryDecision<T>::SetArg2
	(
	T* arg
	)
{
	jdelete itsArg2;
	itsArg2 = arg;
}

#endif
