#ifndef _T_JMessageProtocol
#define _T_JMessageProtocol

/******************************************************************************
 JMessageProtocol.tmpl

	Parses incoming bytes into messages separated by itsSeparatorStr.

	The data that you send can contain any byte sequence other than
	itsDisconnectStr.  This sequence is reserved for terminating the
	connection.  (You can set itsDisconnectStr to be empty.)

	The default is the UNIX protocol which uses "\n" as separator and "\0" as
	terminator.  Macintosh sets the separator to "\r", and DOS sets the
	separator to "\r\n".  In general, the separator must not contain the
	terminator, and visa versa.

	*** You cannot use the std::function version of ListenTo() because
		the way this class broadcasts confuses the type inference.

	BASE CLASS = JNetworkProtocolBase, virtual JBroadcaster

	Copyright (C) 1998-2000 by John Lindal.

 ******************************************************************************/

#include "JMessageProtocol.h"
#include "JStringMatch.h"
#include "JMinMax.h"
#include "jGlobals.h"
#include "jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
JMessageProtocol<ACE_PEER_STREAM_2>::JMessageProtocol
	(
	const bool synchSend
	)
	:
	JNetworkProtocolBase<ACE_PEER_STREAM_2>(synchSend),
	itsByteBuffer(JMessageProtocolT::kDefaultBufferSize),
	itsMessageList(JPtrArrayT::kDeleteAll),
	itsSeparatorStr(false),
	itsDisconnectStr(false)
{
	JMessageProtocolX();
}

template <ACE_PEER_STREAM_1>
JMessageProtocol<ACE_PEER_STREAM_2>::JMessageProtocol
	(
	const ACE_HANDLE	fd,
	const bool		synchSend
	)
	:
	JNetworkProtocolBase<ACE_PEER_STREAM_2>(synchSend),
	itsByteBuffer(JMessageProtocolT::kDefaultBufferSize),
	itsMessageList(JPtrArrayT::kDeleteAll),
	itsSeparatorStr(false),
	itsDisconnectStr(false)
{
	JMessageProtocolX();

	ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::set_handle(fd);
	ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::open(nullptr);
}

// private

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::JMessageProtocolX()
{
	itsRecvBufferSize = JMessageProtocolT::kDefaultBufferSize;

	itsRecvBuffer = jnew JUtf8Byte [ itsRecvBufferSize ];
	assert( itsRecvBuffer != nullptr );

	UseUNIXProtocol();

	itsWantsBlankMessagesFlag = false;
	itsSentDisconnectFlag     = false;
	itsReceivedDisconnectFlag = false;
	itsCancelTaskFlag         = nullptr;
}

/******************************************************************************
 Destructor

	Client must call SendDisconnect() explicitly.  This makes their code
	clearer.  It also allows using this class on read-only connections
	because the client can ensure that nothing will ever be written.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
JMessageProtocol<ACE_PEER_STREAM_2>::~JMessageProtocol()
{
	if (itsCancelTaskFlag != nullptr)
	{
		*itsCancelTaskFlag = true;		// deleted inside task
	}

	jdelete [] itsRecvBuffer;
}

/******************************************************************************
 Protocol

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::GetProtocol
	(
	JString* separator,
	JString* disconnect
	)
	const
{
	*separator  = itsSeparatorStr;
	*disconnect = itsDisconnectStr;
}

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::SetProtocol
	(
	const JUtf8Byte*	separatorStr,
	const JSize			separatorByteCount,
	const JUtf8Byte*	disconnectStr,
	const JSize			disconnectByteCount
	)
{
	assert( separatorByteCount > 0 );

	itsSeparatorStr.Set(separatorStr, separatorByteCount > 0 ? separatorByteCount : strlen(separatorStr));
	itsDisconnectStr.Set(disconnectStr, disconnectByteCount > 0 ? disconnectByteCount : strlen(disconnectStr));

	// must use raw byte functions because control characters are treated as zero-length in UTF-8

	assert( disconnectByteCount == 0 ||
			(separatorByteCount == disconnectByteCount &&
			 memcmp(itsSeparatorStr.GetBytes(), itsDisconnectStr.GetBytes(), separatorByteCount) != 0) ||
			(separatorByteCount > disconnectByteCount &&
			 strstr(itsSeparatorStr.GetBytes(), itsDisconnectStr.GetBytes()) == nullptr) ||
			(disconnectByteCount > separatorByteCount &&
			 strstr(itsDisconnectStr.GetBytes(), itsSeparatorStr.GetBytes()) == nullptr));

	UpdateTokenPattern();
}

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::UseUNIXProtocol()
{
	itsSeparatorStr.Set(JMessageProtocolT::kUNIXSeparatorStr,
						JMessageProtocolT::kUNIXSeparatorByteCount);
	itsDisconnectStr.Set(JMessageProtocolT::kStdDisconnectStr,
						 JMessageProtocolT::kStdDisconnectByteCount);
	UpdateTokenPattern();
}

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::UseMacintoshProtocol()
{
	itsSeparatorStr.Set(JMessageProtocolT::kMacintoshSeparatorStr,
						JMessageProtocolT::kMacintoshSeparatorByteCount);
	itsDisconnectStr.Set(JMessageProtocolT::kStdDisconnectStr,
						 JMessageProtocolT::kStdDisconnectByteCount);
	UpdateTokenPattern();
}

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::UseDOSProtocol()
{
	itsSeparatorStr.Set(JMessageProtocolT::kDOSSeparatorStr,
						JMessageProtocolT::kDOSSeparatorByteCount);
	itsDisconnectStr.Set(JMessageProtocolT::kStdDisconnectStr,
						 JMessageProtocolT::kStdDisconnectByteCount);
	UpdateTokenPattern();
}

/******************************************************************************
 UpdateTokenPattern (private)

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::UpdateTokenPattern()
{
	JString pattern(false);
	pattern  = JRegex::BackslashForLiteral(itsSeparatorStr);
	pattern += "|";
	pattern += JRegex::BackslashForLiteral(itsDisconnectStr);
	itsTokenPattern.SetPatternOrDie(pattern);
}

/******************************************************************************
 Buffer size

	This controls how much is read from the connection at one time.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
JSize
JMessageProtocol<ACE_PEER_STREAM_2>::GetBufferSize()
	const
{
	return itsRecvBufferSize;
}

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::SetBufferSize
	(
	const JSize bufferSize
	)
{
	assert( bufferSize > 0 );

	itsRecvBufferSize = bufferSize;

	jdelete [] itsRecvBuffer;
	itsRecvBuffer = jnew JUtf8Byte [ itsRecvBufferSize ];
	assert( itsRecvBuffer != nullptr );
}

/******************************************************************************
 Wants blank messages

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
bool
JMessageProtocol<ACE_PEER_STREAM_2>::WantsBlankMessages()
	const
{
	return itsWantsBlankMessagesFlag;
}

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::SetWantsBlankMessages
	(
	const bool wantsBlanks
	)
{
	itsWantsBlankMessagesFlag = wantsBlanks;
}

/******************************************************************************
 ReceivedDisconnect

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
bool
JMessageProtocol<ACE_PEER_STREAM_2>::ReceivedDisconnect()
	const
{
	return itsReceivedDisconnectFlag;
}

/******************************************************************************
 SendDisconnect

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::SendDisconnect()
{
	assert( !itsDisconnectStr.IsEmpty() );

	if (!itsSentDisconnectFlag)
	{
		JNetworkProtocolBase<ACE_PEER_STREAM_2>::Send(itsDisconnectStr);
		itsSentDisconnectFlag = true;
	}
}

/******************************************************************************
 HasMessages

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
bool
JMessageProtocol<ACE_PEER_STREAM_2>::HasMessages()
	const
{
	return !itsMessageList.IsEmpty();
}

/******************************************************************************
 GetMessageCount

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
JSize
JMessageProtocol<ACE_PEER_STREAM_2>::GetMessageCount()
	const
{
	return itsMessageList.GetElementCount();
}

/******************************************************************************
 GetNextMessage

	Stores the next complete message in *message and removes it from the queue.
	Returns false if no complete messages are available.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
bool
JMessageProtocol<ACE_PEER_STREAM_2>::GetNextMessage
	(
	JString* message
	)
{
	if (!itsMessageList.IsEmpty())
	{
		*message = *itsMessageList.GetFirstElement();
		itsMessageList.DeleteElement(1);
		return true;
	}
	else
	{
		message->Clear();
		return false;
	}
}

/******************************************************************************
 PeekNextMessage

	Stores the next complete message in *message.
	Returns false if no complete messages are available.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
bool
JMessageProtocol<ACE_PEER_STREAM_2>::PeekNextMessage
	(
	JString* message
	)
{
	if (!itsMessageList.IsEmpty())
	{
		*message = *itsMessageList.GetFirstElement();
		return true;
	}
	else
	{
		message->Clear();
		return false;
	}
}

/******************************************************************************
 PeekPartialMessage

	Stores the message that is being received in *message.
	Returns false if the message is empty.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
bool
JMessageProtocol<ACE_PEER_STREAM_2>::PeekPartialMessage
	(
	JString* message
	)
{
	*message = itsRecvData;
	return ! message->IsEmpty();
}

/******************************************************************************
 SendMessage

	Sends the given data and then a separator.  The data can contain separators.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::SendMessage
	(
	const JString& message
	)
{
	if (!itsSentDisconnectFlag)
	{
		iovec buffer[2];
		buffer[0].iov_base = const_cast<char*>(message.GetBytes());
		buffer[0].iov_len  = message.GetByteCount();
		buffer[1].iov_base = const_cast<char*>(itsSeparatorStr.GetBytes());
		buffer[1].iov_len  = itsSeparatorStr.GetByteCount();

		JNetworkProtocolBase<ACE_PEER_STREAM_2>::Send(buffer, 2);
	}
}

/******************************************************************************
 SendData

	Sends the given data without a separator.  The data can contain separators.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
void
JMessageProtocol<ACE_PEER_STREAM_2>::SendData
	(
	const JString& data
	)
{
	if (!itsSentDisconnectFlag)
	{
		JNetworkProtocolBase<ACE_PEER_STREAM_2>::Send(data.GetBytes(), data.GetByteCount());
	}
}

/******************************************************************************
 handle_input (virtual)

	This is called when we receive data.  It is also safe for anybody else
	to call it.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
int
JMessageProtocol<ACE_PEER_STREAM_2>::handle_input
	(
	ACE_HANDLE
	)
{
	// protect against recursive calls

	if (itsCancelTaskFlag != nullptr)
	{
		return 0;
	}

	// We flush the system buffer even if we have received a disconnect.

	const ssize_t count = (ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::peer()).recv(itsRecvBuffer, itsRecvBufferSize);

	if (itsReceivedDisconnectFlag || count <= 0)
	{
		return 0;
	}

	itsByteBuffer.Append(std::span(itsRecvBuffer, count));
	itsRecvData.Append(itsByteBuffer.ExtractCharacters());

	JPtrArray<JString> list(JPtrArrayT::kDeleteAll);
	itsRecvData.Split(itsTokenPattern, &list, 0, true);

	if (itsTokenPattern.Match(*list.GetLastElement()))
	{
		itsRecvData.Clear();
	}
	else
	{
		itsRecvData = *list.GetLastElement();
		list.DeleteElement(list.GetElementCount());
	}

	if (!list.IsEmpty())
	{
		auto* msgList = jnew JPtrArray<JBroadcaster::Message>(JPtrArrayT::kDeleteAll);
		assert( msgList != nullptr );

		for (const auto* s : list)
		{
			if (BytesEqual(*s, itsDisconnectStr))
			{
				auto* m = jnew JMessageProtocolT::ReceivedDisconnect();
				assert( m != nullptr );
				msgList->Append(m);
				break;
			}
			else if (!BytesEqual(*s, itsSeparatorStr) &&
					 (!s->IsEmpty() || itsWantsBlankMessagesFlag))
			{
				auto* msg = jnew JString(*s);
				itsMessageList.Append(msg);

				auto* m = jnew JMessageProtocolT::MessageReady(*msg);
				assert( m != nullptr );
				msgList->Append(m);
			}
		}

		if (!msgList->IsEmpty())
		{
			itsCancelTaskFlag = jnew bool;
			*itsCancelTaskFlag = false;

			bool* cancelFlag = itsCancelTaskFlag;

			JScheduleTask([this, msgList, cancelFlag]()
			{
				if (*cancelFlag)
				{
					jdelete cancelFlag;
					jdelete msgList;
					return;
				}

				for (auto* msg : *msgList)
				{
					bool done = false;
					if (msg->Is(JMessageProtocolT::kReceivedDisconnect))
					{
						itsReceivedDisconnectFlag = true;
						itsRecvData.Clear();
						done = true;
					}

					Broadcast(*msg);

					if (*cancelFlag)
					{
						jdelete cancelFlag;
						jdelete msgList;
						return;
					}
					else if (done)
					{
						break;
					}
				}

				// we are still alive

				jdelete itsCancelTaskFlag;
				itsCancelTaskFlag = nullptr;

				jdelete msgList;
			});
			return 0;
		}

		jdelete msgList;
	}

	return 0;
}

/******************************************************************************
 BytesEqual (protected)

	Compare raw bytes because control characters are often zero-length in UTF-8.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
bool
JMessageProtocol<ACE_PEER_STREAM_2>::BytesEqual
	(
	const JString& s1,
	const JString& s2
	)
	const
{
	return s1.GetByteCount() == s2.GetByteCount() &&
				memcmp(s1.GetBytes(), s2.GetBytes(), s1.GetByteCount()) == 0;
}

#endif
