#ifndef _T_JAliasArray
#define _T_JAliasArray

/******************************************************************************
 JAliasArray.tmpl

	Template for an array of indices into a JArray.  The indices are
	sorted by applying a comparison function to the data in the JArray.
	This allows you to sort a list in more than one way without having to
	duplicate the data itself.

	We are obviously dead in the water if itsData is deleted.  Rather than
	making a mess of the interface and returning bool everywhere, we
	instead require that the JAliasArray be tossed when the data goes away.
	By blowing up in any member function instead of blowing up in
	ReceiveGoingAway(), we allow the data to be deleted before the
	JAliasArray.

	BASE CLASS = JCollection

	Copyright (C) 2001 by John Lindal.

 ******************************************************************************/

#include "JAliasArray.h"
#include "jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JAliasArray<T>::JAliasArray
	(
	JArray<T>*													data,
	const std::function<std::weak_ordering(const T&, const T&)>	compareFn,
	const JListT::SortOrder										order
	)
	:
	JCollection(),
	itsData(data),
	itsCompareFn(nullptr)
{
	assert( itsData != nullptr );

	itsIndexArray = jnew JArray<JIndex>(100);
	itsIndexArray->SetSortOrder(order);

	SetCompareFunction(compareFn);

	const JSize count = itsData->GetItemCount();
	for (JIndex i=1; i<=count; i++)
	{
		itsIndexArray->InsertSorted(i);		// faster than calling Sort() afterwards
	}

	SetItemCount(count);
	ListenTo(itsData);
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JAliasArray<T>::~JAliasArray()
{
	jdelete itsIndexArray;
	jdelete itsCompareFn;
}

/******************************************************************************
 GetData

 ******************************************************************************/

template <class T>
JArray<T>*
JAliasArray<T>::GetData()
{
	assert( itsData != nullptr );

	return itsData;
}

template <class T>
const JArray<T>&
JAliasArray<T>::GetData()
	const
{
	assert( itsData != nullptr );

	return *itsData;
}

/******************************************************************************
 GetItemIndex

	Returns the index into the data.

 ******************************************************************************/

template <class T>
JIndex
JAliasArray<T>::GetItemIndex
	(
	const JIndex index
	)
	const
{
	return itsIndexArray->GetItem(index);
}

/******************************************************************************
 GetItemIndexFromEnd

 ******************************************************************************/

template <class T>
JIndex
JAliasArray<T>::GetItemIndexFromEnd
	(
	const JIndex index
	)
	const
{
	return itsIndexArray->GetItem(GetIndexFromEnd(index));
}

/******************************************************************************
 GetItem

	Returns the actual data.

 ******************************************************************************/

template <class T>
const T
JAliasArray<T>::GetItem
	(
	const JIndex index
	)
	const
{
	assert( itsData != nullptr );

	return itsData->GetItem(GetItemIndex(index));
}

/******************************************************************************
 SetItem

 ******************************************************************************/

template <class T>
void
JAliasArray<T>::SetItem
	(
	const JIndex	index,
	const T&		data
	)
{
	assert( itsData != nullptr );

	itsData->SetItem(GetItemIndex(index), data);
}

/******************************************************************************
 GetFirstItem

 ******************************************************************************/

template <class T>
const T
JAliasArray<T>::GetFirstItem()
	const
{
	assert( itsData != nullptr );

	return itsData->GetItem(GetItemIndex(1));
}

/******************************************************************************
 GetLastItem

 ******************************************************************************/

template <class T>
const T
JAliasArray<T>::GetLastItem()
	const
{
	assert( itsData != nullptr );

	return itsData->GetItem(GetItemIndex(GetItemCount()));
}

/******************************************************************************
 GetItemFromEnd

 ******************************************************************************/

template <class T>
const T
JAliasArray<T>::GetItemFromEnd
	(
	const JIndex index
	)
	const
{
	assert( itsData != nullptr );

	return itsData->GetItem(GetItemIndex(GetIndexFromEnd(index)));
}

/******************************************************************************
 SetItemFromEnd

 ******************************************************************************/

template <class T>
void
JAliasArray<T>::SetItemFromEnd
	(
	const JIndex	index,
	const T&		data
	)
{
	assert( itsData != nullptr );
	assert( IndexValid(index) );	// avoid wrap of unsigned value

	itsData->SetItem(GetItemIndex(GetIndexFromEnd(index)), data);
}

/******************************************************************************
 Compare wrapper

	Converts indices in itsIndexArray to items from itsData.

 ******************************************************************************/

template <class T>
static std::weak_ordering
CompareWrapper
	(
	const std::function<std::weak_ordering(const T&, const T&)>& compare,

	const JArray<T>&	data,
	const JIndex&		i1,
	const JIndex&		i2,
	const T*			search
	)
{
	if (search == nullptr || (i1 > 0 && i2 > 0))
	{
		return compare(data.GetItem(i1), data.GetItem(i2));
	}
	else if (i1 == 0)
	{
		return compare(*search, data.GetItem(i2));
	}
	else	// i2 == 0
	{
		return compare(data.GetItem(i1), *search);
	}
}

template <class T>
void
JAliasArray<T>::InstallCompareWrapper
	(
	const T* search
	)
{
	itsIndexArray->SetCompareFunction([this, search](const JIndex& i1, const JIndex& i2)
	{
		return CompareWrapper(*itsCompareFn, *itsData, i1, i2, search);
	});
}

/******************************************************************************
 Compare function

 ******************************************************************************/

template <class T>
void
JAliasArray<T>::SetCompareFunction
	(
	const std::function<std::weak_ordering(const T&, const T&)> compareFn
	)
{
	assert( itsData != nullptr );
	assert( compareFn != nullptr );

	jdelete itsCompareFn;
	itsCompareFn = jnew std::function(compareFn);
	InstallCompareWrapper(nullptr);
	itsIndexArray->Sort();
}

/******************************************************************************
 Sort order

 ******************************************************************************/

template <class T>
JListT::SortOrder
JAliasArray<T>::GetSortOrder()
	const
{
	return itsIndexArray->GetSortOrder();
}

template <class T>
void
JAliasArray<T>::SetSortOrder
	(
	const JListT::SortOrder order
	)
{
	itsIndexArray->SetSortOrder(order);
	itsIndexArray->Sort();
}

/******************************************************************************
 SearchSorted

	Returns true if the specified target is found.

	"which" specifies what to return if more than one item matches
	the given target.

 ******************************************************************************/

template <class T>
bool
JAliasArray<T>::SearchSorted
	(
	const T&					target,
	const JListT::SearchReturn	which,
	JIndex*						index
	)
	const
{
	bool found;
	*index = SearchSortedOTI(target, which, &found);
	if (!found)
	{
		*index = 0;
	}
	return found;
}

/******************************************************************************
 SearchSortedOTI (virtual)

	Returns index where the item is or where it should be inserted in
	order to keep the list sorted.  If there is an item that matches the
	given one, *found is set to true.

	"which" specifies what to return if more than one item matches
	the given target.

 ******************************************************************************/

template <class T>
JIndex
JAliasArray<T>::SearchSortedOTI
	(
	const T&					target,
	const JListT::SearchReturn	which,
	bool*						found
	)
	const
{
	assert( itsData != nullptr );

	JAliasArray<T>* self = const_cast<JAliasArray<T>*>(this);

	self->InstallCompareWrapper(&target);
	const JIndex i = itsIndexArray->SearchSortedOTI(0, which, found);
	self->InstallCompareWrapper(nullptr);
	return i;
}

/******************************************************************************
 Receive (virtual protected)

	Stay synched with itsData.

 ******************************************************************************/

#define ADJUST_INDEX(m) \
	const JSize count = itsIndexArray->GetItemCount(); \
	JIndex* data      = const_cast<JIndex*>(itsIndexArray->GetCArray()); \
	for (JIndex _i=0; _i<count; _i++) \
	{ \
		m.AdjustIndex(data + _i); \
	}

template <class T>
void
JAliasArray<T>::Receive
	(
	JBroadcaster*	sender,
	const Message&	message
	)
{
	if (sender == itsData && message.Is(JListT::kItemsInserted))
	{
		auto& m = dynamic_cast<const JListT::ItemsInserted&>(message);
		ADJUST_INDEX(m);

		for (JIndex i = m.GetFirstIndex(); i <= m.GetLastIndex(); i++)
		{
			itsIndexArray->InsertSorted(i);
		}

		SetItemCount(GetItemCount() + m.GetCount());
	}
	else if (sender == itsData && message.Is(JListT::kItemsRemoved))
	{
		auto& m = dynamic_cast<const JListT::ItemsRemoved&>(message);

		const JSize count = itsIndexArray->GetItemCount();
		for (JIndex i=count; i>=1; i--)
		{
			JIndex index = itsIndexArray->GetItem(i);
			if (m.AdjustIndex(&index))
			{
				itsIndexArray->SetItem(i, index);
			}
			else
			{
				itsIndexArray->RemoveItem(i);
			}
		}

		SetItemCount(GetItemCount() - m.GetCount());
	}
	else if (sender == itsData && message.Is(JListT::kItemMoved))
	{
		auto& m = dynamic_cast<const JListT::ItemMoved&>(message);
		ADJUST_INDEX(m);
	}
	else if (sender == itsData && message.Is(JListT::kItemsSwapped))
	{
		auto& m = dynamic_cast<const JListT::ItemsSwapped&>(message);
		ADJUST_INDEX(m);
	}
	else if (sender == itsData && message.Is(JListT::kItemsChanged))
	{
		// Sort() would be O(N log N).  This method is O(N) + O(log N) = O(N).

		auto& m = dynamic_cast<const JListT::ItemsChanged&>(message);

		for (JIndex j=m.GetFirstIndex(); j<=m.GetLastIndex(); j++)
		{
			const JSize count = itsIndexArray->GetItemCount();
			for (JIndex i=1; i<=count; i++)
			{
				if (itsIndexArray->GetItem(i) == j)
				{
					itsIndexArray->RemoveItem(i);
					break;
				}
			}

			itsIndexArray->InsertSorted(j);
		}
	}
	else if (sender == itsData && message.Is(JListT::kSorted))
	{
		itsIndexArray->Sort();
	}

	else
	{
		JCollection::Receive(sender, message);
	}
}

#undef ADJUST_INDEX

/******************************************************************************
 ReceiveGoingAway (virtual protected)

 ******************************************************************************/

template <class T>
void
JAliasArray<T>::ReceiveGoingAway
	(
	JBroadcaster* sender
	)
{
	if (sender == itsData)
	{
		itsData = nullptr;
	}
	else
	{
		JCollection::ReceiveGoingAway(sender);
	}
}

#endif
