#ifndef _T_JRunArray
#define _T_JRunArray

/******************************************************************************
 JRunArray.tmpl

	JRunArray is a dynamic array optimized to conserve space where
	consecutive entries have the same value. Such a sequence of
	identical entries is called a run. Rather than storing N
	consecutive, identical entries, JRunArray stores the value once, 
	along with the length of the run.

	When using a JRunArray, operator== must be defined for the data type.

	gcc 2.7.2 does not implement static data for template classes, without
	which we cannot provide an efficient implementation of Sort().

	Implementation details:

	A JArray is used to store the run lengths + actual items.
	Thus, JRunArrays cannot store objects, only intrinisic types.

	BASE CLASS = JList

	Copyright (C) 1994-2018 by John Lindal.

 ******************************************************************************/

#include "jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JRunArray<T>::JRunArray
	(
	const JSize blockSize
	)
	:
	JList<T>()
{
	itsRuns = jnew JArray< JRunArrayItem<T> >(blockSize);
}

/******************************************************************************
 Copy constructor

 ******************************************************************************/

template <class T>
JRunArray<T>::JRunArray
	(
	const JRunArray<T>& source
	)
	:
	JList<T>(source)
{
	itsRuns = jnew JArray< JRunArrayItem<T> >(*source.itsRuns);
}

template <class T>
JRunArray<T>::JRunArray
	(
	const JRunArray<T>&	source,
	const JIndexRange&	range
	)
{
	itsRuns = jnew JArray< JRunArrayItem<T> >(source.itsRuns->GetBlockSize());

	JIndex runIndex = 1, firstIndexInRun = 1;
	IteratorInsertSlice(1, source, range, &runIndex, &firstIndexInRun);
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JRunArray<T>::~JRunArray()
{
	jdelete itsRuns;
}

/******************************************************************************
 Assignment operator

 ******************************************************************************/

template <class T>
JRunArray<T>&
JRunArray<T>::operator=
	(
	const JRunArray<T>& source
	)
{
	if (this == &source)
	{
		return *this;
	}

	JCollection::operator=(source);		// JList::operator= is private

	*itsRuns = *source.itsRuns;
	JRunArray<T>::ListAssigned(source);

	return *this;
}

/******************************************************************************
 PrependItem (virtual)

 ******************************************************************************/

template <class T>
void
JRunArray<T>::PrependItem
	(
	const T& data
	)
{
	PrependItems(data, 1);
}

/******************************************************************************
 PrependItems

	Prepend a run of items.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::PrependItems
	(
	const T&	data,
	const JSize	count
	)
{
	JIndex runIndex = 1, firstIndexInRun = 1;
	IteratorInsertItemsAtIndex(1, data, count, &runIndex, &firstIndexInRun);
}

/******************************************************************************
 PrependSlice

 ******************************************************************************/

template <class T>
void
JRunArray<T>::PrependSlice
	(
	const JRunArray<T>&	source,
	const JIndexRange&	range
	)
{
	if (range.IsEmpty())
	{
		return;
	}

	JIndex runIndex = 1, firstIndexInRun = 1;
	IteratorInsertSlice(1, source, range, &runIndex, &firstIndexInRun);
}

/******************************************************************************
 AppendItem (virtual)

 ******************************************************************************/

template <class T>
void
JRunArray<T>::AppendItem
	(
	const T& data
	)
{
	AppendItems(data, 1);
}

/******************************************************************************
 AppendItems

	Append a run of items.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::AppendItems
	(
	const T&	data,
	const JSize	count
	)
{
	const JSize totalCount = this->GetItemCount();

	JIndex runIndex, firstIndexInRun;
	FindRun(totalCount, &runIndex, &firstIndexInRun);

	IteratorInsertItemsAtIndex(totalCount+1, data, count, &runIndex, &firstIndexInRun);
}

/******************************************************************************
 AppendSlice

 ******************************************************************************/

template <class T>
void
JRunArray<T>::AppendSlice
	(
	const JRunArray<T>&	source,
	const JIndexRange&	range
	)
{
	if (range.IsEmpty())
	{
		return;
	}

	const JSize totalCount = this->GetItemCount();

	JIndex runIndex, firstIndexInRun;
	FindRun(totalCount, &runIndex, &firstIndexInRun);

	IteratorInsertSlice(totalCount+1, source, range, &runIndex, &firstIndexInRun);
}

/******************************************************************************
 IteratorInsertItemsAtIndex (private)

	Insert a run of items into the array at the specified index.
	Any items at or below itemIndex are moved down. If index is any value
	greater than the current size, then the items are appended to the end
	of the array.

	Assumes *runIndex,*firstIndexInRun refer to the run containing
	itemIndex and updates them based on what has to be done to the runs.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::IteratorInsertItemsAtIndex
	(
	const JIndex	itemIndex,
	const T&		data,
	const JSize		newItemCount,
	JIndex*			runIndex,
	JIndex*			firstIndexInRun
	)
{
	if (newItemCount > 0)
	{
		const JIndex trueItemIndex =
			PrivateInsertItemsAtIndex(itemIndex, data, newItemCount,
									  runIndex, firstIndexInRun);

		JListT::ItemsInserted message(trueItemIndex, newItemCount);
		JList<T>::NotifyIterators(message);
		JBroadcaster::Broadcast(message);
	}
}

/******************************************************************************
 IteratorInsertSlice (private)

	Optimized copy of a slice of another JRunArray.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::IteratorInsertSlice
	(
	const JIndex		itemIndex,
	const JRunArray<T>&	source,
	const JIndexRange&	range,
	JIndex*				runIndex,
	JIndex*				firstIndexInRun
	)
{
	JIndex startRun, firstIndexInStartRun;
	if (!source.FindRun(range.first, &startRun, &firstIndexInStartRun))
	{
		return;
	}

	JIndex endRun = startRun, firstIndexInEndRun = firstIndexInStartRun;
	if (!source.IncrementalFindRun(range.first, range.last, &endRun, &firstIndexInEndRun))
	{
		return;
	}

	if (startRun == endRun)
	{
		PrivateInsertItemsAtIndex(itemIndex,
								  source.GetRunData(startRun), range.GetCount(),
								  runIndex, firstIndexInRun);

		JListT::ItemsInserted message(itemIndex, range.GetCount());
		JList<T>::NotifyIterators(message);
		JBroadcaster::Broadcast(message);
		return;
	}

	const JRunArrayItem<T>* sourceRuns = source.itsRuns->GetCArray();

	JSize count = sourceRuns[startRun-1].length - (range.first - firstIndexInStartRun);
	JIndex i    = PrivateInsertItemsAtIndex(itemIndex, sourceRuns[startRun-1].data, count,
											runIndex, firstIndexInRun);
{
	JListT::ItemsInserted message(i, count);
	JList<T>::NotifyIterators(message);
	JBroadcaster::Broadcast(message);
}

	i += count;
	JIndex lastIndexInRun = *firstIndexInRun + GetRunLength(*runIndex) - 1;
	if (i > lastIndexInRun)
	{
		(*runIndex)++;
		*firstIndexInRun = lastIndexInRun + 1;
	}

	bool needSplit = i != *firstIndexInRun;

	for (JIndex j=startRun+1; j<endRun; j++)
	{
		count = sourceRuns[j-1].length;

		if (needSplit)
		{
			PrivateInsertItemsAtIndex(i, sourceRuns[j-1].data, count,
										 runIndex, firstIndexInRun);
			needSplit = false;
		}
		else
		{
			InsertRun(*runIndex, count, sourceRuns[j-1].data);
		}

		JListT::ItemsInserted message(i, count);
		JList<T>::NotifyIterators(message);
		JBroadcaster::Broadcast(message);

		i += count;
		(*runIndex)++;
		*firstIndexInRun = i;
	}

	count = range.last - firstIndexInEndRun + 1;
	PrivateInsertItemsAtIndex(i, sourceRuns[endRun-1].data, count,
								 runIndex, firstIndexInRun);
{
	JListT::ItemsInserted message(i, count);
	JList<T>::NotifyIterators(message);
	JBroadcaster::Broadcast(message);
}
}

/******************************************************************************
 PrivateInsertItemsAtIndex

	Returns the actual starting index so caller can broadcast the correct
	index.

	Assumes *runIndex,*firstIndexInRun refer to the run containing
	itemIndex and updates them based on what has to be done to the runs.

 ******************************************************************************/

template <class T>
JIndex
JRunArray<T>::PrivateInsertItemsAtIndex
	(
	const JIndex	itemIndex,
	const T&		data,
	const JSize		newItemCount,
	JIndex*			runIndex,
	JIndex*			firstIndexInRun
	)
{
	assert( itemIndex > 0 );
	assert( newItemCount > 0 );

	if (JList<T>::IndexValid(itemIndex))
	{
		if (data == GetRunData(*runIndex))
		{
			IncrementRunLength(*runIndex, newItemCount);
		}
		else
		{
			// We save a lot of code by incrementing the run length and
			// then asking SetValue to handle the details of splitting
			// the run.

			IncrementRunLength(*runIndex, 1);
			PrivateSetItem(itemIndex, data, runIndex, firstIndexInRun);

			// now insert the rest, if any, once we know the runs won't change

			if (newItemCount > 1)
			{
				IncrementRunLength(*runIndex, newItemCount-1);
			}
		}

		return itemIndex;
	}
	else
	{
		// We need to append the data to the end of the array.

		const JSize itemCount = this->GetItemCount();
		const JSize runCount     = GetRunCount();

		if (runCount > 0 && data == GetRunData(runCount))
		{
			IncrementRunLength(runCount, newItemCount);
		}
		else
		{
			InsertRun(runCount+1, newItemCount, data);
		}

		*runIndex        = GetRunCount();
		*firstIndexInRun = this->GetItemCount() - GetRunLength(*runIndex) + 1;

		return itemCount + 1;
	}
}

/******************************************************************************
 GetFirstItem (virtual)

 ******************************************************************************/

template <class T>
T
JRunArray<T>::GetFirstItem()
	const
{
	return GetRunData(1);
}

/******************************************************************************
 GetLastItem (virtual)

 ******************************************************************************/

template <class T>
T
JRunArray<T>::GetLastItem()
	const
{
	return GetRunData(itsRuns->GetItemCount());
}

/******************************************************************************
 IteratorSetItems (private)

 ******************************************************************************/

template <class T>
void
JRunArray<T>::IteratorSetItems
	(
	const JIndex	itemIndex,
	const T&		data,
	const JSize		count,
	JIndex*			runIndex,
	JIndex*			firstIndexInRun
	)
{
	bool changed = true;
	if (count == 1)
	{
		changed = PrivateSetItem(itemIndex, data, runIndex, firstIndexInRun);
	}
	else
	{
		PrivateRemoveItems(itemIndex, count, runIndex, firstIndexInRun);

		if (JList<T>::IndexValid(itemIndex))
		{
			// We save a lot of code by incrementing the run length and
			// then asking SetValue to handle the details of splitting
			// the run.

			IncrementRunLength(*runIndex, 1);
			PrivateSetItem(itemIndex, data, runIndex, firstIndexInRun);
			IncrementRunLength(*runIndex, count-1);
		}
		else
		{
			PrivateInsertItemsAtIndex(itemIndex, data, count, runIndex, firstIndexInRun);
		}
	}

	if (changed)
	{
		JListT::ItemsChanged message(itemIndex, count);
		JList<T>::NotifyIterators(message);
		JBroadcaster::Broadcast(message);
	}
}

/******************************************************************************
 PrivateSetItem (private)

	Returns true if the item actually changed.

	Assumes *runIndex,*firstIndexInRun refer to the run containing
	itemIndex and updates them based on what has to be done to the runs.

 ******************************************************************************/

template <class T>
bool
JRunArray<T>::PrivateSetItem
	(
	const JIndex	itemIndex,
	const T&		data,
	JIndex*			runIndex,
	JIndex*			firstIndexInRun
	)
{
	const T originalItem = GetRunData(*runIndex);
	if (data == originalItem)
	{
		return false;
	}

	const JSize origRunLength   = GetRunLength(*runIndex);
	const JIndex lastIndexInRun = *firstIndexInRun + origRunLength - 1;

	// check if the item can go in the previous run

	if (*runIndex > 1 && itemIndex == *firstIndexInRun &&
		data == GetRunData(*runIndex-1))
	{
		*firstIndexInRun -= GetRunLength(*runIndex-1);

		if (origRunLength == 1)
		{
			RemoveRun(*runIndex);
		}
		else
		{
			DecrementRunLength(*runIndex, 1);
		}

		(*runIndex)--;
		IncrementRunLength(*runIndex, 1);
	}

	// check if the item can go in the next run

	else if (*runIndex < GetRunCount() && itemIndex == lastIndexInRun &&
			 data == GetRunData(*runIndex+1))
	{
		IncrementRunLength(*runIndex+1, 1);

		if (origRunLength == 1)
		{
			RemoveRun(*runIndex, runIndex, firstIndexInRun);
		}
		else
		{
			DecrementRunLength(*runIndex, 1);
			*firstIndexInRun += GetRunLength(*runIndex);
			(*runIndex)++;
		}
	}

	// Since we can't merge it with the previous or the next run,
	// check if this is the only item in the run.

	else if (origRunLength == 1)
	{
		SetRunData(*runIndex, data);
	}

	// We have to break the run into two or more runs.

	else
	{
		// At this point we know the run size is greater than
		// one and if the item is at the start or end of the
		// run, we can't merge it with the previous or next run.
		// Therefore the item itself starts a new run, and there
		// may be a new run preceeding or following the item.

		if (itemIndex > *firstIndexInRun)
		{
			InsertRun(*runIndex, itemIndex - *firstIndexInRun, originalItem);
			(*runIndex)++;							// everything just moved down
		}
		if (itemIndex < lastIndexInRun)
		{
			InsertRun(*runIndex+1, lastIndexInRun - itemIndex, originalItem);
		}

		// The item now has the run all to itself. Update the value and length.

		JRunArrayItem<T> run = itsRuns->GetItem(*runIndex);

		this->SetItemCount(this->GetItemCount() - run.length + 1);

		run.length = 1;
		run.data   = data;
		itsRuns->SetItem(*runIndex, run);

		*firstIndexInRun = itemIndex;
	}

	return true;
}

/******************************************************************************
 IteratorRemoveItems (private)

 ******************************************************************************/

template <class T>
void
JRunArray<T>::IteratorRemoveItems
	(
	const JIndex	firstIndex,
	const JSize		count,
	JIndex*			runIndex,
	JIndex*			firstIndexInRun
	)
{
	if (firstIndex == 1 && count == this->GetItemCount())
	{
		RemoveAll();
	}
	else if (count > 0)
	{
		PrivateRemoveItems(firstIndex, count, runIndex, firstIndexInRun);

		JListT::ItemsRemoved message(firstIndex, count);
		JList<T>::NotifyIterators(message);
		JBroadcaster::Broadcast(message);
	}
}

/******************************************************************************
 PrivateRemoveItems (private)

	Assumes *runIndex,*firstIndexInRun refer to the run containing
	firstIndex and updates them based on what has to be done to the runs.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::PrivateRemoveItems
	(
	const JIndex	firstIndex,
	const JSize		count,
	JIndex*			runIndex,
	JIndex*			firstIndexInRun
	)
{
	if (firstIndex == 1 && count == this->GetItemCount())
	{
		RemoveAll();
		return;
	}

	JSize remainder = count;
	while (remainder > 0 && firstIndex <= this->GetItemCount())
	{
		const JSize rightCount =
			GetRunLength(*runIndex) - (firstIndex - *firstIndexInRun);

		if (*firstIndexInRun == firstIndex && rightCount <= remainder)
		{
			RemoveRun(*runIndex, runIndex, firstIndexInRun);
			remainder -= rightCount;
		}
		else if (*firstIndexInRun < firstIndex && rightCount <= remainder)
		{
			DecrementRunLength(*runIndex, rightCount);
			remainder       -= rightCount;
			*firstIndexInRun = firstIndex;
			(*runIndex)++;
		}
		else	// remainder < rightCount
		{
			DecrementRunLength(*runIndex, remainder);
			break;
		}
	}
}

/******************************************************************************
 RemoveAll (virtual)

 ******************************************************************************/

template <class T>
void
JRunArray<T>::RemoveAll()
{
	if (!this->IsEmpty())
	{
		JListT::ItemsRemoved message(1, this->GetItemCount());

		itsRuns->RemoveAll();
		this->SetItemCount(0);

		JList<T>::NotifyIterators(message);
		JBroadcaster::Broadcast(message);
	}
}

/******************************************************************************
 AllItemsEqual

 ******************************************************************************/

template <class T>
bool
JRunArray<T>::AllItemsEqual
	(
	T* data
	)
	const
{
	if (GetRunCount() == 1)
	{
		if (data != nullptr)
		{
			*data = GetRunData(1);
		}
		return true;
	}
	else
	{
		return false;
	}
}

/******************************************************************************
 SumItems

	Returns the sum of the specified range of items, using the given
	accumulator function.  We assume that the result is an integer because
	a JRunArray of floating point values would be silly, given the problem
	of round off errors.

 ******************************************************************************/

template <class T>
JInteger
JRunArray<T>::SumItems
	(
	const JIndex startIndex,
	const JIndex endIndex,
	JInteger (*value)(const T& data)
	)
	const
{
	JIndex index = startIndex;
	JInteger sum = 0;

	JIndex runIndex, firstIndexInRun;
	const bool found = FindRun(index, &runIndex, &firstIndexInRun);
	assert( found && JList<T>::IndexValid(endIndex) );

	const JSize runCount = GetRunCount();
	for (JIndex i=runIndex; i<=runCount && index <= endIndex; i++)
	{
		const JSize runLength = GetRunLength(i);
		const JInteger v      = value(GetRunData(i));

		const JIndex newIndex = (i == runIndex ? firstIndexInRun : index) + runLength;
		if (newIndex <= endIndex)
		{
			sum += v * (newIndex - index);
		}
		else	// newIndex > endIndex
		{
			sum += v * (endIndex+1 - index);
			break;
		}

		index = newIndex;
	}

	return sum;
}

/******************************************************************************
 FindPositiveSum

	Returns the index of the item that causes the sum, starting from
	startIndex, to exceed requestedSum.  *trueSum is the sum of the items
	up to, but not including, *endIndex.  This gives the correct behavior
	for determining which interval was clicked by a cursor.  To verify this,
	consider the case when all intervals have width one, and the left edge
	has coordinate zero.

	Returns false if the sum through the end of the array does not exceeed
	requestedSum.  In this case, *endIndex is the last item, and *trueSum
	is the sum up to, but not including, *endIndex.

	*** This function requires that requestedSum be positive.

 ******************************************************************************/

template <class T>
bool
JRunArray<T>::FindPositiveSum
	(
	const JInteger	requestedSum,
	const JIndex	startIndex,
	JIndex*			endIndex,
	JInteger*		trueSum,
	JInteger (*value)(const T& data)
	)
	const
{
	assert( requestedSum >= 0 );

	*endIndex = startIndex;
	*trueSum  = 0;

	JIndex runIndex, firstIndexInRun;
	const bool found = FindRun(*endIndex, &runIndex, &firstIndexInRun);
	assert( found );

	const JSize runCount = GetRunCount();
	for (JIndex i=runIndex; i<=runCount && *trueSum < requestedSum; i++)
	{
		const JSize runLength = GetRunLength(i);
		const JInteger v      = value(GetRunData(i));

		const JInteger newSum =
			*trueSum + v * (runLength - (i == runIndex ? startIndex - firstIndexInRun : 0));
		if (requestedSum < newSum)
		{
			assert( v > 0 /* this can only happen if v > 0 */ );

			const JSize deltaIndex = (requestedSum - *trueSum) / v;
			*endIndex             += deltaIndex;
			*trueSum              += v * deltaIndex;
			break;
		}
		else	// newSum <= requestedSum
		{
			*endIndex = (i == runIndex ? firstIndexInRun : *endIndex) + runLength;
			*trueSum  = newSum;

			if (i == runCount)		// return last item
			{
				(*endIndex)--;
				*trueSum -= v;
				return false;
			}
		}
	}

	return true;
}

/******************************************************************************
 GetBlockSize

	Get the block size used by the underlying JArray.

 ******************************************************************************/

template <class T>
JSize
JRunArray<T>::GetBlockSize()
	const
{
	return itsRuns->GetBlockSize();
}

/******************************************************************************
 SetBlockSize

	Set the block size used by the underlying JArray.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::SetBlockSize
	(
	const JSize newBlockSize
	)
{
	itsRuns->SetBlockSize(newBlockSize);
}

/******************************************************************************
 GetRunCount

 ******************************************************************************/

template <class T>
JSize
JRunArray<T>::GetRunCount()
	const
{
	return itsRuns->GetItemCount();
}

/******************************************************************************
 FindRun (private)

	Return the index of the run containing the item with the specified index.
	firstIndexInRun is updated with the index of the first item in the run.

	Returns false if itemIndex is not in the array.

	On the assumption that most run arrays have a relatively uniform
	distribution of runs (JTextEditor is a good example, JTableSelection
	with a rectangular selection is a counterexample), we start from the
	edge of the array that is closest to itemIndex.

 ******************************************************************************/

template <class T>
bool
JRunArray<T>::FindRun
	(
	const JIndex	itemIndex,

	JIndex*			runIndex,
	JIndex*			firstIndexInRun
	)
	const
{
	const JSize count = this->GetItemCount();
	if (itemIndex <= 1 + count/2)	// automatically catches count==0
	{
		*runIndex        = 1;
		*firstIndexInRun = 1;
		return IncrementalFindRun(1, itemIndex, runIndex, firstIndexInRun);
	}
	else
	{
		*runIndex         = GetRunCount();
		*firstIndexInRun  = count - GetRunLength(*runIndex) + 1;
		return IncrementalFindRun(count, itemIndex, runIndex, firstIndexInRun);
	}
}

/******************************************************************************
 IncrementalFindRun (private)

	Assuming that *runIndex,*firstIndexInRun correspond to origIndex,
	modify them to correspond to newIndex.

	Returns false if origIndex or newIndex is not in the array.

 ******************************************************************************/

template <class T>
bool
JRunArray<T>::IncrementalFindRun
	(
	const JIndex	origIndex,
	const JIndex	newIndex,

	JIndex*			runIndex,
	JIndex*			firstIndexInRun
	)
	const
{
	if (!JList<T>::IndexValid(origIndex) ||
		!JList<T>::IndexValid(newIndex))
	{
		return false;
	}
	else if (origIndex == newIndex)
	{
		return true;
	}

	assert( *firstIndexInRun <= origIndex );

	bool found = false;
	if (newIndex < origIndex)
	{
		const JRunArrayItem<T>* r = itsRuns->GetCArray() + *runIndex-1;

		for (JIndex i=*runIndex; i>=1; i--)
		{
			if (*firstIndexInRun <= newIndex)
			{
				*runIndex = i;
				found     = true;
				break;
			}
			if (i > 1)
			{
				r--;
				*firstIndexInRun -= r->length;
			}
		}
	}
	else if (origIndex < newIndex)
	{
		const JRunArrayItem<T>* r = itsRuns->GetCArray() + *runIndex-1;
		JIndex lastIndexInRun        = *firstIndexInRun - 1;

		const JSize runCount = itsRuns->GetItemCount();
		for (JIndex i=*runIndex; i<=runCount; i++, r++)
		{
			lastIndexInRun += r->length;
			if (newIndex <= lastIndexInRun)
			{
				*runIndex        = i;
				*firstIndexInRun = lastIndexInRun - r->length + 1;
				found            = true;
				break;
			}
		}
	}

	return found;
}

/******************************************************************************
 InsertRun (private)

 ******************************************************************************/

template <class T>
void
JRunArray<T>::InsertRun
	(
	const JIndex	runIndex,
	const JSize		newRunLength,
	const T&		data
	)
{
	JRunArrayItem<T> run(newRunLength, data);
	itsRuns->InsertItemAtIndex(runIndex, run);

	this->SetItemCount(this->GetItemCount() + newRunLength);
}

/******************************************************************************
 RemoveRun (private)

	This can result in the merging of two adjacent runs
	if they have the same value.

	newRunIndex,newFirstInRun can be nullptr.  If they are not, they must
	apply to the run that is being removed.  They are then updated if runs
	end up being merged.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::RemoveRun
	(
	const JIndex	runIndex,
	JIndex*			newRunIndex,
	JIndex*			newFirstInRun
	)
{
	assert( newRunIndex == nullptr || (*newRunIndex == runIndex && newFirstInRun != nullptr) );

	this->SetItemCount(this->GetItemCount() - GetRunLength(runIndex));
	itsRuns->RemoveItem(runIndex);

	// If the specified run was between two runs with the same value,
	// then we can merge them.

	if (1 < runIndex && runIndex <= GetRunCount() &&
		GetRunData(runIndex-1) == GetRunData(runIndex))
	{
		if (newRunIndex != nullptr)
		{
			*newFirstInRun -= GetRunLength(runIndex-1);
			(*newRunIndex)--;
		}

		const JSize runLength = GetRunLength(runIndex);
		IncrementRunLength(runIndex-1, runLength);

		this->SetItemCount(this->GetItemCount() - runLength);
		itsRuns->RemoveItem(runIndex);
	}
}

/******************************************************************************
 GetRunLength (private)

 ******************************************************************************/

template <class T>
JSize
JRunArray<T>::GetRunLength
	(
	const JIndex runIndex
	)
	const
{
	assert( itsRuns->IndexValid(runIndex) );
	const JRunArrayItem<T>* runData = itsRuns->GetCArray();
	return runData[runIndex-1].length;
}

/******************************************************************************
 SetRunLength (private)

	Set the length of the specified run, and keep itemCount up to date.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::SetRunLength
	(
	const JIndex	runIndex,
	const JSize		newLength
	)
{
	JRunArrayItem<T> run = itsRuns->GetItem(runIndex);

	this->SetItemCount(this->GetItemCount() - run.length + newLength);

	run.length = newLength;
	itsRuns->SetItem(runIndex, run);
}

/******************************************************************************
 IncrementRunLength (private)

	Add value of "extraItemCount" to the length of the specified run.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::IncrementRunLength
	(
	const JIndex	runIndex,
	const JSize		delta
	)
{
	SetRunLength(runIndex, GetRunLength(runIndex) + delta);
}

/******************************************************************************
 DecrementRunLength (private)

	Subtract value of "extraItemCount" from the length of the specified run.

 ******************************************************************************/

template <class T>
void
JRunArray<T>::DecrementRunLength
	(
	const JIndex	runIndex,
	const JSize		delta
	)
{
	SetRunLength(runIndex, GetRunLength(runIndex) - delta);
}

/******************************************************************************
 GetRunData (private)

 ******************************************************************************/

template <class T>
const T&
JRunArray<T>::GetRunData
	(
	const JIndex runIndex
	)
	const
{
	assert( itsRuns->IndexValid(runIndex) );
	const JRunArrayItem<T>* runData = itsRuns->GetCArray();
	return runData[runIndex-1].data;
}

/******************************************************************************
 SetRunData (private)

 ******************************************************************************/

template <class T>
void
JRunArray<T>::SetRunData
	(
	const JIndex	runIndex,
	const T&		data
	)
{
	JRunArrayItem<T> run = itsRuns->GetItem(runIndex);
	run.data = data;
	itsRuns->SetItem(runIndex, run);
}

/******************************************************************************
 NewIterator

 ******************************************************************************/

template <class T>
JListIterator<T>*
JRunArray<T>::NewIterator
	(
	const JListT::Position	start,
	const JIndex			index
	)
{
	return jnew JRunArrayIterator<T>(this, start, index);
}

template <class T>
JListIterator<T>*
JRunArray<T>::NewIterator
	(
	const JListT::Position	start,
	const JIndex			index
	)
	const
{
	return jnew JRunArrayIterator<T>(*this, start, index);
}

/******************************************************************************
 Range-based for loop

 ******************************************************************************/

template <class T>
JRunArrayIterator<T>
begin
	(
	const JRunArray<T>& a
	)
{
	return JRunArrayIterator<T>(a, JListT::kStartAtBeginning);
}

template <class T>
JRunArrayIterator<T>
end
	(
	const JRunArray<T>& a
	)
{
	return JRunArrayIterator<T>(a, JListT::kStartAtEnd);
}

#endif
