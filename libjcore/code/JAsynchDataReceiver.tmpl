#ifndef _T_JAsynchDataReceiver
#define _T_JAsynchDataReceiver

/******************************************************************************
 JAsynchDataReceiver.tmpl

	Receives data asynchronously and broadcasts.

	BASE CLASS = ACE_Svc_Handler, virtual JBroadcaster

	Copyright (C) 1999 by John Lindal.

 ******************************************************************************/

#include "JAsynchDataReceiver.h"
#include "jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
JAsynchDataReceiver<ACE_PEER_STREAM_2>::JAsynchDataReceiver()
	:
	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>(),
	itsByteBuffer(JAsynchDataReceiverT::kDefaultBufferSize)
{
	JAsynchDataReceiverX();
}

template <ACE_PEER_STREAM_1>
JAsynchDataReceiver<ACE_PEER_STREAM_2>::JAsynchDataReceiver
	(
	const ACE_HANDLE fd
	)
	:
	ACE_Svc_Handler<ACE_PEER_STREAM_2,ACE_SYNCH>(),
	itsByteBuffer(JAsynchDataReceiverT::kDefaultBufferSize)
{
	JAsynchDataReceiverX();

	ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::set_handle(fd);
	ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::open(nullptr);
}

// private

template <ACE_PEER_STREAM_1>
void
JAsynchDataReceiver<ACE_PEER_STREAM_2>::JAsynchDataReceiverX()
{
	itsRecvBufferSize = JAsynchDataReceiverT::kDefaultBufferSize;

	itsRecvBuffer = jnew JUtf8Byte [ itsRecvBufferSize ];
	assert( itsRecvBuffer != nullptr );

	itsInHandleInputFlag = false;
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
JAsynchDataReceiver<ACE_PEER_STREAM_2>::~JAsynchDataReceiver()
{
	jdelete [] itsRecvBuffer;
}

/******************************************************************************
 Buffer size

	This controls how much is read from the connection at one time.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
JSize
JAsynchDataReceiver<ACE_PEER_STREAM_2>::GetBufferSize()
	const
{
	return itsRecvBufferSize;
}

template <ACE_PEER_STREAM_1>
void
JAsynchDataReceiver<ACE_PEER_STREAM_2>::SetBufferSize
	(
	const JSize bufferSize
	)
{
	assert( bufferSize > 0 );

	itsRecvBufferSize = bufferSize;

	jdelete [] itsRecvBuffer;
	itsRecvBuffer = jnew JUtf8Byte [ itsRecvBufferSize ];
	assert( itsRecvBuffer != nullptr );
}

/******************************************************************************
 handle_input (virtual)

	This is called when we receive data.  It is also safe for anybody else
	to call it.

 ******************************************************************************/

template <ACE_PEER_STREAM_1>
int
JAsynchDataReceiver<ACE_PEER_STREAM_2>::handle_input
	(
	ACE_HANDLE
	)
{
	// protect against recursive calls

	if (itsInHandleInputFlag)
		{
		return 0;
		}
	itsInHandleInputFlag = true;

	// Read the available data.

	const ssize_t count = (ACE_Svc_Handler<ACE_PEER_STREAM_2, ACE_SYNCH>::peer()).recv(itsRecvBuffer, itsRecvBufferSize);
	if (count > 0)
		{
		itsByteBuffer.Append(itsRecvBuffer, count);

		const JString data = itsByteBuffer.ExtractCharacters();
		Broadcast(JAsynchDataReceiverT::DataReady(data));

//		std::cerr << "read:\n---\n" << data << "\n---" << std::endl;
		}
	else
		{
//		std::cerr << "read: " << count << std::endl;
//		std::cerr << "err:  " << jerrno() << std::endl;
		}

	itsInHandleInputFlag = false;
	return 0;
}

#endif
