#ifndef _T_JLinkedList
#define _T_JLinkedList

/******************************************************************************
 JLinkedList.tmpl

							The JLinkedList Template Class

	Template for a dynamically sized linked list.

	Since the actual data is stored, this is only good for structs.
	To store objects, use the JPtrArray template class.

	BASE CLASS = JList

	Copyright (C) 1994-2018 by John Lindal.

 ******************************************************************************/

#include "JLinkedList.h"
#include "JMinMax.h"
#include "jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JLinkedList<T>::JLinkedList()
	:
	JList<T>()
{
	itsFirstItem = nullptr;
	itsLastItem  = nullptr;
}

/******************************************************************************
 Copy constructor

 ******************************************************************************/

template <class T>
JLinkedList<T>::JLinkedList
	(
	const JLinkedList<T>& source
	)
	:
	JList<T>(source)
{
	itsFirstItem = nullptr;
	itsLastItem  = nullptr;
	CopyList(source);
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JLinkedList<T>::~JLinkedList()
{
	DeleteAll();
}

/******************************************************************************
 Assignment operator

 ******************************************************************************/

template <class T>
JLinkedList<T>&
JLinkedList<T>::operator=
	(
	const JLinkedList<T>& source
	)
{
	if (this == &source)
	{
		return *this;
	}

	DeleteAll();

	JCollection::operator=(source);		// JList::operator= is private

	CopyList(source);
	JLinkedList<T>::ListAssigned(source);

	return *this;
}

/******************************************************************************
 CopyList (private)

	Copies the list data from source.

	*** Caller must make sure *this is empty.

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::CopyList
	(
	const JLinkedList<T>& source
	)
{
	assert( itsFirstItem == nullptr );
	assert( itsLastItem  == nullptr );

	JLinkedListItem<T>* sourceItem = source.itsFirstItem;
	JLinkedListItem<T>* prev       = nullptr;
	JLinkedListItem<T>* newItem;

	while (sourceItem != nullptr)
	{
		newItem       = jnew JLinkedListItem<T>(sourceItem->data);
		newItem->prev = prev;			// link to previous item
		newItem->next = nullptr;		// no initial link

		if (prev != nullptr)
		{
			prev->next = newItem;		// set up link from previous item
		}
		else
		{
			itsFirstItem = newItem;		// save link to first item
		}

		sourceItem = sourceItem->next;
		prev       = newItem;
	}

	itsLastItem = prev;					// save link to last item
}

/******************************************************************************
 GetFirstItem (virtual)

 ******************************************************************************/

template <class T>
T
JLinkedList<T>::GetFirstItem()
	const
{
	assert( itsFirstItem != nullptr );
	return itsFirstItem->data;
}

/******************************************************************************
 GetLastItem (virtual)

 ******************************************************************************/

template <class T>
T
JLinkedList<T>::GetLastItem()
	const
{
	assert( itsLastItem != nullptr );
	return itsLastItem->data;
}

/******************************************************************************
 PrependItem (virtual)

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::PrependItem
	(
	const T& data
	)
{
	auto* newItem = jnew JLinkedListItem<T>(data);
	newItem->prev = nullptr;
	newItem->next = itsFirstItem;

	if (itsFirstItem != nullptr)
	{
		itsFirstItem->prev = newItem;
	}
	else
	{
		itsLastItem = newItem;
	}
	itsFirstItem = newItem;

	this->ItemAdded();

	JListT::ItemsInserted message(1, 1);
	JBroadcaster::Broadcast(message);
	JList<T>::NotifyIterators(message);
}

/******************************************************************************
 AppendItem (virtual)

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::AppendItem
	(
	const T& data
	)
{
	auto* newItem = jnew JLinkedListItem<T>(data);
	newItem->prev = itsLastItem;
	newItem->next = nullptr;

	if (itsLastItem != nullptr)
	{
		itsLastItem->next = newItem;
	}
	else
	{
		itsFirstItem = newItem;
	}
	itsLastItem = newItem;

	this->ItemAdded();

	JListT::ItemsInserted message(this->GetItemCount(), 1);
	JBroadcaster::Broadcast(message);
	JList<T>::NotifyIterators(message);
}

/******************************************************************************
 RemoveAll (virtual)

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::RemoveAll()
{
	if (!this->IsEmpty())
	{
		JListT::ItemsRemoved message(1, this->GetItemCount());

		DeleteAll();

		JBroadcaster::Broadcast(message);
		JList<T>::NotifyIterators(message);
	}
}

/******************************************************************************
 DeleteAll (private)

	Delete all the items in the list.

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::DeleteAll()
{
	DeleteChain(itsFirstItem);

	itsFirstItem = nullptr;
	itsLastItem  = nullptr;
	this->SetItemCount(0);
}

/******************************************************************************
 DeleteChain (private)

	Delete the chain of items that starts with the given item.

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::DeleteChain
	(
	JLinkedListItem<T>* firstItem
	)
{
	while (firstItem != nullptr)
	{
		JLinkedListItem<T>* next = firstItem->next;
		jdelete firstItem;
		firstItem = next;
	}
}

/******************************************************************************
 IteratorInsertItemAfter (private)

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::IteratorInsertItemAfter
	(
	const JIndex			index,
	const T&				data,
	JLinkedListItem<T>*	prev
	)
{
	JLinkedListItem<T>* next    = prev->next;
	JLinkedListItem<T>* newItem = jnew JLinkedListItem<T>(data);

	newItem->prev = prev;
	newItem->next = next;

	prev->next = newItem;
	if (next != nullptr)
	{
		next->prev = newItem;
	}
	else
	{
		itsLastItem = newItem;
	}

	this->ItemAdded();

	JListT::ItemsInserted message(index+1, 1);
	JBroadcaster::Broadcast(message);
	JList<T>::NotifyIterators(message);
}

/******************************************************************************
 IteratorRemovePrevItems (private)

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::IteratorRemovePrevItems
	(
	const JIndex			lastIndex,
	const JSize				origCount,
	JLinkedListItem<T>*	origItem
	)
{
	const JSize totalCount = this->GetItemCount();
	if (lastIndex == totalCount && origCount >= totalCount)
	{
		RemoveAll();
	}
	else if (origCount > 0)
	{
		JIndex firstIndex = lastIndex;
		JSize count       = 1;
		while (origItem->prev != nullptr && count < origCount)
		{
			origItem = origItem->prev;
			firstIndex--;
			count++;
		}

		DeleteChain(UnlinkNextItems(firstIndex, count, origItem));

		JListT::ItemsRemoved message(firstIndex, count);
		JBroadcaster::Broadcast(message);
		JList<T>::NotifyIterators(message);
	}
}

/******************************************************************************
 IteratorRemoveNextItems (private)

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::IteratorRemoveNextItems
	(
	const JIndex			firstIndex,
	const JSize				count,
	JLinkedListItem<T>*	origItem
	)
{
	if (firstIndex == 1 && count >= this->GetItemCount())
	{
		RemoveAll();
	}
	else if (count > 0)
	{
		DeleteChain(UnlinkNextItems(firstIndex, count, origItem));

		JListT::ItemsRemoved message(firstIndex, count);
		JBroadcaster::Broadcast(message);
		JList<T>::NotifyIterators(message);
	}
}

/******************************************************************************
 IteratorSetItem (private)

 ******************************************************************************/

template <class T>
void
JLinkedList<T>::IteratorSetItem
	(
	const JIndex			index,
	const T&				data,
	JLinkedListItem<T>*	listItem
	)
{
	listItem->data = data;
	JBroadcaster::Broadcast(JListT::ItemsChanged(index, 1));
}

/******************************************************************************
 UnlinkNextItems (private)

	Unlink the specified items from the list and return the first one.

	If origItem != nullptr, it is assumed to be the first item to remove.

 ******************************************************************************/

template <class T>
JLinkedListItem<T>*
JLinkedList<T>::UnlinkNextItems
	(
	const JIndex			firstIndex,
	const JSize				origCount,
	JLinkedListItem<T>*	origItem
	)
{
	assert( this->IndexValid(firstIndex) );

	const JSize itemCount = this->GetItemCount(),
				lastIndex    = JMin(itemCount, firstIndex + origCount-1),
				count        = lastIndex - firstIndex + 1;

	JLinkedListItem<T>* result = nullptr;

	if (count == itemCount)
	{
		result          = itsFirstItem;
		itsFirstItem = nullptr;
		itsLastItem  = nullptr;
	}
	else if (firstIndex == 1)
	{
		result = itsFirstItem;
		for (JIndex i=1; i<=count; i++)
		{
			itsFirstItem = itsFirstItem->next;
		}
		itsFirstItem->prev->next = nullptr;
		itsFirstItem->prev       = nullptr;
	}
	else if (lastIndex == itemCount)
	{
		for (JIndex i=1; i<=count; i++)
		{
			itsLastItem = itsLastItem->prev;
		}
		result               = itsLastItem->next;
		result->prev         = nullptr;
		itsLastItem->next = nullptr;
	}
	else
	{
		JLinkedListItem<T>* prev   = origItem->prev;
		JLinkedListItem<T>* theItem = prev->next;

		result       = theItem;
		result->prev = nullptr;

		for (JIndex i=1; i<=count; i++)
		{
			theItem = theItem->next;
		}
		theItem->prev->next = nullptr;

		prev->next    = theItem;
		theItem->prev = prev;
	}

	this->SetItemCount(itemCount - count);

	return result;
}

/******************************************************************************
 IteratorFindItem (private)

 ******************************************************************************/

template <class T>
JLinkedListItem<T>*
JLinkedList<T>::IteratorFindItem
	(
	const JIndex index
	)
	const
{
	assert( this->IndexValid(index) );

	const JSize itemCount = this->GetItemCount();
	if (index < itemCount/2)
	{
		JLinkedListItem<T>* listItem = itsFirstItem;

		// traverse the list forward
		// when i == index, we have found the item

		for (JIndex i=1; i<index; i++)
		{
			listItem = listItem->next;
		}

		return listItem;
	}
	else
	{
		JLinkedListItem<T>* listItem = itsLastItem;

		// traverse the list backward
		// when i == index, we have found the item

		for (JIndex i=itemCount; i>index; i--)
		{
			listItem = listItem->prev;
		}

		return listItem;
	}
}

/******************************************************************************
 NewIterator (virtual)

 ******************************************************************************/

template <class T>
JListIterator<T>*
JLinkedList<T>::NewIterator
	(
	const JListT::Position	start,
	const JIndex			index
	)
{
	return jnew JLinkedListIterator<T>(this, start, index);
}

template <class T>
JListIterator<T>*
JLinkedList<T>::NewIterator
	(
	const JListT::Position	start,
	const JIndex			index
	)
	const
{
	return jnew JLinkedListIterator<T>(*this, start, index);
}

/******************************************************************************
 Range-based for loop

 ******************************************************************************/

template <class T>
JLinkedListIterator<T>
begin
	(
	const JLinkedList<T>& list
	)
{
	return JLinkedListIterator<T>(list, JListT::kStartAtBeginning);
}

template <class T>
JLinkedListIterator<T>
end
	(
	const JLinkedList<T>& list
	)
{
	return JLinkedListIterator<T>(list, JListT::kStartAtEnd);
}

#endif
