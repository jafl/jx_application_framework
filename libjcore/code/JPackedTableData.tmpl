#ifndef _T_JPackedTableData
#define _T_JPackedTableData

/******************************************************************************
 JPackedTableData.tmpl

	Template for storing values and structs in a table.
	The data is grouped by column into a single JRunArray.

	*** Since we use a JRunArray, this class cannot be use to store objects.
		Use JObjTableData instead.

	BASE CLASS = JTableData

	Copyright (C) 1997 by John Lindal & Glenn Bach.

 ******************************************************************************/

#include "jx-af/jcore/JPackedTableData.h"
#include "jx-af/jcore/JTable.h"
#include "jx-af/jcore/JMinMax.h"
#include "jx-af/jcore/jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JPackedTableData<T>::JPackedTableData
	(
	const T& defValue
	)
	:
	JTableData(),
	itsDefValue(defValue)
{
	itsData = jnew JRunArray< T >;
	assert( itsData != nullptr );
}

/******************************************************************************
 Copy constructor

 ******************************************************************************/

template <class T>
JPackedTableData<T>::JPackedTableData
	(
	const JPackedTableData<T>& source
	)
	:
	JTableData(source),
	itsDefValue(source.itsDefValue)
{
	itsData = jnew JRunArray< T >(*(source.itsData));
	assert( itsData != nullptr );
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JPackedTableData<T>::~JPackedTableData()
{
	jdelete itsData;
}

/******************************************************************************
 GetDefaultValue

 ******************************************************************************/

template <class T>
const T
JPackedTableData<T>::GetDefaultValue()
	const
{
	return itsDefValue;
}

/******************************************************************************
 SetDefaultValue

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::SetDefaultValue
	(
	const T& data
	)
{
	itsDefValue = data;
}

/******************************************************************************
 GetData

 ******************************************************************************/

template <class T>
const JRunArray< T >&
JPackedTableData<T>::GetData()
	const
{
	return *itsData;
}

/******************************************************************************
 GetElement

 ******************************************************************************/

template <class T>
T
JPackedTableData<T>::GetElement
	(
	const JIndex row,
	const JIndex col
	)
	const
{
	assert( RowIndexValid(row) && ColIndexValid(col) );

	const JIndex index = RCToI(row,col);

	JRunArrayIterator<T> iter(itsData, kJIteratorStartBefore, index);
	T element;
	iter.Next(&element);

	return element;
}

template <class T>
T
JPackedTableData<T>::GetElement
	(
	const JPoint& cell
	)
	const
{
	return GetElement(cell.y, cell.x);
}

/******************************************************************************
 SetElement

 ******************************************************************************/

#pragma GCC diagnostic push
#if defined __GNUG__ && ! defined __clang__
#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
#endif

template <class T>
void
JPackedTableData<T>::SetElement
	(
	const JIndex	row,
	const JIndex	col,
	const T&		data
	)
{
	assert( RowIndexValid(row) && ColIndexValid(col) );
	const JIndex index = RCToI(row,col);

	JRunArrayIterator<T> iter(itsData, kJIteratorStartBefore, index);
	T origData;
	iter.Next(&origData, kJIteratorStay);

	if (data != origData)
	{
		iter.SetNext(data);
		Broadcast(JTableData::RectChanged(row,col));
	}
}

#pragma GCC diagnostic pop

template <class T>
void
JPackedTableData<T>::SetElement
	(
	const JPoint&	cell,
	const T&		data
	)
{
	SetElement(cell.y, cell.x, data);
}

/******************************************************************************
 GetRow

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::GetRow
	(
	const JIndex	index,
	JList<T>*	rowData
	)
	const
{
	assert( RowIndexValid(index) );

	rowData->RemoveAll();

	const JSize colCount = GetColCount();
	for (JIndex i=1; i<=colCount; i++)
	{
		rowData->InsertElementAtIndex(i, GetElement(index,i));
	}
}

/******************************************************************************
 SetRow

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::SetRow
	(
	const JIndex			index,
	const JList<T>&	rowData
	)
{
	const JSize colCount = GetColCount();
	assert( RowIndexValid(index) );
	assert( rowData.GetElementCount() == colCount );

	for (JIndex i=1; i<=colCount; i++)
	{
		itsData->SetElement(RCToI(index,i), rowData.GetElement(i));
	}

	Broadcast(JTableData::RectChanged(JRect(index, 1, index+1, colCount+1)));
}

template <class T>
void
JPackedTableData<T>::SetRow
	(
	const JIndex	index,
	const T&		data
	)
{
	SetPartialRow(index, 1, GetColCount(), data);
}

/******************************************************************************
 SetPartialRow

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::SetPartialRow
	(
	const JIndex	rowIndex,
	const JIndex	firstColIndex,
	const JIndex	lastColIndex,
	const T&		data
	)
{
	assert( RowIndexValid(rowIndex) &&
			ColIndexValid(firstColIndex) && ColIndexValid(lastColIndex) &&
			firstColIndex <= lastColIndex );

	JRunArrayIterator<T> iter(itsData);

	for (JIndex i=firstColIndex; i<=lastColIndex; i++)
	{
		iter.MoveTo(kJIteratorStartBefore, RCToI(rowIndex,i));
		iter.SetNext(data);
	}

	Broadcast(JTableData::RectChanged(
		JRect(rowIndex, firstColIndex, rowIndex+1, lastColIndex+1)));
}

/******************************************************************************
 GetCol

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::GetCol
	(
	const JIndex	index,
	JList<T>*	colData
	)
	const
{
	assert( ColIndexValid(index) );

	colData->RemoveAll();

	const JSize rowCount = GetRowCount();
	for (JIndex i=1; i<=rowCount; i++)
	{
		colData->InsertElementAtIndex(i, GetElement(i,index));
	}
}

/******************************************************************************
 SetCol

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::SetCol
	(
	const JIndex			index,
	const JList<T>&	colData
	)
{
	const JSize rowCount = GetRowCount();
	assert( ColIndexValid(index) );
	assert( colData.GetElementCount() == rowCount );

	for (JIndex i=1; i<=rowCount; i++)
	{
		itsData->SetElement(RCToI(i,index), colData.GetElement(i));
	}

	Broadcast(JTableData::RectChanged(JRect(1, index, rowCount+1, index+1)));
}

template <class T>
void
JPackedTableData<T>::SetCol
	(
	const JIndex	index,
	const T&		data
	)
{
	SetPartialCol(index, 1, GetRowCount(), data);
}

/******************************************************************************
 SetPartialCol

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::SetPartialCol
	(
	const JIndex	colIndex,
	const JIndex	firstRowIndex,
	const JIndex	lastRowIndex,
	const T&		data
	)
{
	SetRect(JRect(firstRowIndex, colIndex, lastRowIndex+1, colIndex+1), data);
}

/******************************************************************************
 SetRect

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::SetRect
	(
	const JRect&	rect,
	const T&		data
	)
{
	SetRect(rect.left, rect.top, rect.width(), rect.height(), data);
}

template <class T>
void
JPackedTableData<T>::SetRect
	(
	const JCoordinate	x,
	const JCoordinate	y,
	const JCoordinate	w,
	const JCoordinate	h,
	const T&			data
	)
{
	assert( w > 0 && h > 0 );

	const JIndex x2 = x + w - 1;
	const JIndex y2 = y + h - 1;

	assert( RowIndexValid(y)  && ColIndexValid(x) &&
			RowIndexValid(y2) && ColIndexValid(x2) );

	JRunArrayIterator<T> iter(itsData);

	for (JIndex j=x; j<=x2; j++)
	{
		iter.MoveTo(kJIteratorStartBefore, RCToI(y,j));
		for (JIndex i=y; i<=y2; i++)
		{
			iter.SetNext(data);
		}
	}

	Broadcast(JTableData::RectChanged(JRect(y,x,y2+1,x2+1)));
}

/******************************************************************************
 ApplyToRect

	This ought to be done one -run- at a time, and should be implemented
	in JRunArray.

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::ApplyToRect
	(
	const JRect& rect,
	T (*f)(const T&)
	)
{
	ApplyToRect(rect.left, rect.top, rect.width(), rect.height(), f);
}

template <class T>
void
JPackedTableData<T>::ApplyToRect
	(
	const JCoordinate x,
	const JCoordinate y,
	const JCoordinate w,
	const JCoordinate h,
	T (*f)(const T&)
	)
{
	assert( w > 0 && h > 0 );

	const JIndex x2 = x + w - 1;
	const JIndex y2 = y + h - 1;

	assert( RowIndexValid(y)  && ColIndexValid(x) &&
			RowIndexValid(y2) && ColIndexValid(x2) );

	JRunArrayIterator<T> iter(itsData);
	T element;

	for (JIndex j=x; j<=x2; j++)
	{
		for (JIndex i=y; i<=y2; i++)
		{
			iter.MoveTo(kJIteratorStartBefore, RCToI(i,j));
			iter.Next(&element, kJIteratorStay);
			iter.SetNext(f(element));
		}
	}

	Broadcast(JTableData::RectChanged(JRect(y,x,y2+1,x2+1)));
}

/******************************************************************************
 InsertRows

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::InsertRows
	(
	const JIndex	index,
	const JSize		count,
	const JList<T>*	initData
	)
{
	assert( initData == nullptr || initData->GetElementCount() == GetColCount() );

	if (count > 0)
	{
		const JIndex trueIndex = JMin(index, GetRowCount()+1);

		JRunArrayIterator<T> iter(itsData);

		JListIterator<T>* initIter = nullptr;
		if (initData != nullptr)
		{
			initIter = initData->NewIterator(kJIteratorStartAtEnd);
		}

		T v = itsDefValue;
		for (JIndex i=GetColCount(); i>=1; i--)
		{
			if (initIter != nullptr)
			{
				const bool ok = initIter->Prev(&v);
				assert( ok );
			}

			iter.MoveTo(kJIteratorStartBefore, RCToI(trueIndex, i));
			iter.Insert(v, count);
		}

		jdelete initIter;

		RowsAdded(count);
		Broadcast(JTableData::RowsInserted(trueIndex, count));
	}
}

/******************************************************************************
 Row manipulations

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::PrependRows
	(
	const JSize		count,
	const JList<T>*	initData
	)
{
	InsertRows(1, count, initData);
}

template <class T>
void
JPackedTableData<T>::AppendRows
	(
	const JSize		count,
	const JList<T>*	initData
	)
{
	InsertRows(GetRowCount()+1, count, initData);
}

/******************************************************************************
 DuplicateRow

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::DuplicateRow
	(
	const JIndex origIndex,
	const JIndex newIndex
	)
{
	assert( RowIndexValid(origIndex) );

	const JIndex trueIndex = JMin(newIndex, GetRowCount()+1);

	JRunArrayIterator<T> iter(itsData);

	T element;
	for (JIndex i=GetColCount(); i>=1; i--)
	{
		iter.MoveTo(kJIteratorStartBefore, RCToI(origIndex,i));
		iter.Next(&element);

		iter.MoveTo(kJIteratorStartBefore, RCToI(trueIndex,i));
		iter.Insert(element);
	}

	RowsAdded(1);
	Broadcast(JTableData::RowDuplicated(origIndex, trueIndex));
}

/******************************************************************************
 RemoveRow

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::RemoveRow
	(
	const JIndex index
	)
{
	RemoveNextRows(index, 1);
}

/******************************************************************************
 RemoveNextRows

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::RemoveNextRows
	(
	const JIndex	firstIndex,
	const JSize		count
	)
{
	if (firstIndex == 1 && count == GetRowCount())
	{
		RemoveAllRows();
	}
	else
	{
		JRunArrayIterator<T> iter(itsData);

		for (JIndex i=GetColCount(); i>=1; i--)
		{
			iter.MoveTo(kJIteratorStartBefore, RCToI(firstIndex,i));
			iter.RemoveNext(count);
		}

		RowsDeleted(count);
		Broadcast(JTableData::RowsRemoved(firstIndex, count));
	}
}

/******************************************************************************
 RemovePrevRows

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::RemovePrevRows
	(
	const JIndex	lastIndex,
	const JSize		count
	)
{
	RemoveNextRows(lastIndex-count+1, count);
}

/******************************************************************************
 RemoveAllRows

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::RemoveAllRows()
{
	itsData->RemoveAll();
	const JSize rowCount = GetRowCount();
	SetRowCount(0);
	Broadcast(JTableData::RowsRemoved(1, rowCount));
}

/******************************************************************************
 MoveRow

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::MoveRow
	(
	const JIndex origIndex,
	const JIndex newIndex
	)
{
	assert( RowIndexValid(origIndex) && RowIndexValid(newIndex) );

	if (origIndex != newIndex)
	{
		JRunArrayIterator<T> iter(itsData);
		T element;

		for (JIndex i=GetColCount(); i>=1; i--)
		{
			const JIndex origDataIndex = RCToI(origIndex, i),
						 newDataIndex  = RCToI(newIndex, i);

			iter.MoveTo(kJIteratorStartBefore, origDataIndex);
			iter.Next(&element);
			iter.RemovePrev();

			iter.MoveTo(kJIteratorStartBefore,
				newDataIndex <= origDataIndex ? newDataIndex : newDataIndex-1);
			iter.Insert(element);
		}

		Broadcast(JTableData::RowMoved(origIndex, newIndex));
	}
}

/******************************************************************************
 InsertCols

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::InsertCols
	(
	const JIndex	index,
	const JSize		count,
	const JList<T>*	initData
	)
{
	const JSize rowCount = GetRowCount();
	assert( initData == nullptr || initData->GetElementCount() == rowCount );

	if (count > 0)
	{
		const JIndex trueIndex = JMin(index, GetColCount()+1);

		JRunArrayIterator<T> iter(itsData, kJIteratorStartBefore, RCToI(1,trueIndex));

		if (initData != nullptr)
		{
			JListIterator<T>* initIter = initData->NewIterator();
			T element;
			for (JIndex j=1; j<=count; j++)
			{
				initIter->MoveTo(kJIteratorStartAtBeginning, 0);
				while (initIter->Next(&element))
				{
					iter.Insert(element);
					iter.SkipNext();
				}
			}

			jdelete initIter;
		}
		else if (rowCount > 0)
		{
			iter.Insert(itsDefValue, rowCount * count);
		}

		ColsAdded(count);
		Broadcast(JTableData::ColsInserted(trueIndex, count));
	}
}

/******************************************************************************
 Column manipulations

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::PrependCols
	(
	const JSize		count,
	const JList<T>*	initData
	)
{
	InsertCols(1, count, initData);
}

template <class T>
void
JPackedTableData<T>::AppendCols
	(
	const JSize		count,
	const JList<T>*	initData
	)
{
	InsertCols(GetColCount()+1, count, initData);
}

/******************************************************************************
 DuplicateCol

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::DuplicateCol
	(
	const JIndex origIndex,
	const JIndex newIndex
	)
{
	assert( ColIndexValid(origIndex) );

	const JIndex trueIndex = JMin(newIndex, GetColCount()+1);

	const JIndex rowCount = GetRowCount();
	if (rowCount > 0)
	{
		JRunArrayIterator<T> newIter(itsData, kJIteratorStartBefore, RCToI(1,trueIndex));
		newIter.Insert(itsDefValue, rowCount);
		ColsAdded(1);

		JRunArrayIterator<T> origIter(*itsData, kJIteratorStartBefore,
			RCToI(1, origIndex >= trueIndex ? origIndex+1 : origIndex));

		T element;
		for (JIndex i=1; i<=rowCount; i++)
		{
			origIter.Next(&element);
			newIter.SetNext(element);
		}
	}
	else
	{
		ColsAdded(1);
	}

	Broadcast(JTableData::ColDuplicated(origIndex, trueIndex));
}

/******************************************************************************
 RemoveCol

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::RemoveCol
	(
	const JIndex index
	)
{
	RemoveNextCols(index, 1);
}

/******************************************************************************
 RemoveNextCols

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::RemoveNextCols
	(
	const JIndex	firstIndex,
	const JSize		count
	)
{
	JRunArrayIterator<T> iter(itsData, kJIteratorStartBefore, RCToI(1, firstIndex));
	iter.RemoveNext(GetRowCount() * count);

	ColsDeleted(count);
	Broadcast(JTableData::ColsRemoved(firstIndex, count));
}

/******************************************************************************
 RemovePrevCols

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::RemovePrevCols
	(
	const JIndex	lastIndex,
	const JSize		count
	)
{
	RemoveNextCols(lastIndex-count+1, count);
}

/******************************************************************************
 RemoveAllCols

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::RemoveAllCols()
{
	itsData->RemoveAll();
	const JSize colCount = GetColCount();
	SetColCount(0);
	Broadcast(JTableData::ColsRemoved(1, colCount));
}

/******************************************************************************
 MoveCol

 ******************************************************************************/

template <class T>
void
JPackedTableData<T>::MoveCol
	(
	const JIndex origIndex,
	const JIndex newIndex
	)
{
	assert( ColIndexValid(origIndex) && ColIndexValid(newIndex) );

	if (origIndex == newIndex)
	{
		return;
	}

	const JIndex rowCount = GetRowCount();
	if (rowCount > 0)
	{
		JRunArrayIterator<T> origIter(itsData, kJIteratorStartBefore, RCToI(1,origIndex)),
							 newIter(itsData, kJIteratorStartBefore, RCToI(1,newIndex));

		T element;
		for (JIndex i=1; i<=rowCount; i++)
		{
			origIter.Next(&element);
			origIter.RemovePrev();

			newIter.Insert(element);
			newIter.SkipNext();
		}
	}

	Broadcast(JTableData::ColMoved(origIndex, newIndex));
}

/******************************************************************************
 SetAllElements

 ******************************************************************************/

template <class T>
void	
JPackedTableData<T>::SetAllElements
	(
	const T& data
	)
{
	const JIndex count = itsData->GetElementCount();
	T value;
	if (count > 0 &&
		(!AllElementsEqual(&value) || value != data))
	{
		itsData->RemoveAll();
		itsData->AppendElements(data, count);
		Broadcast(JTableData::RectChanged(JRect(1, 1, GetRowCount()+1, GetColCount()+1)));
	}
}

/******************************************************************************
 ClearAllElements

	Sets all elements to the default value.

 ******************************************************************************/

template <class T>
void	
JPackedTableData<T>::ClearAllElements()
{
	SetAllElements(itsDefValue);
}

/******************************************************************************
 AllElementsEqual

	If all the elements are equal, this function returns true and sets
	data to the single value.

	If there are no elements, it returns false, mainly because the
	second version of the function doesn't have any data to return.

 ******************************************************************************/

template <class T>
bool	
JPackedTableData<T>::AllElementsEqual
	(
	T* data
	)
	const
{
	return itsData->AllElementsEqual(data);
}

/******************************************************************************
 CountElementsWithValue

 ******************************************************************************/

template <class T>
JSize	
JPackedTableData<T>::CountElementsWithValue
	(
	const T& data
	)
	const
{
	if (itsData->IsEmpty())
	{
		return 0;
	}

	JRunArrayIterator<T> iter(*itsData);

	JSize valueCount = 0;
	do
	{
		if (iter.GetRunData() == data)
		{
			valueCount += iter.GetRunLength();
		}
	}
		while (iter.NextRun());

	return valueCount;
}

/******************************************************************************
 RCToI

	Convert row and column values to an index into itsData.

 ******************************************************************************/

template <class T>
JIndex 
JPackedTableData<T>::RCToI
	(
	const JIndex row, 
	const JIndex col
	) 
	const
{
	return GetRowCount() * (col - 1) + row;
}

#endif
