#ifndef _T_JList
#define _T_JList

/******************************************************************************
 JList.tmpl

							The JList Template Class

	Abstract template for a dynamically sized ordered set.

	This class provides the structure for the public interface of all objects
	that act like ordered sets.  It also allows one iterator object to work
	on all such objects.

	BASE CLASS = JCollection

	Copyright (C) 1994-97 by John Lindal.

 ******************************************************************************/

#include "JList.h"
#include "JListIterator.h"
#include "jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JList<T>::JList()
	:
	JCollection()
{
	itsCompareFn     = nullptr;
	itsCompareObj    = nullptr;
	itsSortOrder     = JListT::kSortAscending;
	itsFirstIterator = nullptr;
}

/******************************************************************************
 Copy constructor

 ******************************************************************************/

template <class T>
JList<T>::JList
	(
	const JList<T>& source
	)
	:
	JCollection(source)
{
	itsCompareFn     = source.itsCompareFn;
	itsCompareObj    = (source.itsCompareObj == nullptr ? (JElementComparison<T>*) nullptr :
													   (source.itsCompareObj)->Copy());
	itsSortOrder     = source.itsSortOrder;
	itsFirstIterator = nullptr;	// we don't copy the iterators
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JList<T>::~JList()
{
	NotifyIterators(JListT::GoingAway());
	jdelete itsCompareObj;
}

/******************************************************************************
 Assignment operator (private)

	*** Derived classes must call ListAssigned() -after- copying data

	operator= is private to force derived classes to override it

 ******************************************************************************/

template <class T>
const JList<T>&
JList<T>::operator=
	(
	const JList<T>& source
	)
{
	assert( 0 );
	return *this;
}

/******************************************************************************
 ListAssigned (protected)

 ******************************************************************************/

template <class T>
void
JList<T>::ListAssigned
	(
	const JList<T>& source
	)
{
	itsCompareFn  = source.itsCompareFn;
	itsCompareObj = (source.itsCompareObj == nullptr ? (JElementComparison<T>*) nullptr :
													(source.itsCompareObj)->Copy());
	itsSortOrder  = source.itsSortOrder;

	NotifyIterators(JListT::Copied());
}

/******************************************************************************
 PrependElement

 ******************************************************************************/

template <class T>
void
JList<T>::PrependElement
	(
	const T& data
	)
{
	InsertElementAtIndex(1, data);
}

/******************************************************************************
 AppendElement

 ******************************************************************************/

template <class T>
void
JList<T>::AppendElement
	(
	const T& data
	)
{
	InsertElementAtIndex(GetElementCount() + 1, data);
}

/******************************************************************************
 RemoveElement

 ******************************************************************************/

template <class T>
void
JList<T>::RemoveElement
	(
	const JIndex index
	)
{
	RemoveNextElements(index, 1);
}

/******************************************************************************
 RemovePrevElements

 ******************************************************************************/

template <class T>
void
JList<T>::RemovePrevElements
	(
	const JIndex	lastIndex,
	const JSize		count
	)
{
	RemoveNextElements(lastIndex-count+1, count);
}

/******************************************************************************
 RemoveElements

 ******************************************************************************/

template <class T>
void
JList<T>::RemoveElements
	(
	const JIndexRange& range
	)
{
	RemoveNextElements(range.first, range.GetCount());
}

/******************************************************************************
 RemoveElements

 ******************************************************************************/

template <class T>
void
JList<T>::RemoveElements
	(
	const JListT::ElementsRemoved& info
	)
{
	RemoveNextElements(info.GetFirstIndex(), info.GetCount());
}

/******************************************************************************
 MoveElementToIndexWithMsg

 ******************************************************************************/

template <class T>
void
JList<T>::MoveElementToIndexWithMsg
	(
	const JListT::ElementMoved& info
	)
{
	MoveElementToIndex(info.GetOrigIndex(), info.GetNewIndex());
}

/******************************************************************************
 SwapElementsWithMsg

 ******************************************************************************/

template <class T>
void
JList<T>::SwapElementsWithMsg
	(
	const JListT::ElementsSwapped& info
	)
{
	SwapElements(info.GetIndex1(), info.GetIndex2());
}

/******************************************************************************
 GetFirstElement

 ******************************************************************************/

template <class T>
T
JList<T>::GetFirstElement()
	const
{
	return GetElement(1);
}

/******************************************************************************
 GetLastElement

 ******************************************************************************/

template <class T>
T
JList<T>::GetLastElement()
	const
{
	return GetElement(GetElementCount());
}

/******************************************************************************
 GetElementFromEnd

 ******************************************************************************/

template <class T>
T
JList<T>::GetElementFromEnd
	(
	const JIndex index
	)
	const
{
	return GetElement(GetIndexFromEnd(index));
}

/******************************************************************************
 SetElementFromEnd

 ******************************************************************************/

template <class T>
void
JList<T>::SetElementFromEnd
	(
	const JIndex	index,
	const T&		data
	)
{
	SetElement(GetIndexFromEnd(index), data);
}

/******************************************************************************
 NotifyIterators (protected)

 ******************************************************************************/

template <class T>
void
JList<T>::NotifyIterators
	(
	const JBroadcaster::Message& message
	)
{
	if (itsFirstIterator != nullptr)
		{
		itsFirstIterator->ListChanged(message);
		}
}

/******************************************************************************
 Compare function

 ******************************************************************************/

template <class T>
JBoolean
JList<T>::GetCompareFunction
	(
	JListT::CompareResult (**compareFn)(const T&, const T&)
	)
	const
{
	*compareFn = itsCompareFn;
	return JI2B( itsCompareFn != nullptr );
}

template <class T>
void
JList<T>::SetCompareFunction
	(
	JListT::CompareResult (*compareFn)(const T&, const T&)
	)
{
	itsCompareFn = compareFn;

	jdelete itsCompareObj;
	itsCompareObj = nullptr;

	if (itsCompareFn != nullptr)
		{
		itsCompareObj = jnew JCompareFnWrapper<T>(itsCompareFn);
		assert( itsCompareObj != nullptr );
		}
}

/******************************************************************************
 Compare object

 ******************************************************************************/

template <class T>
JBoolean
JList<T>::GetCompareObject
	(
	const JElementComparison<T>** compareObj
	)
	const
{
	*compareObj = itsCompareObj;
	return JI2B( itsCompareObj != nullptr );
}

template <class T>
void
JList<T>::SetCompareObject
	(
	const JElementComparison<T>& compareObj
	)
{
	itsCompareFn = nullptr;

	jdelete itsCompareObj;
	itsCompareObj = compareObj.Copy();
}

template <class T>
void
JList<T>::ClearCompareObject()
{
	itsCompareFn = nullptr;

	jdelete itsCompareObj;
	itsCompareObj = nullptr;
}

/******************************************************************************
 Sort order

 ******************************************************************************/

template <class T>
JListT::SortOrder
JList<T>::GetSortOrder()
	const
{
	return itsSortOrder;
}

template <class T>
void
JList<T>::SetSortOrder
	(
	const JListT::SortOrder order
	)
{
	itsSortOrder = order;
}

/******************************************************************************
 IsSorted

	Lookup's in LinkedLists and RunArrays are O(N).  We eliminate this
	by using an iterator.

 ******************************************************************************/

template <class T>
JBoolean
JList<T>::IsSorted()
	const
{
	assert( itsCompareObj != nullptr );

	const JSize count = GetElementCount();
	if (count < 2)
		{
		return kJTrue;		// avoid constructing iterator
		}

	// check if the elements are sorted

	JBoolean sorted = kJTrue;

	JListIterator<T>* iter = NewIterator();	// allows optimized iterator
	T obj1, obj2;

	JBoolean ok = iter->Next(&obj1);
	assert( ok );

	while (iter->Next(&obj2))
		{
		const JListT::CompareResult r = itsCompareObj->Compare(obj1, obj2);
		if ((itsSortOrder == JListT::kSortAscending &&
			 r != JListT::kFirstLessSecond) ||
			(itsSortOrder == JListT::kSortDescending &&
			 r != JListT::kFirstGreaterSecond))
			{
			sorted = kJFalse;
			break;
			}
		obj1 = obj2;
		}

	jdelete iter;
	return sorted;
}

/******************************************************************************
 Sort (virtual)

	We minimize the number of moves (O(N)) because MoveElementToIndex()
	invokes Broadcast(), which can take arbitrary amounts of time.

	Lookup's in LinkedLists and RunArrays are O(N).  We eliminate this
	by using an iterator.  This yields O(N^2) comparisons.

	JArray overrides this to get O(N log N) comparisons.

	The number of moves is always O(N^2).

 ******************************************************************************/

template <class T>
void
JList<T>::Sort()
{
	assert( itsCompareObj != nullptr );

	const JSize count = GetElementCount();
	if (count < 2)
		{
		return;		// avoid constructing iterator
		}

	JListIterator<T>* iter = NewIterator();	// allows optimized iterator

	// sort the elements

	T obj1, obj2;

	JIndex start = 1;
	while (start < count)
		{
		JIndex i = start, j = start;
		iter->MoveTo(kJIteratorStartBefore, i);

		const JBoolean ok = iter->Next(&obj1);
		assert( ok );

		while (iter->Next(&obj2))
			{
			j++;
			const JListT::CompareResult r = itsCompareObj->Compare(obj2, obj1);
			if ((itsSortOrder == JListT::kSortAscending &&
				 r == JListT::kFirstLessSecond) ||
				(itsSortOrder == JListT::kSortDescending &&
				 r == JListT::kFirstGreaterSecond))
				{
				i    = j;
				obj1 = obj2;
				}
			}

		if (i > start)
			{
			MoveElementToIndex(i, start);	// expensive if we have recipients
			}

		start++;
		}

	jdelete iter;
}

/******************************************************************************
 InsertSorted

	Returns kJTrue if the element was inserted.  Obviously, this is only
	useful if insertIfDuplicate==kJFalse.

	If index!=nullptr, it contains the index where the element was inserted.

 ******************************************************************************/

template <class T>
JBoolean
JList<T>::InsertSorted
	(
	const T&		data,
	const JBoolean	insertIfDuplicate,
	JIndex*			index
	)
{
	JBoolean isDuplicate;
	const JIndex i = GetInsertionSortIndex(data, &isDuplicate);
	if (!isDuplicate || insertIfDuplicate)
		{
		InsertElementAtIndex(i, data);
		if (index != nullptr)
			{
			*index = i;
			}
		return kJTrue;
		}
	else
		{
		if (index != nullptr)
			{
			*index = 0;
			}
		return kJFalse;
		}
}

/******************************************************************************
 GetInsertionSortIndex

	Returns index where jnew element should be inserted in order to keep
	the list sorted.  If there is an element that matches the given one,
	*isDuplicate is set to kJTrue.

 ******************************************************************************/

template <class T>
JIndex
JList<T>::GetInsertionSortIndex
	(
	const T&	data,
	JBoolean*	isDuplicate
	)
	const
{
	JBoolean found;
	JIndex index = SearchSorted1(data, JListT::kLastMatch, &found);
	if (found)
		{
		index++;
		}

	if (isDuplicate != nullptr)
		{
		*isDuplicate = found;
		}
	return index;
}

/******************************************************************************
 SearchSorted

	Returns kJTrue if the specified target is found.

	"which" specifies what to return if more than one element matches
	the given target.

 ******************************************************************************/

template <class T>
JBoolean
JList<T>::SearchSorted
	(
	const T&							target,
	const JListT::SearchReturn	which,
	JIndex*								index
	)
	const
{
	JBoolean found;
	*index = SearchSorted1(target, which, &found);
	if (!found)
		{
		*index = 0;
		}
	return found;
}

/******************************************************************************
 SearchSorted1 (virtual)

	Returns index where the element is or where it should be inserted in
	order to keep the list sorted.  If there is an element that matches the
	given one, *found is set to kJTrue.

	"which" specifies what to return if more than one element matches
	the given target.

	Lookup's in LinkedLists and RunArrays are O(N), which means a binary
	search would be O(N log N).  A linear search using an optimized iterator
	yields O(N).

	Since lookup's in Arrays are O(1), JArray overrides this function
	to use a binary search, yielding O(log N).

 ******************************************************************************/

template <class T>
JIndex
JList<T>::SearchSorted1
	(
	const T&							target,
	const JListT::SearchReturn	which,
	JBoolean*							found
	)
	const
{
	assert( itsCompareObj != nullptr );

	*found = kJFalse;

	if (IsEmpty())
		{
		return 1;
		}
	else if (which == JListT::kLastMatch)
		{
		// allows optimized iterator
		JListIterator<T>* iter = NewIterator(kJIteratorStartAtEnd, 0);

		JIndex i=GetElementCount()+1, index=0;
		T element;
		while (iter->Prev(&element))
			{
			i--;
			const JListT::CompareResult r = itsCompareObj->Compare(target, element);
			if (r == JListT::kFirstEqualSecond)
				{
				*found = kJTrue;
				index = i;
				break;
				}
			else if ((itsSortOrder == JListT::kSortAscending &&
					  r == JListT::kFirstGreaterSecond) ||
					 (itsSortOrder == JListT::kSortDescending &&
					  r == JListT::kFirstLessSecond))
				{
				index = i+1;
				break;
				}
			}

		jdelete iter;

		if (index == 0)
			{
			index = 1;
			}
		return index;
		}
	else
		{
		// allows optimized iterator
		JListIterator<T>* iter = NewIterator();

		JIndex i=0, index=0;
		T element;
		while (iter->Next(&element))
			{
			i++;
			const JListT::CompareResult r = itsCompareObj->Compare(target, element);
			if (r == JListT::kFirstEqualSecond)
				{
				*found = kJTrue;
				index = i;
				break;
				}
			else if ((itsSortOrder == JListT::kSortAscending &&
					  r == JListT::kFirstLessSecond) ||
					 (itsSortOrder == JListT::kSortDescending &&
					  r == JListT::kFirstGreaterSecond))
				{
				index = i;
				break;
				}
			}

		jdelete iter;

		if (index == 0)
			{
			index = GetElementCount()+1;
			}
		return index;
		}
}

/******************************************************************************
 NewIterator (virtual)

	Derived classes can override this function to create a derived class
	of JListIterator that is optimized to their data structure.

 ******************************************************************************/

template <class T>
JListIterator<T>*
JList<T>::NewIterator
	(
	const JIteratorPosition	start,
	const JIndex			index
	)
{
	JListIterator<T>* iter = jnew JListIterator<T>(this, start, index);
	assert( iter != nullptr );
	return iter;
}

template <class T>
JListIterator<T>*
JList<T>::NewIterator
	(
	const JIteratorPosition	start,
	const JIndex			index
	)
	const
{
	JListIterator<T>* iter = jnew JListIterator<T>(*this, start, index);
	assert( iter != nullptr );
	return iter;
}

/******************************************************************************
 Range-based for loop

 ******************************************************************************/

template <class T>
JListIterator<T>
begin
	(
	const JList<T>& list
	)
{
	return JListIterator<T>(list, kJIteratorStartAtBeginning);
}

template <class T>
JListIterator<T>
end
	(
	const JList<T>& list
	)
{
	return JListIterator<T>(list, kJIteratorStartAtEnd);
}

/******************************************************************************
 JElementComparison class

 ******************************************************************************/

template <class T>
JElementComparison<T>::~JElementComparison()
{
}

/******************************************************************************
 JCompareFnWrapper class

 ******************************************************************************/

template <class T>
JCompareFnWrapper<T>::JCompareFnWrapper
	(
	JListT::CompareResult (*compareFn)(const T&, const T&)
	)
	:
	itsCompareFn(compareFn)
{
}

template <class T>
JCompareFnWrapper<T>::~JCompareFnWrapper()
{
}

template <class T>
JListT::CompareResult
JCompareFnWrapper<T>::Compare
	(
	const T& t1,
	const T& t2
	)
	const
{
	return itsCompareFn(t1, t2);
}

template <class T>
JElementComparison<T>*
JCompareFnWrapper<T>::Copy()
	const
{
	JCompareFnWrapper<T>* copy = jnew JCompareFnWrapper<T>(itsCompareFn);
	assert( copy != nullptr );
	return copy;
}

#endif
