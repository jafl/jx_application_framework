#ifndef _T_JList
#define _T_JList

/******************************************************************************
 JList.tmpl

							The JList Template Class

	Abstract template for a dynamically sized list.

	This class provides the structure for the public interface of all
	objects that act like lists.

	BASE CLASS = JCollection

	Copyright (C) 1994-2018 by John Lindal.

 ******************************************************************************/

#include "JList.h"
#include "JListIterator.h"
#include "jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JList<T>::JList()
	:
	JCollection()
{
	itsCompareFn     = nullptr;
	itsSortOrder     = JListT::kSortAscending;
	itsFirstIterator = nullptr;
}

/******************************************************************************
 Copy constructor

 ******************************************************************************/

template <class T>
JList<T>::JList
	(
	const JList<T>& source
	)
	:
	JCollection(source),
	itsSortOrder(source.itsSortOrder),
	itsCompareFn(nullptr),
	itsFirstIterator(nullptr)	// we don't copy the iterators
{
	if (source.itsCompareFn != nullptr)
	{
		itsCompareFn = jnew std::function(*source.itsCompareFn);
		assert( itsCompareFn != nullptr );
	}
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JList<T>::~JList()
{
	NotifyIterators(JListT::GoingAway());
	jdelete itsCompareFn;
}

/******************************************************************************
 Assignment operator (private)

	*** Derived classes must call ListAssigned() -after- copying data

	operator= is private to force derived classes to override it

 ******************************************************************************/

template <class T>
JList<T>&
JList<T>::operator=
	(
	const JList<T>& source
	)
{
	assert( 0 );
	return *this;
}

/******************************************************************************
 ListAssigned (protected)

 ******************************************************************************/

template <class T>
void
JList<T>::ListAssigned
	(
	const JList<T>& source
	)
{
	itsSortOrder = source.itsSortOrder;

	jdelete itsCompareFn;
	itsCompareFn = nullptr;

	if (source.itsCompareFn != nullptr)
	{
		itsCompareFn = jnew std::function(*source.itsCompareFn);
		assert( itsCompareFn != nullptr );
	}

	NotifyIterators(JListT::Copied());
}

/******************************************************************************
 NotifyIterators (protected)

 ******************************************************************************/

template <class T>
void
JList<T>::NotifyIterators
	(
	const JBroadcaster::Message& message
	)
{
	if (itsFirstIterator != nullptr)
	{
		itsFirstIterator->ListChanged(message);
	}
}

/******************************************************************************
 Compare function

 ******************************************************************************/

template <class T>
std::function<std::weak_ordering(const T&, const T&)>*
JList<T>::GetCompareFunction()
	const
{
	assert( itsCompareFn != nullptr );
	return itsCompareFn;
}

template <class T>
void
JList<T>::SetCompareFunction
	(
	const std::function<std::weak_ordering(const T&, const T&)> compareFn
	)
{
	jdelete itsCompareFn;
	itsCompareFn = jnew std::function(compareFn);
	assert( itsCompareFn != nullptr );
}

template <class T>
void
JList<T>::CopyCompareFunction
	(
	const JList<T>& source
	)
{
	ClearCompareFunction();

	if (source.itsCompareFn != nullptr)
	{
		itsCompareFn = jnew std::function(*source.itsCompareFn);
		assert( itsCompareFn != nullptr );
	}
}

template <class T>
void
JList<T>::ClearCompareFunction()
{
	jdelete itsCompareFn;
	itsCompareFn = nullptr;
}

/******************************************************************************
 Sort order

 ******************************************************************************/

template <class T>
JListT::SortOrder
JList<T>::GetSortOrder()
	const
{
	return itsSortOrder;
}

template <class T>
void
JList<T>::SetSortOrder
	(
	const JListT::SortOrder order
	)
{
	itsSortOrder = order;
}

/******************************************************************************
 IsSorted

	Lookup's in LinkedLists and RunArrays are O(N).  We eliminate this
	by using an iterator.

 ******************************************************************************/

template <class T>
bool
JList<T>::IsSorted()
	const
{
	assert( itsCompareFn != nullptr );

	const JSize count = GetElementCount();
	if (count < 2)
	{
		return true;		// avoid constructing iterator
	}

	// check if the elements are sorted

	bool sorted = true;

	JListIterator<T>* iter = NewIterator();	// allows optimized iterator
	T obj1, obj2;

	bool ok = iter->Next(&obj1);
	assert( ok );

	while (iter->Next(&obj2))
	{
		const std::weak_ordering r = (*itsCompareFn)(obj1, obj2);
		if ((itsSortOrder == JListT::kSortAscending  && r == std::weak_ordering::greater) ||
			(itsSortOrder == JListT::kSortDescending && r == std::weak_ordering::less))
		{
			sorted = false;
			break;
		}
		obj1 = obj2;
	}

	jdelete iter;
	return sorted;
}

#endif
