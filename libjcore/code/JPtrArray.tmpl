#ifndef _T_JPtrArray
#define _T_JPtrArray

/******************************************************************************
 JPtrArray.c

						The Pointer Array Template Class

	Template for a dynamically sized array of pointers.
	The pointers are stored contiguously.

	Since only the pointers are stored, this is good for objects.

	Implementation notes:

	Retrieving an element from the actual array gives a *pointer*.

	BASE CLASS = JArray

	Copyright (C) 1994 by John Lindal. All rights reserved.

 ******************************************************************************/

#include <JPtrArray.h>
#include <jAssert.h>

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JPtrArray<T>::JPtrArray
	(
	const JPtrArrayT::CleanUpAction	action,
	const JSize						blockSize
	)
	:
	JArray<T*>(blockSize),
	itsCleanUpAction(action)
{
}

/******************************************************************************
 Copy constructor

	CleanUpAction should not be kDeleteAll* for both original and copy.

 ******************************************************************************/

template <class T>
JPtrArray<T>::JPtrArray
	(
	const JPtrArray<T>&				source,
	const JPtrArrayT::CleanUpAction	action
	)
	:
	JArray<T*>(source),
	itsCleanUpAction(action)
{
}

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JDCCPtrArray<T>::JDCCPtrArray
	(
	const JPtrArrayT::CleanUpAction	action,
	const JSize						blockSize
	)
	:
	JPtrArray<T>(action, blockSize)
{
}

/******************************************************************************
 Copy constructor

	CleanUpAction should not be kDeleteAll* for both original and copy.

 ******************************************************************************/

template <class T>
JDCCPtrArray<T>::JDCCPtrArray
	(
	const JPtrArray<T>&				source,
	const JPtrArrayT::CleanUpAction	action
	)
	:
	JPtrArray<T>(source, action)
{
	JArray<T*>::RemoveAll();
	JPtrArray<T>::CopyObjects(source, action, kJTrue);
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JPtrArray<T>::~JPtrArray()
{
	if (itsCleanUpAction == JPtrArrayT::kDeleteAll)
		{
		DeleteAll();
		}
	else if (itsCleanUpAction == JPtrArrayT::kDeleteAllAsArrays)
		{
		DeleteAllAsArrays();
		}
}

/******************************************************************************
 CleanOut

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::CleanOut()
{
	if (itsCleanUpAction == JPtrArrayT::kDeleteAll)
		{
		DeleteAll();
		}
	else if (itsCleanUpAction == JPtrArrayT::kDeleteAllAsArrays)
		{
		DeleteAllAsArrays();
		}
	else
		{
		assert( itsCleanUpAction == JPtrArrayT::kForgetAll );
		JArray<T*>::RemoveAll();
		}
}

/******************************************************************************
 CopyPointers (Shallow assignment operator)

	CleanUpAction should not be kDeleteAll* for both original and copy.

	If !append, CleanOut() is called first.

 ******************************************************************************/

template <class T>
const JPtrArray<T>&
JPtrArray<T>::CopyPointers
	(
	const JPtrArray<T>&				source,
	const JPtrArrayT::CleanUpAction	action,
	const JBoolean					append
	)
{
	if (this == &source)
		{
		return *this;
		}

	if (!append)
		{
		CleanOut();
		}
	itsCleanUpAction = action;

	const JSize count = source.GetElementCount();
	for (JIndex i=1; i<=count; i++)
		{
		Append(const_cast<T*>(source.GetElement(i)));
		}

	return *this;
}

/******************************************************************************
 CopyObjects (Deep assignment operator)

	CleanUpAction can be kDeleteAll* for both original and copy.

	If !append, CleanOut() is called first.

 ******************************************************************************/

template <class T>
const JPtrArray<T>&
JPtrArray<T>::CopyObjects
	(
	const JPtrArray<T>&				source,
	const JPtrArrayT::CleanUpAction	action,
	const JBoolean					append
	)
{
	if (this == &source)
		{
		return *this;
		}

	if (!append)
		{
		CleanOut();
		}
	itsCleanUpAction = action;

	const JSize count = source.GetElementCount();
	for (JIndex i=1; i<=count; i++)
		{
		const T* ptr = source.GetElement(i);
		if (ptr == NULL)
			{
			Append(NULL);
			}
		else
			{
			Append(*ptr);
			}
		}

	return *this;
}

/******************************************************************************
 InsertAtIndex

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::InsertAtIndex
	(
	const JIndex	index,
	T*				dataPtr
	)
{
	JPtrArray<T>::InsertElementAtIndex(index, dataPtr);
}

template <class T>
void
JPtrArray<T>::InsertAtIndex
	(
	const JIndex	index,
	const T&		data
	)
{
	T* ptr = jnew T(data);
	assert( ptr != NULL );
	InsertAtIndex(index, ptr);
}

/******************************************************************************
 Prepend

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::Prepend
	(
	T* dataPtr
	)
{
	InsertAtIndex(1, dataPtr);
}

template <class T>
void
JPtrArray<T>::Prepend
	(
	const T& data
	)
{
	T* ptr = jnew T(data);
	assert( ptr != NULL );
	Prepend(ptr);
}

/******************************************************************************
 Append

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::Append
	(
	T* dataPtr
	)
{
	InsertAtIndex(JCollection::GetElementCount() + 1, dataPtr);
}

template <class T>
void
JPtrArray<T>::Append
	(
	const T& data
	)
{
	T* ptr = jnew T(data);
	assert( ptr != NULL );
	Append(ptr);
}

/******************************************************************************
 InsertBefore

	If beforePtr isn't in the array, dataPtr is prepended.

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::InsertBefore
	(
	const T*	beforePtr,
	T*			dataPtr
	)
{
	JIndex index;
	const JBoolean found = Find(beforePtr, &index);

	if (found)
		{
		InsertAtIndex(index, dataPtr);
		}
	else
		{
		Prepend(dataPtr);
		}
}

template <class T>
void
JPtrArray<T>::InsertBefore
	(
	const T*	beforePtr,
	const T&	data
	)
{
	T* ptr = jnew T(data);
	assert( ptr != NULL );
	InsertBefore(beforePtr, ptr);
}

/******************************************************************************
 InsertAfter

	If afterPtr isn't in the array, dataPtr is appended.

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::InsertAfter
	(
	const T*	afterPtr,
	T*			dataPtr
	)
{
	JIndex index;
	const JBoolean found = Find(afterPtr, &index);

	if (found)
		{
		InsertAtIndex(index + 1, dataPtr);
		}
	else
		{
		Append(dataPtr);
		}
}

template <class T>
void
JPtrArray<T>::InsertAfter
	(
	const T*	afterPtr,
	const T&	data
	)
{
	T* ptr = jnew T(data);
	assert( ptr != NULL );
	InsertAfter(afterPtr, ptr);
}

/******************************************************************************
 SetElement

	This function avoids the static_cast required for SetElement().

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::SetElement
	(
	const JIndex						index,
	T*									dataPtr,
	const JPtrArrayT::SetElementAction	action
	)
{
	if (action == JPtrArrayT::kDelete)
		{
		jdelete JArray<T*>::GetElement(index);
		}
	else if (action == JPtrArrayT::kDeleteAsArray)
		{
		jdelete [] JArray<T*>::GetElement(index);
		}
	else
		{
		assert( action == JPtrArrayT::kForget );
		}

	JArray<T*>::SetElement(index, dataPtr);
}

template <class T>
void
JPtrArray<T>::SetElement
	(
	const JIndex						index,
	const T&							data,
	const JPtrArrayT::SetElementAction	action
	)
{
	T* ptr = jnew T(data);
	assert( ptr != NULL );
	SetElement(index, ptr, action);
}

/******************************************************************************
 SetToNull

	This function avoids the static_cast required for SetElement().

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::SetToNull
	(
	const JIndex						index,
	const JPtrArrayT::SetElementAction	action
	)
{
	SetElement(index, static_cast<T*>(NULL), action);
}

/******************************************************************************
 Remove

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::Remove
	(
	const T* dataPtr
	)
{
	JIndex index;
	const JBoolean found = Find(dataPtr, &index);

	if (found)
		{
		JList<T*>::RemoveElement(index);
		}
}

/******************************************************************************
 DeleteElement

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::DeleteElement
	(
	const JIndex index
	)
{
	jdelete JArray<T*>::GetElement(index);
	JList<T*>::RemoveElement(index);
}

/******************************************************************************
 DeleteAll

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::DeleteAll()
{
	const JSize elementCount = JCollection::GetElementCount();
	for (JIndex i=1; i<=elementCount; i++)
		{
		jdelete JArray<T*>::GetElement(i);
		}
	JArray<T*>::RemoveAll();
}

/******************************************************************************
 DeleteElementAsArray

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::DeleteElementAsArray
	(
	const JIndex index
	)
{
	jdelete [] JArray<T*>::GetElement(index);
	JList<T*>::RemoveElement(index);
}

/******************************************************************************
 DeleteAllAsArrays

 ******************************************************************************/

template <class T>
void
JPtrArray<T>::DeleteAllAsArrays()
{
	const JSize elementCount = JCollection::GetElementCount();
	for (JIndex i=1; i<=elementCount; i++)
		{
		jdelete [] JArray<T*>::GetElement(i);
		}
	JArray<T*>::RemoveAll();
}

/******************************************************************************
 Includes

	Returns TRUE if the JPtrArray contains the specified element.

 ******************************************************************************/

template <class T>
JBoolean
JPtrArray<T>::Includes
	(
	const T* dataPtr
	)
	const
{
	JIndex index;
	return Find(dataPtr, &index);
}

/******************************************************************************
 Find

	JIndex is 1 based.  Returns FALSE if element is not in array.

 ******************************************************************************/

template <class T>
JBoolean
JPtrArray<T>::Find
	(
	const T*	dataPtr,
	JIndex*		elementIndex
	)
	const
{
	// set to invalid index so they won't be able to ignore the error for long

	*elementIndex = 0;

	// search for the first match

	const JSize elementCount = JCollection::GetElementCount();
	for (JIndex i=1; i<=elementCount; i++)
		{
		if (dataPtr == JArray<T*>::ProtectedGetElement(i))
			{
			*elementIndex = i;
			return kJTrue;
			}
		}

	// if we fall through, there was no match

	return kJFalse;
}

/******************************************************************************
 Join

 ******************************************************************************/

template <class T>
T
JPtrArray<T>::Join
	(
	const T& separator
	)
	const
{
	return Join(separator.GetBytes());
}

template <class T>
T
JPtrArray<T>::Join
	(
	const JUtf8Byte* separator
	)
	const
{
	T s;

	const JSize count = JCollection::GetElementCount();
	for (JIndex i=1; i<=count; i++)
		{
		if (i > 1)
			{
			s += separator;
			}
		s += *(JArray<T*>::GetElement(i));
		}

	return s;
}

/******************************************************************************
 Clean up action

	What to do when the destructor is called.  This is especially useful
	for objects allocated on the stack, because one can set the appropriate
	action and then never have to worry about short-circuit returns.

 ******************************************************************************/

template <class T>
JPtrArrayT::CleanUpAction
JPtrArray<T>::GetCleanUpAction()
	const
{
	return itsCleanUpAction;
}

template <class T>
void
JPtrArray<T>::SetCleanUpAction
	(
	const JPtrArrayT::CleanUpAction action
	)
{
	itsCleanUpAction = action;
}

#endif
