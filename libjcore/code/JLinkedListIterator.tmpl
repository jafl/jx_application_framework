#ifndef _T_JLinkedListIterator
#define _T_JLinkedListIterator

/******************************************************************************
 JLinkedListIterator.tmpl

	Efficient interation for JLinkedList objects.

	Copyright (C) 1996-2018 by John Lindal.

 ******************************************************************************/

#include "JLinkedListIterator.h"
#include "JLinkedList.h"
#include "jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JLinkedListIterator<T>::JLinkedListIterator
	(
	const JLinkedList<T>&	theLinkedList,
	const JListT::Position	start,
	const JIndex			index
	)
	:
	JListIterator<T>(theLinkedList, start, index),
	itsIgnoreListChangedFlag(false)
{
	itsLinkedList  = const_cast<JLinkedList<T>*>(&theLinkedList);
	itsCurrElement = itsLinkedList->itsFirstElement;

	// initialize instance variables -- our override not called by base class

	PrivateMoveTo();
}

template <class T>
JLinkedListIterator<T>::JLinkedListIterator
	(
	JLinkedList<T>*			theLinkedList,
	const JListT::Position	start,
	const JIndex			index
	)
	:
	JListIterator<T>(theLinkedList, start, index),
	itsIgnoreListChangedFlag(false)
{
	itsLinkedList  = theLinkedList;
	itsCurrElement = itsLinkedList->itsFirstElement;

	// initialize instance variables -- our override not called by base class

	PrivateMoveTo();
}

/******************************************************************************
 Copy constructor

 ******************************************************************************/

template <class T>
JLinkedListIterator<T>::JLinkedListIterator
	(
	const JLinkedListIterator<T>& source
	)
	:
	JListIterator<T>(source),
	itsIgnoreListChangedFlag(false)
{
	itsLinkedList  = source.itsLinkedList;
	itsCurrElement = source.itsCurrElement;
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JLinkedListIterator<T>::~JLinkedListIterator()
{
}

/******************************************************************************
 Prev (virtual)

	Return true if there is a previous item, fetching the previous
	item in the list and decrementing the iterator position.
	Otherwise return false without fetching or decrementing.

 ******************************************************************************/

template <class T>
bool
JLinkedListIterator<T>::Prev
	(
	T*						item,
	const JListT::Action	move
	)
{
	if (itsLinkedList == nullptr || this->AtBeginning())
	{
		return false;
	}

	*item = itsCurrElement->data;

	if (move)
	{
		const JCursorPosition cursorPos = this->GetCursor();
		if (cursorPos > 1)
		{
			itsCurrElement = itsCurrElement->prev;
		}

		this->SetCursor(cursorPos-1);
	}
	return true;
}

/******************************************************************************
 Next (virtual)

	Return true if there is a next item, fetching the next
	item in the list and decrementing the iterator position.
	Otherwise return false without fetching or decrementing.

 ******************************************************************************/

template <class T>
bool
JLinkedListIterator<T>::Next
	(
	T*						item,
	const JListT::Action	move
	)
{
	if (itsLinkedList == nullptr || this->AtEnd())
	{
		return false;
	}

	JLinkedListElement<T>* e = itsCurrElement;

	const JCursorPosition cursorPos = this->GetCursor();
	if (cursorPos > 0)
	{
		e = e->next;
	}

	*item = e->data;

	if (move)
	{
		itsCurrElement = e;
		this->SetCursor(cursorPos+1);
	}
	return true;
}

/******************************************************************************
 SkipPrev (virtual)

 ******************************************************************************/

template <class T>
void
JLinkedListIterator<T>::SkipPrev
	(
	const JSize count
	)
{
	if (itsLinkedList != nullptr && !this->AtBeginning())
	{
		JCursorPosition cursorPos = this->GetCursor();

		JSize remaining = count;
		while (remaining > 0 && cursorPos > 0)
		{
			if (cursorPos > 1)
			{
				itsCurrElement = itsCurrElement->prev;
			}
			cursorPos--;
			remaining--;
		}

		this->SetCursor(cursorPos);
	}
}

/******************************************************************************
 SkipNext (virtual)

 ******************************************************************************/

template <class T>
void
JLinkedListIterator<T>::SkipNext
	(
	const JSize count
	)
{
	if (itsLinkedList != nullptr && !this->AtEnd())
	{
		JCursorPosition cursorPos = this->GetCursor();
		const JSize maxPos        = itsLinkedList->GetElementCount();

		JSize remaining = count;
		while (remaining > 0 && cursorPos < maxPos)
		{
			if (cursorPos > 0)
			{
				itsCurrElement = itsCurrElement->next;
			}
			cursorPos++;
			remaining--;
		}

		this->SetCursor(cursorPos);
	}
}

/******************************************************************************
 SetPrev (virtual)

	Returns true if we have a non-const JLinkedList<T>* and
	there is a previous item.

 ******************************************************************************/

template <class T>
bool
JLinkedListIterator<T>::SetPrev
	(
	const T&				data,
	const JListT::Action	move
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj) || this->AtBeginning())
	{
		return false;
	}

	const JCursorPosition cursorPos = this->GetCursor();

	itsLinkedList->IteratorSetElement(cursorPos, data, itsCurrElement);
	if (move)
	{
		const JCursorPosition cursorPos = this->GetCursor();
		if (cursorPos > 1)
		{
			itsCurrElement = itsCurrElement->prev;
		}

		this->SetCursor(cursorPos-1);
	}
	return true;
}

/******************************************************************************
 SetNext (virtual)

	Returns true if we have a non-const JLinkedList<T>* and
	there is a next item.

 ******************************************************************************/

template <class T>
bool
JLinkedListIterator<T>::SetNext
	(
	const T&				data,
	const JListT::Action	move
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj) || this->AtEnd())
	{
		return false;
	}

	assert( itsCurrElement->next != nullptr );

	JLinkedListElement<T>* e = itsCurrElement;

	const JCursorPosition cursorPos = this->GetCursor();
	if (cursorPos > 0)
	{
		e = e->next;
	}

	itsLinkedList->IteratorSetElement(cursorPos+1, data, e);
	if (move)
	{
		itsCurrElement = e;
		this->SetCursor(cursorPos+1);
	}
	return true;
}

/******************************************************************************
 RemovePrev (virtual)

	Returns true if we have a non-const JLinkedList<T>* and
	there is at least one previous item.

 ******************************************************************************/

template <class T>
bool
JLinkedListIterator<T>::RemovePrev
	(
	const JSize count
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj) || this->AtBeginning())
	{
		return false;
	}

	JLinkedListElement<T>* e = itsCurrElement->next;

	itsIgnoreListChangedFlag = true;
	itsLinkedList->IteratorRemovePrevElements(this->GetCursor(), count, itsCurrElement);
	itsIgnoreListChangedFlag = false;

	if (this->AtBeginning())
	{
		itsCurrElement = itsLinkedList->itsFirstElement;
	}
	else if (e == nullptr)
	{
		itsCurrElement = itsLinkedList->itsLastElement;
	}
	else
	{
		itsCurrElement = e->prev;
	}

	return true;
}

/******************************************************************************
 RemoveNext (virtual)

	Returns true if we have a non-const JLinkedList<T>* and
	there is at least one next item.

 ******************************************************************************/

template <class T>
bool
JLinkedListIterator<T>::RemoveNext
	(
	const JSize count
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj) || this->AtEnd())
	{
		return false;
	}

	JLinkedListElement<T>* e = itsCurrElement;

	const JCursorPosition cursorPos = this->GetCursor();
	if (cursorPos > 0)
	{
		e = e->next;
	}

	itsIgnoreListChangedFlag = true;
	itsLinkedList->IteratorRemoveNextElements(cursorPos+1, count, e);
	itsIgnoreListChangedFlag = false;

	if (this->AtBeginning())
	{
		itsCurrElement = itsLinkedList->itsFirstElement;
	}

	return true;
}

/******************************************************************************
 Insert (virtual)

	Returns true if we have a non-const JLinkedList<T>*.

 ******************************************************************************/

template <class T>
bool
JLinkedListIterator<T>::Insert
	(
	const T& data
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj))
	{
		return false;
	}

	if (this->AtBeginning())
	{
		itsIgnoreListChangedFlag = true;
		itsLinkedList->PrependElement(data);
		itsIgnoreListChangedFlag = false;

		itsCurrElement = itsLinkedList->itsFirstElement;
	}
	else
	{
		itsIgnoreListChangedFlag = true;
		itsLinkedList->IteratorInsertElementAfter(this->GetCursor(), data, itsCurrElement);
		itsIgnoreListChangedFlag = false;
	}
	return true;
}

/******************************************************************************
 MoveTo (virtual)

	Reset the iterator position to one of:
		kJIteratorStartAtBeginning, kJIteratorStartAtEnd,
		kJIteratorStartBefore(index), or kJIteratorStartAfter(index)

 ******************************************************************************/

template <class T>
void
JLinkedListIterator<T>::MoveTo
	(
	const JListT::Position	newPosition,
	const JIndex			index
	)
{
	const JCursorPosition origPosition = this->GetCursor();

	JListIterator<T>::MoveTo(newPosition, index);

	const JCursorPosition cursorPosition = this->GetCursor();
	if (itsLinkedList != nullptr && cursorPosition != origPosition)
	{
		PrivateMoveTo();
	}
}

template <class T>
void
JLinkedListIterator<T>::PrivateMoveTo()
{
	if (this->AtBeginning())
	{
		itsCurrElement = itsLinkedList->itsFirstElement;
	}
	else if (this->AtEnd())
	{
		itsCurrElement = itsLinkedList->itsLastElement;
	}
	else
	{
		itsCurrElement = itsLinkedList->IteratorFindElement(this->GetCursor());
	}
}

/******************************************************************************
 ListChanged (virtual protected)

	Respond to changes in itsLinkedList.  In order to optimize, we would have
	to check if prev or next was invalid.

 ******************************************************************************/

template <class T>
void
JLinkedListIterator<T>::ListChanged
	(
	const JBroadcaster::Message& message
	)
{
	JListIterator<T>::ListChanged(message);

	if (!itsIgnoreListChangedFlag &&
		(message.Is(JListT::kElementsInserted) ||
		 message.Is(JListT::kElementsRemoved)))
	{
		PrivateMoveTo();
	}
	else if (message.Is(JListT::kCopied))
	{
		PrivateMoveTo();
	}
	else if (message.Is(JListT::kGoingAway))
	{
		itsLinkedList  = nullptr;
		itsCurrElement = nullptr;
	}
}

#endif
