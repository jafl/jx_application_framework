#ifndef _T_JPtrArrayIterator
#define _T_JPtrArrayIterator

/******************************************************************************
 JPtrArrayIterator.tmpl

	Provides a consistent interface for iterating over a JPtrArray.

	Refer to JListIterator.tmpl for information about interators in general.

	Copyright (C) 1994-97 by John Lindal.

 ******************************************************************************/

#include "jx-af/jcore/JPtrArray.h"
#include "jx-af/jcore/jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JPtrArrayIterator<T>::JPtrArrayIterator
	(
	const JPtrArray<T>&		theArray,
	const JIteratorPosition	start,
	const JIndex			index
	)
	:
	JArrayIterator<T*>(theArray, start, index)
{
}

template <class T>
JPtrArrayIterator<T>::JPtrArrayIterator
	(
	JPtrArray<T>*			theArray,
	const JIteratorPosition	start,
	const JIndex			index
	)
	:
	JArrayIterator<T*>(theArray, start, index)
{
}

/******************************************************************************
 SetPrev

	Returns true if we have a non-const JPtrArray<T>* and
	there is a previous item.

 ******************************************************************************/

template <class T>
bool
JPtrArrayIterator<T>::SetPrev
	(
	T*									dataPtr,
	const JPtrArrayT::SetElementAction	action,
	const JIteratorAction				move
	)
{
	JList<T*>* obj;
	if (!JPtrArrayIterator<T>::GetList(&obj) || JListIterator<T*>::AtBeginning())
	{
		return false;
	}

	JPtrArray<T>* ptr = dynamic_cast<JPtrArray<T>*>(obj);
	assert( ptr != nullptr );

	const JCursorPosition cursorPos = JListIterator<T*>::GetCursor();

	ptr->SetElement(cursorPos, dataPtr, action);
	if (move)
	{
		this->SetCursor(cursorPos-1);
	}
	return true;
}

/******************************************************************************
 SetNext

	Returns true if we have a non-const JPtrArray<T>* and
	there is a next item.

 ******************************************************************************/

template <class T>
bool
JPtrArrayIterator<T>::SetNext
	(
	T*									dataPtr,
	const JPtrArrayT::SetElementAction	action,
	const JIteratorAction				move
	)
{
	JList<T*>* obj;
	if (!JPtrArrayIterator<T>::GetList(&obj) || JListIterator<T*>::AtEnd())
	{
		return false;
	}

	JPtrArray<T>* ptr = dynamic_cast<JPtrArray<T>*>(obj);
	assert( ptr != nullptr );

	const JCursorPosition cursorPos = JListIterator<T*>::GetCursor() + 1;

	ptr->SetElement(cursorPos, dataPtr, action);
	if (move)
	{
		this->SetCursor(cursorPos);
	}
	return true;
}

/******************************************************************************
 DeletePrev

	Returns true if we have a non-const JPtrArray<T>* and
	there is a previous item.

 ******************************************************************************/

template <class T>
bool
JPtrArrayIterator<T>::DeletePrev()
{
	JList<T*>* obj;
	if (!JPtrArrayIterator<T>::GetList(&obj) || JListIterator<T*>::AtBeginning())
	{
		return false;
	}

	JPtrArray<T>* ptr = dynamic_cast<JPtrArray<T>*>(obj);
	assert( ptr != nullptr );

	ptr->DeleteElement(JListIterator<T*>::GetCursor());
	return true;
}

/******************************************************************************
 DeleteNext

	Returns true if we have a non-const JPtrArray<T>* and
	there is a next item.

 ******************************************************************************/

template <class T>
bool
JPtrArrayIterator<T>::DeleteNext()
{
	JList<T*>* obj;
	if (!JPtrArrayIterator<T>::GetList(&obj) || JListIterator<T*>::AtEnd())
	{
		return false;
	}

	JPtrArray<T>* ptr = dynamic_cast<JPtrArray<T>*>(obj);
	assert( ptr != nullptr );

	ptr->DeleteElement(JListIterator<T*>::GetCursor()+1);
	return true;
}

/******************************************************************************
 DeletePrevAsArray

	Returns true if we have a non-const JPtrArray<T>* and
	there is a previous item.

 ******************************************************************************/

template <class T>
bool
JPtrArrayIterator<T>::DeletePrevAsArray()
{
	JList<T*>* obj;
	if (!JPtrArrayIterator<T>::GetList(&obj) || JListIterator<T*>::AtBeginning())
	{
		return false;
	}

	JPtrArray<T>* ptr = dynamic_cast<JPtrArray<T>*>(obj);
	assert( ptr != nullptr );

	ptr->DeleteElementAsArray(JListIterator<T*>::GetCursor());
	return true;
}

/******************************************************************************
 DeleteNextAsArray

	Returns true if we have a non-const JPtrArray<T>* and
	there is a next item.

 ******************************************************************************/

template <class T>
bool
JPtrArrayIterator<T>::DeleteNextAsArray()
{
	JList<T*>* obj;
	if (!JPtrArrayIterator<T>::GetList(&obj) || JListIterator<T*>::AtEnd())
	{
		return false;
	}

	JPtrArray<T>* ptr = dynamic_cast<JPtrArray<T>*>(obj);
	assert( ptr != nullptr );

	ptr->DeleteElementAsArray(JListIterator<T*>::GetCursor()+1);
	return true;
}

#endif
