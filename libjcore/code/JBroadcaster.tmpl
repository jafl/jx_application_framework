#ifndef _T_JBroadcaster
#define _T_JBroadcaster

#include "JBroadcasterMessageMap.h"
#include "JBroadcasterMessageTarget.h"
#include "JBroadcasterMessageIterator.h"
#include "JTaskIterator.h"
// we are included by jAssert.h

/******************************************************************************
 ListenTo

	Open a connection by adding the given object to this object's sender list,
	and adding this object & function to the given object's recipient list.

	If the connection already exists, then we replace the previous function.

	NOTE: This cannot be used if you intend to use ReceiveWithFeedback().

 ******************************************************************************/

template <class T>
void
JBroadcaster::ListenTo
	(
	const JBroadcaster*						csender,
	const std::function<void(const T&)>&	f
	)
{
	static_assert( std::is_base_of<Message, T>::value );
	assert( csender != nullptr );

	auto* sender = const_cast<JBroadcaster*>(csender);

	AddCallSource(sender, typeid(T));
	sender->AddCallTarget(this, f);
}

/******************************************************************************
 AddCallTarget (private)

	Store the given connection.  Called by ListenTo().

 ******************************************************************************/

template <class T>
void
JBroadcaster::AddCallTarget
	(
	JBroadcaster*							recipient,
	const std::function<void(const T&)>&	f
	)
{
	static_assert( std::is_base_of<Message, T>::value );

	if (itsCallTargets == nullptr)
	{
		itsCallTargets = jnew JBroadcasterMessageMap;
	}

	auto* fp = jnew std::function(f);
	auto* d  = jnew std::function([fp]()
	{
		jdelete fp;
	});

	auto* a = jnew boost::any(fp);

	itsCallTargets->SetItem(typeid(T), recipient, a, d);
}

/******************************************************************************
 Send (protected)

	Send the given message to the specified recipient.  It is the
	responsibility of derived classes to implement a set of useful
	messages. Every message must be derived from JBroadcaster::Message and
	should contain all the information necessary to process the message.

	This function allows messages to be sent to an object in a way that is
	safe but that does not require the C++ type safety mechanism of
	dynamic_cast.  Essentially, this feature is equivalent to the object
	methods provided by Objective C.

 ******************************************************************************/

template <class T>
void
JBroadcaster::Send
	(
	JBroadcaster*	recipient,
	const T&		message
	)
{
	static_assert( std::is_base_of<Message, T>::value );

	boost::any* a;
	if (itsCallTargets != nullptr && itsCallTargets->GetItem(typeid(T), recipient, &a))
	{
		(*boost::any_cast<std::function<void(const T&)>*>(*a))(message);
	}
	else
	{
		recipient->Receive(this, message);
	}
}

/******************************************************************************
 BroadcastPrivate (private)

	We use an iterator because anything could happen while calling Receive().

 ******************************************************************************/

template <class T>
void
JBroadcaster::BroadcastPrivate
	(
	const T& message
	)
{
	static_assert( std::is_base_of<Message, T>::value );

#pragma GCC diagnostic push
#if __GNUC__ >= 12 && ! defined __clang__
#pragma GCC diagnostic ignored "-Wdangling-pointer"
#endif

	bool deleted   = false;
	itsDeletedFlag = &deleted;

#pragma GCC diagnostic pop

	if (itsRecipients != nullptr)
	{
		JTaskIterator<JBroadcaster> iterator(*itsRecipients);
		JBroadcaster* recipient;

		while (iterator.Next(&recipient))
		{
			recipient->Receive(this, message);
		}
	}

	if (deleted)
	{
		return;
	}

	JArray<JBroadcasterMessageTuple>* list;
	if (itsCallTargets != nullptr && itsCallTargets->GetList(typeid(T), &list))
	{
		JBroadcasterMessageIterator<JBroadcasterMessageTuple> iterator(*list);
		JBroadcasterMessageTuple t;

		while (iterator.Next(&t))
		{
			(*boost::any_cast<std::function<void(const T&)>*>(*t.f))(message);
		}
	}

	if (!deleted)
	{
		itsDeletedFlag = nullptr;
	}
}

#endif
