#ifndef _H_JHashTable
#define _H_JHashTable

/******************************************************************************
 JHashTable.h

	Interface for the JHashTable and JHashRecord classes.

	Copyright (C) 1997 by Dustin Laurence.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include "JHashRecord.h"
#include "JHashCursor.h"

//#include "JHashTableCursor.h"

	// This value comes from Sedgewick, should ensure less than five probes on average
	// for a search miss and fewer for a hit.
	const JFloat kJDefaultMaxLoadFactor = 0.8;

	const JFloat kJDefaultMinFillFactor = 0.1;
	const JSize  kJDefaultLgMinTableSize = 5;

template <class V>
class JHashTable
{
//	friend class JHashTableCursor<V>;
	friend class JConstHashCursor<V>;
	friend class JHashCursor<V>;

public:

	JHashTable(const JSize lgSize = kJDefaultLgMinTableSize);
	virtual ~JHashTable();

// Useful for any hash table

	bool  IsEmpty() const;
	JSize GetElementCount() const;

// Statistics

	JSize GetLgSize() const;
	JSize GetLoadCount() const;
	JSize GetTableSize() const;

	JFloat GetFillFactor() const;
	JFloat GetLoadFactor() const;

// Should this really be part of the *public* interface?!?
	bool GetResizeEnabled() const;
	void SetResizeEnabled(const bool enabled);

	JFloat GetMaxLoadFactor() const;
	void   SetMaxLoadFactor(const JFloat newMax);

	JFloat GetMinFillFactor() const;
	void   SetMinFillFactor(const JFloat newMin);

	JSize  GetMinTableSize() const;
	void   SetMinTableSize(const JSize newMin);

	bool IsOK() const;

protected:

// Cursor control
	void AllowCursors();
	void DisallowCursors();

	JHashCursor<V>*      GetCursor();
	JConstHashCursor<V>* GetCursor() const;

// Get... values
	const JHashRecord<V>& GetRecord(const JSize index) const;

	JHashRecordT::State GetState(const JSize index) const;
	bool                IsEmpty(const JSize index) const;
	bool                IsDeleted(const JSize index) const;
	bool                IsFull(const JSize index) const;

	JHashValue          GetHashValue(const JSize index) const;

	const V&            GetValue(const JSize index) const;

// Set values
	void Set(const JSize index, const JHashRecord<V>& record);
	void Set(const JSize index, const JHashValue hash, const V& value);
	void Set(const JSize index, const V& value);
	void SetHash(const JSize index, const V& value);

	void Remove(const JSize index);
	void MarkEmpty(const JSize index);
	void MarkAllEmpty();

// Low-level resizing interface--useful when overriding FitToLimits
	bool TryResizeTable(const JSize lgSize);
	void ResizeTable(const JSize lgTrialSize);

// Main resize function
	virtual bool FitToLimits(const JSize required = 0,
							 const bool force = false);

// For use by cursors
	JSize HashToIndex(JHashValue hash) const;

private:

	JSize           itsLgSize;
	JSize           itsMaxIndex;
	JHashRecord<V>* itsArray;

	JHashCursor<V>* itsCursor;

	JSize itsElementCount; // Number that are full, different than the array size!
	JSize itsLoadCount;

	bool   itsResizeFlag;
	JFloat itsMaxLoadFactor;
	JFloat itsMinFillFactor;
	JSize  itsLgMinTableSize;

	bool itsAllowCursorFlag;

private:

	void _MarkAllEmpty();
	bool TryInsert(const JHashRecord<V>& record);
	bool TryInsertAll(const JHashTable<V>* source);

	// not allowed

	JHashTable(const JHashTable&) = delete;
	JHashTable& operator=(const JHashTable&) = delete;
};

/******************************************************************************
 IsEmpty

 *****************************************************************************/

template <class V>
inline bool
JHashTable<V>::IsEmpty() const
{
	return itsElementCount == 0;
}

/******************************************************************************
 GetElementCount

 *****************************************************************************/

template <class V>
inline JSize
JHashTable<V>::GetElementCount() const
{
	return itsElementCount;
}

/******************************************************************************
 GetLgSize

 *****************************************************************************/

template <class V>
inline JSize
JHashTable<V>::GetLgSize() const
{
	return itsLgSize;
}

/******************************************************************************
 GetLoadCount

 *****************************************************************************/

template <class V>
inline JSize
JHashTable<V>::GetLoadCount() const
{
	return itsLoadCount;
}

/******************************************************************************
 GetTableSize

 *****************************************************************************/

template <class V>
inline JSize
JHashTable<V>::GetTableSize() const
{
	return itsMaxIndex + 1;
}

/******************************************************************************
 GetFillFactor

 *****************************************************************************/

template <class V>
inline JFloat
JHashTable<V>::GetFillFactor() const
{
	return ( (JFloat) GetElementCount())/GetTableSize();
}

/******************************************************************************
 GetLoadFactor

 *****************************************************************************/

template <class V>
inline JFloat
JHashTable<V>::GetLoadFactor() const
{
	return ( (JFloat) GetLoadCount())/GetTableSize();
}

/******************************************************************************
 GetResizeEnabled

 *****************************************************************************/

template <class V>
inline bool
JHashTable<V>::GetResizeEnabled() const
{
	return itsResizeFlag;
}

/******************************************************************************
 GetMaxLoadFactor

 *****************************************************************************/

template <class V>
inline JFloat
JHashTable<V>::GetMaxLoadFactor() const
{
	return itsMaxLoadFactor;
}

/******************************************************************************
 GetMinFillFactor

 *****************************************************************************/

template <class V>
inline JFloat
JHashTable<V>::GetMinFillFactor() const
{
	return itsMinFillFactor;
}

/******************************************************************************
 GetMinTableSize

 *****************************************************************************/

template <class V>
inline JSize
JHashTable<V>::GetMinTableSize() const
{
	return (1 << itsLgMinTableSize);
}

/******************************************************************************
 AllowCursors (protected)

 *****************************************************************************/

template <class V>
inline void
JHashTable<V>::AllowCursors()
{
	itsAllowCursorFlag = true;
}

/******************************************************************************
 DisallowCursors (protected)

 *****************************************************************************/

template <class V>
inline void
JHashTable<V>::DisallowCursors()
{
	itsAllowCursorFlag = false;
}

/******************************************************************************
 GetCursor (protected)

 *****************************************************************************/

template <class V>
inline JHashCursor<V>*
JHashTable<V>::GetCursor()
{
	return itsCursor;
}

template <class V>
inline JConstHashCursor<V>*
JHashTable<V>::GetCursor() const
{
	return itsCursor;
}

/******************************************************************************
 GetRecord (protected)

	Warning: no bounds checking, and the argument must be an index because it
	is not wrapped to the tablesize!

 *****************************************************************************/

template <class V>
inline const JHashRecord<V>&
JHashTable<V>::GetRecord
	(
	const JSize index
	)
	const
{
	return itsArray[index];
}

/******************************************************************************
 GetState (protected)

	Warning: no bounds checking, and the argument must be an index because it
	is not wrapped to the tablesize!

 *****************************************************************************/

template <class V>
inline JHashRecordT::State
JHashTable<V>::GetState
	(
	const JSize index
	)
	const
{
	return itsArray[index].GetState();
}

/******************************************************************************
 IsEmpty (protected)

	Warning: no bounds checking, and the argument must be an index because it
	is not wrapped to the tablesize!

 *****************************************************************************/

template <class V>
inline bool
JHashTable<V>::IsEmpty
	(
	const JSize index
	)
	const
{
	return itsArray[index].IsEmpty();
}

/******************************************************************************
 IsDeleted (protected)

	Warning: no bounds checking, and the argument must be an index because it
	is not wrapped to the tablesize!

 *****************************************************************************/

template <class V>
inline bool
JHashTable<V>::IsDeleted
	(
	const JSize index
	)
	const
{
	return itsArray[index].IsDeleted();
}

/******************************************************************************
 IsFull (protected)

	Warning: no bounds checking, and the argument must be an index because it
	is not wrapped to the tablesize!

 *****************************************************************************/

template <class V>
inline bool
JHashTable<V>::IsFull
	(
	const JSize index
	)
	const
{
	return itsArray[index].IsFull();
}

/******************************************************************************
 GetHashValue (protected)

	Warning: no bounds checking, and the argument must be an index because it
	is not wrapped to the tablesize!

 *****************************************************************************/

template <class V>
inline JHashValue
JHashTable<V>::GetHashValue
	(
	const JSize index
	)
	const
{
	return itsArray[index].GetHashValue();
}

/******************************************************************************
 GetValue (protected)

	Warning: no bounds checking, and the argument must be an index because it
	is not wrapped to the tablesize!

 *****************************************************************************/

template <class V>
inline const V&
JHashTable<V>::GetValue
	(
	const JSize index
	)
	const
{
	return itsArray[index].GetValue();
}

/******************************************************************************
 HashToIndex (protected)

 *****************************************************************************/

template <class V>
inline JSize
JHashTable<V>::HashToIndex
	(
	JHashValue hash
	)
	const
{
	return hash & itsMaxIndex;
}

#include "JHashTable.tmpl"
#include "JHashRecord.tmpl"
#include "JHashCursor.tmpl"
#include "JConstHashCursor.tmpl"

#endif
