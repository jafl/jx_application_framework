/******************************************************************************
 JMMRecord.h

	Interface for the JMMRecord class.

	Copyright (C) 1997 by Dustin Laurence.  All rights reserved.

	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#ifndef _H_JMMRecord
#define _H_JMMRecord

#include <jTypes.h>

#include <stdlib.h> // For size_t

	class JString;

// A POD type with the same data members as JMMRecord
struct JMMRecordData
{
	// We could easily be storing 50,000 or more entries, so using the minimum
	// possible space is crucial.  You can use PrintLayout() to help choose the
	// layout and types carefully for a given architecture.

	// These quantities are those most likely to be > 32 bits on some
	// architectures, so keep them together
	const void*      itsAddress;
	const JUtf8Byte* itsNewFile;
	const JUtf8Byte* itsDeleteFile;
	size_t           itsSize;       // Likely sizeof(size_t) == sizeof(void*)

	// These don't need to be 64 bits on 64-bit architectures, and
	// shouldn't be 16 bits on 16-bit int implementations, so we can use
	// 32-bit quantities and hope that the compiler will not align them on
	// 64-bits on 64-bit architectures.  If anyone has a source file with
	// 4.3 billion lines or code that needs to allocate 4.3*10^9 memory
	// blocks, *please* contact the JX team.  And then seek help! :-)

	JUInt32  itsID;
	JUInt32  itsNewLine;
	JUInt32  itsDeleteLine;

	unsigned itsMark              :1;
	unsigned itsArrayNewFlag      :1;
	unsigned itsArrayDeleteFlag   :1;
	unsigned itsManagerMemoryFlag :1;
};

class JMMRecord : private JMMRecordData
{
public:

	JMMRecord();
	JMMRecord(const JUInt32 id, const void* address, const size_t size,
			  const JUtf8Byte* file, const JUInt32 lineNumber,
			  const JBoolean array, const JBoolean managerMemory);
	// Save 4 bytes (on many architectures) by having no virtuals, even the destructor
	// ~JMMRecord(); // Warning: not virtual!

	// Accept built-in version!
	//	JMMRecord(const JMMRecord& source);
	// Why won't the compiler generate a built-in version for this one?  Bit-fields?
	// const JMMRecord& operator=(const JMMRecord& source);

	JUInt32          GetID() const;

	const void*      GetAddress() const;
	size_t           GetSize() const;

	const JUtf8Byte* GetNewFile() const;
	JUInt32          GetNewLine() const;

	const JUtf8Byte* GetDeleteFile() const;
	JUInt32          GetDeleteLine() const;

	void SetDeleteLocation(const JUtf8Byte* deleteFile, const JSize deleteLine,
						   const JBoolean arrayDelete);

	JBoolean IsDeleted() const;

	JBoolean IsMarked() const;
	void     SetMarked(const JBoolean yesNo);

	JBoolean ArrayNew() const;
	JBoolean ArrayDelete() const;

	const JUtf8Byte* NewTypeName() const;
	const JUtf8Byte* DeleteTypeName() const;

	static const JUtf8Byte* TypeName(const unsigned isArray);

	JBoolean    IsManagerMemory() const;

	void	StreamForDebug(ostream& output) const;
//	JString Print() const;
	void PrintLayout();
};

/******************************************************************************
 GetID

 *****************************************************************************/

inline JUInt32
JMMRecord::GetID() const
{
	return itsID;
}

/******************************************************************************
 GetAddress

 *****************************************************************************/

inline const void*
JMMRecord::GetAddress() const
{
	return itsAddress;
}

/******************************************************************************
 GetSize

 *****************************************************************************/

inline size_t
JMMRecord::GetSize() const
{
	return itsSize;
}

/******************************************************************************
 GetNewFile

 *****************************************************************************/

inline const JUtf8Byte*
JMMRecord::GetNewFile() const
{
	return itsNewFile;
}

/******************************************************************************
 GetNewLine

 *****************************************************************************/

inline JUInt32
JMMRecord::GetNewLine() const
{
	return itsNewLine;
}

/******************************************************************************
 GetDeleteFile

 *****************************************************************************/

inline const JUtf8Byte*
JMMRecord::GetDeleteFile() const
{
	return itsDeleteFile;
}

/******************************************************************************
 GetDeleteLine

 *****************************************************************************/

inline JUInt32
JMMRecord::GetDeleteLine() const
{
	return itsDeleteLine;
}

/******************************************************************************
 IsDeleted

 *****************************************************************************/

inline JBoolean
JMMRecord::IsDeleted() const
{
	return JConvertToBoolean(itsDeleteFile != NULL);
}

/******************************************************************************
 IsMarked

 *****************************************************************************/

inline JBoolean
JMMRecord::IsMarked() const
{
	return JConvertToBoolean(itsMark);
}

/******************************************************************************
 SetMarked

 *****************************************************************************/

inline void
JMMRecord::SetMarked
	(
	const JBoolean yesNo
	)
{
	itsMark = yesNo;
}

/******************************************************************************
 ArrayNew

 *****************************************************************************/

inline JBoolean
JMMRecord::ArrayNew() const
{
	return JConvertToBoolean(itsArrayNewFlag);
}

/******************************************************************************
 ArrayDelete

 *****************************************************************************/

inline JBoolean
JMMRecord::ArrayDelete() const
{
	return JConvertToBoolean(itsArrayDeleteFlag);
}

/******************************************************************************
 IsManagerMemory

 *****************************************************************************/

inline JBoolean
JMMRecord::IsManagerMemory() const
{
	return JConvertToBoolean(itsManagerMemoryFlag);
}

#endif
