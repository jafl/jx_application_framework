#ifndef _T_JArrayIterator
#define _T_JArrayIterator

/******************************************************************************
 JArrayIterator.tmpl

	Efficient interation for JArray objects.

	Refer to JListIterator.tmpl for information about interators in general.

	Copyright (C) 1994-2018 by John Lindal.

 ******************************************************************************/

#include "JArrayIterator.h"
#include "JArray.h"
#include "jAssert.h"

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JArrayIterator<T>::JArrayIterator
	(
	const JArray<T>&		theArray,
	const JListT::Position	start,
	const JIndex			index
	)
	:
	JListIterator<T>(theArray, start, index)
{
	itsArray = const_cast<JArray<T>*>(&theArray);
}

template <class T>
JArrayIterator<T>::JArrayIterator
	(
	JArray<T>*				theArray,
	const JListT::Position	start,
	const JIndex			index
	)
	:
	JListIterator<T>(theArray, start, index)
{
	itsArray = theArray;
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JArrayIterator<T>::~JArrayIterator()
{
}

/******************************************************************************
 Prev (virtual)

	Returns true if there is a previous item, fetching the previous
	item in the list and decrementing the iterator position.
	Otherwise returns false without fetching or decrementing.

 ******************************************************************************/

template <class T>
bool
JArrayIterator<T>::Prev
	(
	T*						data,
	const JListT::Action	move
	)
{
	if (this->AtBeginning())
	{
		return false;
	}

	const JCursorPosition cursorPos = this->GetCursor();

	*data = itsArray->GetElement(cursorPos);

	if (move)
	{
		this->SetCursor(cursorPos-1);
	}
	return true;
}

/******************************************************************************
 Next (virtual)

	Returns true if there is a next item, fetching the next
	item in the list and incrementing the iterator position.
	Otherwise returns false without fetching or incrementing.

 ******************************************************************************/

template <class T>
bool
JArrayIterator<T>::Next
	(
	T*						data,
	const JListT::Action	move
	)
{
	if (this->AtEnd())
	{
		return false;
	}

	const JCursorPosition cursorPos = this->GetCursor() + 1;

	*data = itsArray->GetElement(cursorPos);

	if (move)
	{
		this->SetCursor(cursorPos);
	}
	return true;
}

/******************************************************************************
 SkipPrev (virtual)

 ******************************************************************************/

template <class T>
void
JArrayIterator<T>::SkipPrev
	(
	const JSize count
	)
{
	const JCursorPosition cursorPos = this->GetCursor();
	this->SetCursor(count < cursorPos ? cursorPos - count : 0);
}

/******************************************************************************
 SkipNext (virtual)

 ******************************************************************************/

template <class T>
void
JArrayIterator<T>::SkipNext
	(
	const JSize count
	)
{
	const JCursorPosition cursorPos = this->GetCursor();
	this->SetCursor(JMin(itsArray->GetElementCount(), cursorPos + count));
}

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverloaded-virtual"
// JPtrArrayIterator hides these functions

/******************************************************************************
 SetPrev (virtual)

	Returns true if we have a non-const JArray<T>* and
	there is a previous item.

 ******************************************************************************/

template <class T>
bool
JArrayIterator<T>::SetPrev
	(
	const T&				data,
	const JListT::Action	move
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj) || this->AtBeginning())
	{
		return false;
	}

	const JCursorPosition cursorPos = this->GetCursor();

	itsArray->SetElement(cursorPos, data);
	if (move)
	{
		this->SetCursor(cursorPos-1);
	}
	return true;
}

/******************************************************************************
 SetNext (virtual)

	Returns true if we have a non-const JArray<T>* and
	there is a next item.

 ******************************************************************************/

template <class T>
bool
JArrayIterator<T>::SetNext
	(
	const T&				data,
	const JListT::Action	move
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj) || this->AtEnd())
	{
		return false;
	}

	const JCursorPosition cursorPos = this->GetCursor() + 1;

	itsArray->SetElement(cursorPos, data);
	if (move)
	{
		this->SetCursor(cursorPos);
	}
	return true;
}

#pragma GCC diagnostic pop

/******************************************************************************
 RemovePrev (virtual)

	Returns true if we have a non-const JArray<T>* and
	there is at least one previous item.

 ******************************************************************************/

template <class T>
bool
JArrayIterator<T>::RemovePrev
	(
	const JSize count
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj) || this->AtBeginning())
	{
		return false;
	}

	itsArray->RemovePrevElements(this->GetCursor(), count);
	return true;
}

/******************************************************************************
 RemoveNext (virtual)

	Returns true if we have a non-const JArray<T>* and
	there is at least one next item.

 ******************************************************************************/

template <class T>
bool
JArrayIterator<T>::RemoveNext
	(
	const JSize count
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj) || this->AtEnd())
	{
		return false;
	}

	itsArray->RemoveNextElements(this->GetCursor()+1, count);
	return true;
}

/******************************************************************************
 Insert (virtual)

	Returns true if we have a non-const JArray<T>*.

 ******************************************************************************/

template <class T>
bool
JArrayIterator<T>::Insert
	(
	const T& data
	)
{
	JList<T>* obj;
	if (!this->GetList(&obj))
	{
		return false;
	}

	itsArray->InsertElementAtIndex(this->GetCursor()+1, data);
	return true;
}

/******************************************************************************
 ListChanged (virtual protected)

	Respond to changes in itsConstList and recursively tell the next
	iterator in the list to do the same.  Assuming that only a handful of
	iterators are ever in a list, recursion should be safe.

 ******************************************************************************/

template <class T>
void
JArrayIterator<T>::ListChanged
	(
	const JBroadcaster::Message& message
	)
{
	JListIterator<T>::ListChanged(message);

	if (message.Is(JListT::kGoingAway))
	{
		itsArray = nullptr;
	}
}

#endif
