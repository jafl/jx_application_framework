/******************************************************************************
 JRange.tmpl

	Lightweight template class for storing a range of integer values.  The
	range is considered to be empty if last < first.  The range contains a
	value index if last == first.

	The special value (0,0) represents no range at all--this is different than
	a zero length string.  A regular expression subexpression might match a
	zero-length expression at a particular point in a string, which is not the
	same as not matching at all; '^(x*)|(a)' matching on 'bb' would return a
	positive match of (1,0) indicating an overall match of a zero length string
	at the beginning and subexpression matches of (1,0) and (0,0) indicating
	that the first parenthesized subexpression matched the entire overall match
	while the second did not participate in the match at all.

	BASE CLASS = none

	Copyright (C) 1998-2021 by John Lindal.

 *****************************************************************************/

#include "JRange.h"
#include "JMinMax.h"
#include <limits>
#include "jAssert.h"

template <class T>
const T JRange<T>::min = std::numeric_limits<T>::min();

/******************************************************************************
 Constructor

 *****************************************************************************/

template <class T>
JRange<T>::JRange
	()
	:
	first(0),
	last(0)
{
	static_assert( std::numeric_limits<T>::is_integer );
}

template <class T>
JRange<T>::JRange
	(
	const T firstIndex,
	const T lastIndex
	)
	:
	first(firstIndex),
	last(lastIndex)
{
	static_assert( std::numeric_limits<T>::is_integer );
}

/******************************************************************************
 operator+= (covering)

 *****************************************************************************/

template <class T>
JRange<T>&
JRange<T>::operator+=
	(
	const JRange<T>& range
	)
{
	*this = JCovering(*this, range);
	return *this;
}

/******************************************************************************
 JCovering

 *****************************************************************************/

template <class T>
JRange<T>
JCovering
	(
	const JRange<T>& r1,
	const JRange<T>& r2
	)
{
	const bool n1 = r1.IsNothing();
	const bool n2 = r2.IsNothing();
	if (n1 && n2)
	{
		return JRange<T>();
	}
	else if (n1)
	{
		return r2;
	}
	else if (n2)
	{
		return r1;
	}
	else
	{
		return JRange<T>( JMin(r1.first, r2.first),
						  JMax(r1.IsEmpty() ? r1.first-1 : r1.last,
							   r2.IsEmpty() ? r2.first-1 : r2.last) );
	}
}

/******************************************************************************
 JIntersection

	Returns true if the result is not empty.

 *****************************************************************************/

template <class T>
bool
JIntersection
	(
	const JRange<T>&	r1,
	const JRange<T>&	r2,
	JRange<T>*			result
	)
{
	const T min = JMax(r1.first, r2.first);
	const T max = JMin(r1.last,  r2.last);
	if (max >= min)
	{
		result->Set(min, max);
		return true;
	}
	else
	{
		result->SetToNothing();
		return false;
	}
}

/******************************************************************************
 Stream operators for JRange

 ******************************************************************************/

template <class T>
std::istream&
operator>>
	(
	std::istream&	input,
	JRange<T>&		range
	)
{
	input >> range.first >> range.last;
	return input;
}

template <class T>
std::ostream&
operator<<
	(
	std::ostream&		output,
	const JRange<T>&	range
	)
{
	output << range.first << ' ' << range.last;
	return output;
}
