#ifndef _T_JArray
#define _T_JArray

/******************************************************************************
 JArray.tmpl

							The JArray Template Class

	Template for a dynamically sized array.  The data is stored contiguously.

	*** Since memcpy and memmove are used for large scale rearrangement of
		the array items, this can -only- be used for structs.
		To store objects, use the JPtrArray template class.

	We do not override ToString():  Since this function is virtual, it is
	always instantiated.  Thus, we cannot print the values, because they
	might not have operator<<

	BASE CLASS = JList

	Copyright (C) 1994-97 by John Lindal.

 ******************************************************************************/

#include "JArray.h"
#include "JMinMax.h"
#include <string.h>		// for memcpy,memmove
#include <stdlib.h>		// for qsort
// we are included by jAssert.h

/******************************************************************************
 Constructor

 ******************************************************************************/

template <class T>
JArray<T>::JArray
	(
	const JSize blockSize
	)
	:
	JList<T>()
{
	assert( blockSize > 0 );

	itsItems = jnew T [ blockSize ];
	assert( itsItems != nullptr );

	itsSlotCount = blockSize;
	itsBlockSize = blockSize;
}

/******************************************************************************
 Copy constructor

 ******************************************************************************/

template <class T>
JArray<T>::JArray
	(
	const JArray<T>& source
	)
	:
	JList<T>(source)
{
	itsItems = nullptr;		// makes delete [] safe inside CopyArray

	CopyArray(source);
}

/******************************************************************************
 Move constructor

 ******************************************************************************/

template <class T>
JArray<T>::JArray
	(
	JArray<T>&& dyingSource
	)
	noexcept
	:
	JList<T>(dyingSource),
	itsItems(dyingSource.itsItems),
	itsSlotCount(dyingSource.itsSlotCount),
	itsBlockSize(dyingSource.itsBlockSize)
{
	dyingSource.itsItems = nullptr;
}

/******************************************************************************
 Destructor

 ******************************************************************************/

template <class T>
JArray<T>::~JArray()
{
	jdelete [] itsItems;
}

/******************************************************************************
 Assignment operator

 ******************************************************************************/

template <class T>
JArray<T>&
JArray<T>::operator=
	(
	const JArray<T>& source
	)
{
	if (this == &source)
	{
		return *this;
	}

	JCollection::operator=(source);		// JList::operator= is private

	CopyArray(source);
	JArray<T>::ListAssigned(source);

	return *this;
}

/******************************************************************************
 CopyArray (private)

	Copies everything from source.

 ******************************************************************************/

template <class T>
void
JArray<T>::CopyArray
	(
	const JArray<T>& source
	)
{
	itsSlotCount = source.itsSlotCount;
	itsBlockSize = source.itsBlockSize;

	jdelete [] itsItems;
	itsItems = jnew T [ itsSlotCount ];
	assert( itsItems != nullptr );

	memcpy(itsItems, source.itsItems, itsSlotCount * sizeof(T));
}

/******************************************************************************
 Cast to T*

 ******************************************************************************/

template <class T>
JArray<T>::operator const T*()
	const
{
	return itsItems;
}

/******************************************************************************
 GetCArray

 ******************************************************************************/

template <class T>
const T*
JArray<T>::GetCArray()
	const
{
	return itsItems;
}

/******************************************************************************
 AllocateCArray

 ******************************************************************************/

template <class T>
T*
JArray<T>::AllocateCArray()
	const
{
	const JSize count = this->GetItemCount();

	T* data = jnew T [ count ];
	assert( data != nullptr );

	memcpy(data, itsItems, count * sizeof(T));

	return data;
}

/******************************************************************************
 PrependItem

 ******************************************************************************/

template <class T>
void
JArray<T>::PrependItem
	(
	const T& data
	)
{
	InsertItemAtIndex(1, data);
}

/******************************************************************************
 AppendItem

 ******************************************************************************/

template <class T>
void
JArray<T>::AppendItem
	(
	const T& data
	)
{
	InsertItemAtIndex(this->GetItemCount() + 1, data);
}

/******************************************************************************
 InsertItemAtIndex

	Insert an item into the array at the specified index. Any items
	at or below index are moved down. If index is any value greater
	than the current size, then the item is appended to the end
	of the array.

 ******************************************************************************/

template <class T>
void
JArray<T>::InsertItemAtIndex
	(
	const JIndex	index,
	const T&		data
	)
{
	const JIndex trueIndex = CreateItem(index);
	StoreItem(trueIndex, data);

	JListT::ItemsInserted message(trueIndex, 1);
	JBroadcaster::Broadcast(message);
	JList<T>::NotifyIterators(message);
}

/******************************************************************************
 CreateItem (private)

	Insert space for an item into the array at the specified index.
	Any items at or above index are moved down. If index is any value greater
	than the current size, then the item is appended to the end
	of the array.

	The correct index of the jnew item is returned.

 ******************************************************************************/

template <class T>
JIndex
JArray<T>::CreateItem
	(
	const JIndex index
	)
{
	assert( index > 0 );

	const JSize itemCount = this->GetItemCount();
	if (itemCount >= itsSlotCount)
	{
		AddSlots();
	}

	JIndex trueIndex = index;
	if (trueIndex <= itemCount)
	{
		memmove(GetItemPtr(trueIndex + 1), GetItemPtr(trueIndex),
				(itemCount - trueIndex + 1) * sizeof(T));
	}
	else
	{
		trueIndex = itemCount + 1;
	}

	this->ItemAdded();

	return trueIndex;
}

/******************************************************************************
 RemoveItem

 ******************************************************************************/

template <class T>
void
JArray<T>::RemoveItem
	(
	const JIndex index
	)
{
	RemoveNextItems(index, 1);
}

/******************************************************************************
 RemoveNextItems

 ******************************************************************************/

template <class T>
void
JArray<T>::RemoveNextItems
	(
	const JIndex	firstIndex,
	const JSize		origCount
	)
{
	if (firstIndex == 1 && origCount >= this->GetItemCount())
	{
		RemoveAll();
		return;
	}

	assert( this->IndexValid(firstIndex) );

	const JSize itemCount = this->GetItemCount(),
				lastIndex    = JMin(itemCount, firstIndex + origCount-1),
				count        = lastIndex - firstIndex + 1;

	this->SetItemCount(itemCount - count);

	if (lastIndex < itemCount)
	{
		memmove(GetItemPtr(firstIndex), GetItemPtr(lastIndex + 1),
				(itemCount - lastIndex) * sizeof(T));
	}

	while (itsSlotCount > this->GetItemCount() + itsBlockSize)
	{
		RemoveSlots();
	}

	JListT::ItemsRemoved message(firstIndex, count);
	JBroadcaster::Broadcast(message);
	JList<T>::NotifyIterators(message);
}

/******************************************************************************
 RemovePrevItems

 ******************************************************************************/

template <class T>
void
JArray<T>::RemovePrevItems
	(
	const JIndex	lastIndex,
	const JSize		origCount
	)
{
	const JSize firstIndex   = origCount <= lastIndex ? lastIndex-origCount+1 : 1,
				count        = lastIndex - firstIndex + 1;

	RemoveNextItems(firstIndex, count);
}

/******************************************************************************
 RemoveItems

 ******************************************************************************/

template <class T>
void
JArray<T>::RemoveItems
	(
	const JIndexRange& range
	)
{
	RemoveNextItems(range.first, range.GetCount());
}

/******************************************************************************
 RemoveItems

 ******************************************************************************/

template <class T>
void
JArray<T>::RemoveItems
	(
	const JListT::ItemsRemoved& info
	)
{
	RemoveNextItems(info.GetFirstIndex(), info.GetCount());
}

/******************************************************************************
 RemoveAll

 ******************************************************************************/

template <class T>
void
JArray<T>::RemoveAll()
{
	if (!this->IsEmpty())
	{
		JListT::ItemsRemoved message(1, this->GetItemCount());

		this->SetItemCount(0);
		ResizeMemoryAllocation(itsBlockSize);

		JBroadcaster::Broadcast(message);
		JList<T>::NotifyIterators(message);
	}
}

/******************************************************************************
 GetItem

 ******************************************************************************/

template <class T>
T
JArray<T>::GetItem
	(
	const JIndex index
	)
	const
{
	assert( this->IndexValid(index) );

	return ProtectedGetItem(index);
}

/******************************************************************************
 ProtectedGetItem (protected)

 ******************************************************************************/

template <class T>
const T&
JArray<T>::ProtectedGetItem
	(
	const JIndex index
	)
	const
{
	return itsItems[index - 1];
}

/******************************************************************************
 SetItem

 ******************************************************************************/

template <class T>
void
JArray<T>::SetItem
	(
	const JIndex	index,
	const T&		data
	)
{
	assert( this->IndexValid(index) );

	StoreItem(index, data);

	JBroadcaster::Broadcast(JListT::ItemsChanged(index, 1));
}

/******************************************************************************
 GetItemFromEnd

 ******************************************************************************/

template <class T>
T
JArray<T>::GetItemFromEnd
	(
	const JIndex index
	)
	const
{
	return GetItem(this->GetIndexFromEnd(index));
}

/******************************************************************************
 SetItemFromEnd

 ******************************************************************************/

template <class T>
void
JArray<T>::SetItemFromEnd
	(
	const JIndex	index,
	const T&		data
	)
{
	SetItem(this->GetIndexFromEnd(index), data);
}

/******************************************************************************
 GetFirstItem

 ******************************************************************************/

template <class T>
T
JArray<T>::GetFirstItem()
	const
{
	return GetItem(1);
}

/******************************************************************************
 GetLastItem

 ******************************************************************************/

template <class T>
T
JArray<T>::GetLastItem()
	const
{
	return GetItem(this->GetItemCount());
}

/******************************************************************************
 MoveItemToIndex

 ******************************************************************************/

template <class T>
void
JArray<T>::MoveItemToIndex
	(
	const JIndex currentIndex,
	const JIndex newIndex
	)
{
	assert( this->IndexValid(currentIndex) );
	assert( this->IndexValid(newIndex) );

	if (currentIndex == newIndex)
	{
		return;
	}

	const T savedItem = ProtectedGetItem(currentIndex);

	if (currentIndex < newIndex)
	{
		memmove(GetItemPtr(currentIndex), GetItemPtr(currentIndex + 1),
				(newIndex - currentIndex) * sizeof(T));
	}
	else if (currentIndex > newIndex)
	{
		memmove(GetItemPtr(newIndex + 1), GetItemPtr(newIndex),
				(currentIndex - newIndex) * sizeof(T));
	}

	StoreItem(newIndex, savedItem);
	JBroadcaster::Broadcast(JListT::ItemMoved(currentIndex, newIndex));
}

/******************************************************************************
 MoveItemToIndex

 ******************************************************************************/

template <class T>
void
JArray<T>::MoveItemToIndex
	(
	const JListT::ItemMoved& info
	)
{
	MoveItemToIndex(info.GetOrigIndex(), info.GetNewIndex());
}

/******************************************************************************
 SwapItems

 ******************************************************************************/

template <class T>
void
JArray<T>::SwapItems
	(
	const JIndex index1,
	const JIndex index2
	)
{
	assert( this->IndexValid(index1) );
	assert( this->IndexValid(index2) );

	if (index1 == index2)
	{
		return;
	}

	const T savedItem = ProtectedGetItem(index1);
	StoreItem(index1, ProtectedGetItem(index2));
	StoreItem(index2, savedItem);

	JBroadcaster::Broadcast(JListT::ItemsSwapped(index1, index2));
}

/******************************************************************************
 SwapItems

 ******************************************************************************/

template <class T>
void
JArray<T>::SwapItems
	(
	const JListT::ItemsSwapped& info
	)
{
	SwapItems(info.GetIndex1(), info.GetIndex2());
}

/******************************************************************************
 Sort (virtual)

	We minimize the number of moves (O(N)) because MoveItemToIndex()
	invokes JBroadcaster::Broadcast(), which can take arbitrary amounts of time.

	By using insertion sort to sort item k+1 into the already sorted
	list of k items, we obtain O(N log N) comparisons.

	The number of moves is always O(N^2).

 ******************************************************************************/

template <class T>
void
JArray<T>::Sort()
{
	const JSize count = this->GetItemCount();
	if (count < 2)
	{
		return;
	}

	bool isDuplicate;
	for (JIndex i=2; i<=count; i++)
	{
		const T& data = ProtectedGetItem(i);

		this->SetItemCount(i-1);		// safe because search doesn't modify data
		const JIndex j = GetInsertionSortIndex(data, &isDuplicate);
		this->SetItemCount(count);

		if (j != i)
		{
			MoveItemToIndex(i, j);
		}
	}
}

/******************************************************************************
 InsertSorted

	Returns true if the item was inserted.  Obviously, this is only
	useful if insertIfDuplicate==false.

	If index!=nullptr, it contains the index where the item was inserted.

 ******************************************************************************/

template <class T>
bool
JArray<T>::InsertSorted
	(
	const T&	data,
	const bool	insertIfDuplicate,
	JIndex*		index
	)
{
	bool isDuplicate;
	const JIndex i = GetInsertionSortIndex(data, &isDuplicate);
	if (!isDuplicate || insertIfDuplicate)
	{
		InsertItemAtIndex(i, data);
		if (index != nullptr)
		{
			*index = i;
		}
		return true;
	}
	else
	{
		if (index != nullptr)
		{
			*index = 0;
		}
		return false;
	}
}

/******************************************************************************
 GetInsertionSortIndex

	Returns index where jnew item should be inserted in order to keep
	the list sorted.  If there is an item that matches the given one,
	*isDuplicate is set to true.

 ******************************************************************************/

template <class T>
JIndex
JArray<T>::GetInsertionSortIndex
	(
	const T&	data,
	bool*		isDuplicate
	)
	const
{
	bool found;
	JIndex index = SearchSortedOTI(data, JListT::kLastMatch, &found);
	if (found)
	{
		index++;
	}

	if (isDuplicate != nullptr)
	{
		*isDuplicate = found;
	}
	return index;
}

/******************************************************************************
 SearchSorted

	Returns true if the specified target is found.

	"which" specifies what to return if more than one item matches
	the given target.

 ******************************************************************************/

template <class T>
bool
JArray<T>::SearchSorted
	(
	const T&					target,
	const JListT::SearchReturn	which,
	JIndex*						index
	)
	const
{
	bool found;
	*index = SearchSortedOTI(target, which, &found);
	if (!found)
	{
		*index = 0;
	}
	return found;
}

/******************************************************************************
 SearchSortedOTI

	Returns index where the item is or where it should be inserted in
	order to keep the list sorted.  If there is an item that matches the
	given one, *found is set to true.

	OTI = option to insert

 ******************************************************************************/

template <class T>
JIndex
JArray<T>::SearchSortedOTI
	(
	const T&					target,
	const JListT::SearchReturn	which,
	bool*						found
	)
	const
{
	std::function<std::weak_ordering(const T&, const T&)>& compare = *JList<T>::GetCompareFunction();

	const JListT::SortOrder sortOrder = JList<T>::GetSortOrder();
	*found = false;

	const JSize count = this->GetItemCount();
	if (count == 0)
	{
		return 1;
	}

	// check first item

	JIndex firstIndex  = 1;
	const T& item1     = ProtectedGetItem(firstIndex);
	std::weak_ordering r1 = compare(target, item1);
	if (r1 == std::weak_ordering::equivalent &&
		(count == 1 || which != JListT::kLastMatch))
	{
		*found = true;
		return 1;
	}
	else if ((sortOrder == JListT::kSortAscending  && r1 == std::weak_ordering::less) ||
			 (sortOrder == JListT::kSortDescending && r1 == std::weak_ordering::greater))
	{
		return 1;
	}
	else if (count == 1)
	{
		return 2;
	}

	// check last item

	JIndex lastIndex      = count;
	const T& item2        = ProtectedGetItem(lastIndex);
	std::weak_ordering r2 = compare(target, item2);
	if (r2 == std::weak_ordering::equivalent &&
		(count == 2 || which != JListT::kFirstMatch))
	{
		*found = true;
		return count;
	}
	else if ((sortOrder == JListT::kSortAscending  && r2 == std::weak_ordering::greater) ||
			 (sortOrder == JListT::kSortDescending && r2 == std::weak_ordering::less))
	{
		return count+1;
	}

	// assert for ascending:  first item <= data <= last item
	// assert for descending: first item >= data >= last item

	// squeeze out the appropriate position for data via binary search

	while (true)
	{
		// Thanks to Joshua Bloch at Google for pointing out that
		// (x+y)/2 doesn't work if x and y are larger than ULONG_MAX/2

		JIndex i      = (firstIndex >> 1) + (lastIndex >> 1) +
						((firstIndex & (JIndex) 1) + (lastIndex & (JIndex) 1))/2;
		const T& item = ProtectedGetItem(i);

		const std::weak_ordering r = compare(target, item);
		if (r == std::weak_ordering::equivalent)
		{
			if (which == JListT::kAnyMatch)
			{
				*found = true;
				return i;
			}
			else if (which == JListT::kFirstMatch)
			{
				lastIndex = i;
				r2        = r;
			}
			else	// which == JListT::kLastMatch
			{
				firstIndex = i;
				r1         = r;
			}
		}
		else if ((sortOrder == JListT::kSortAscending  && r == std::weak_ordering::less) ||
				 (sortOrder == JListT::kSortDescending && r == std::weak_ordering::greater))
		{
			lastIndex = i;
			r2        = r;
		}
		else	// the only other case
		{
			firstIndex = i;
			r1         = r;
		}

		assert( lastIndex >= firstIndex+1 );
		if (lastIndex == firstIndex+1)
		{
			if (which == JListT::kAnyMatch ||
				(r1 != std::weak_ordering::equivalent &&
				 r2 != std::weak_ordering::equivalent))
			{
				// Since we know that target is not equal to either of the
				// bounding items, we can give up when there are no items
				// between the bounds.

				return lastIndex;
			}

			// At this point, we know that we found a match.

			*found = true;
			if (which == JListT::kFirstMatch)
			{
				assert( r2 == std::weak_ordering::equivalent );
				return lastIndex;
			}
			else	// which == JListT::kLastMatch
			{
				assert( which == JListT::kLastMatch &&
						r1 == std::weak_ordering::equivalent );
				return firstIndex;
			}
		}
	}
}

/******************************************************************************
 QuickSort

	Calls qsort() and broadcasts JListT::Sorted afterwards.

	Since qsort() wants the sort order to be encoded in the comparison
	function, and since the comparison function prototype is different,
	we do -not- use the sorting information from JList.

	Do NOT use this for JPtrArrays:

	Downcasting or upcasting a pointer in C++ usually requires changing its
	value to include or exclude parts of the object data.  Casting from
	void* to a base class is therefore fatal because the compiler can't
	perform the adjustment.

 ******************************************************************************/

template <class T>
void
JArray<T>::QuickSort
	(
	int (*compare)(const void*, const void*)
	)
{
	::qsort(itsItems, this->GetItemCount(), sizeof(T), compare);
	JBroadcaster::Broadcast(JListT::Sorted());
}

/******************************************************************************
 GetItemPtr (private)

 ******************************************************************************/

template <class T>
T*
JArray<T>::GetItemPtr
	(
	const JIndex index
	)
{
	return &(itsItems[ index - 1 ]);
}

/******************************************************************************
 StoreItem (private)

	This is used by InsertItemAtIndex and SetItem.

 ******************************************************************************/

template <class T>
void
JArray<T>::StoreItem
	(
	const JIndex	index,
	const T&		data
	)
{
	itsItems[ index - 1 ] = data;
}

/******************************************************************************
 Block size

	itsBlockSize helps prevent constant reallocation of memory in a "noisy"
	environment.  Increase it if you need to add and remove a lot of items
	without reallocating memory.  The larger it is, the more memory can
	potentially be wasted (allocated but not used).

 ******************************************************************************/

template <class T>
JSize
JArray<T>::GetBlockSize()
	const
{
	return itsBlockSize;
}

template <class T>
void
JArray<T>::SetBlockSize
	(
	const JSize newBlockSize
	)
{
	assert( newBlockSize > 0 );

	itsBlockSize = newBlockSize;
}

/******************************************************************************
 AddSlots (private)

	Grows the array by blockSize slots.

 ******************************************************************************/

template <class T>
void
JArray<T>::AddSlots()
{
	ResizeMemoryAllocation(itsSlotCount + itsBlockSize);
}

/******************************************************************************
 RemoveSlots (private)

	Shrinks the array by blockSize slots.

 ******************************************************************************/

template <class T>
void
JArray<T>::RemoveSlots()
{
	if (itsSlotCount > itsBlockSize)
	{
		ResizeMemoryAllocation(itsSlotCount - itsBlockSize);
	}
}

/******************************************************************************
 ResizeMemoryAllocation (private)

	Allocate the specified number of slots for itsItems.

******************************************************************************/

template <class T>
void
JArray<T>::ResizeMemoryAllocation
	(
	const JSize newSlotCount
	)
{
	assert( newSlotCount >= this->GetItemCount() );

	if (newSlotCount != itsSlotCount)
	{
		T* newItems = jnew T [newSlotCount];
		memcpy(newItems, itsItems, this->GetItemCount() * sizeof(T));

		jdelete [] itsItems;
		itsItems     = newItems;
		itsSlotCount = newSlotCount;
	}
}

/******************************************************************************
 NewIterator (virtual)

 ******************************************************************************/

template <class T>
JListIterator<T>*
JArray<T>::NewIterator
	(
	const JListT::Position	start,
	const JIndex			index
	)
{
	JArrayIterator<T>* iter = jnew JArrayIterator<T>(this, start, index);
	assert( iter != nullptr );
	return iter;
}

template <class T>
JListIterator<T>*
JArray<T>::NewIterator
	(
	const JListT::Position	start,
	const JIndex			index
	)
	const
{
	JArrayIterator<T>* iter = jnew JArrayIterator<T>(*this, start, index);
	assert( iter != nullptr );
	return iter;
}

/******************************************************************************
 Range-based for loop

 ******************************************************************************/

template <class T>
const T*
begin
	(
	const JArray<T>& a
	)
{
	return a.GetCArray();
}

template <class T>
const T*
end
	(
	const JArray<T>& a
	)
{
	return (a.GetCArray() + a.GetItemCount());
}

#endif
