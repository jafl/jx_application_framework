/******************************************************************************
 tesptrtmap.cc

	Test code for the JStringPtrMap class and related code.

	Copyright (C) 1997 by Dustin Laurence.  All rights reserved.
	
	Base code generated by Codemill v0.1.0

 *****************************************************************************/

#include <JStringPtrMap.h>
#include <JStringPtrMapCursor.h>
#include <string.h>

#include <jAssert.h>

	void PrintError(long line);

	const JSize gNumStrings = 16;

/******************************************************************************
 main

 *****************************************************************************/

int
main()
{
	JSize i;

	std::cout << "Beginning JStringPtrMap test.  No news is good news." << std::endl;

	const JCharacter* keyConst = "testkey";
	JCharacter* const key = jnew JCharacter[strlen(keyConst)+1];
	strcpy(key, keyConst);

// Mostly just test PtrMap specific things like DeleteAll

	{
	// Ridiculous table size to really exercise resizer
		JStringPtrMap<JCharacter> ptrMap(JPtrArrayT::kDeleteAllAsArrays);

	// Insert keys
		for (i=0;i<gNumStrings;i++)
			{
			key[0] = 'A' + i;
			JCharacter* newValue = jnew JCharacter[strlen(key)+1];
			strcpy(newValue, key);
			if ( !ptrMap.SetNewElement(key, newValue) )
				{
				PrintError(__LINE__);
				}
			}
		if (ptrMap.GetElementCount() != gNumStrings)
			{
			PrintError(__LINE__);
			std::cout << "   Map contains wrong number of elements!" << std::endl;
			}
		if (ptrMap.GetLoadCount() != gNumStrings)
			{
			PrintError(__LINE__);
			std::cout << "   Map contains extra deleted elements!" << std::endl;
			}

		{
// Compare with cursor
		JSize count = 0;
		JStringPtrMapCursor<JCharacter> cursor(&ptrMap);
		while ( cursor.Next() )
			{
			const JCharacter* thisKey = cursor.GetKey();
			JCharacter* cursorValue = cursor.GetValue();
			if (strcmp(thisKey, cursorValue) != 0)
				{
				PrintError(__LINE__);
				std::cout << "   Cursor found value " << cursorValue << ", should have been "
				     << thisKey << "!" << std::endl;
				}
			JCharacter* mapValue;
			JBoolean found = ptrMap.GetElement(thisKey, &mapValue);
			if (!found)
				{
				PrintError(__LINE__);
				std::cout << "   Cursor and map find inconsistent keys!" << std::endl;
				}
			if (strcmp(cursorValue, mapValue) != 0)
				{
				PrintError(__LINE__);
				std::cout << "   Map found value " << mapValue
				     << " inconsistent with cursor value "
				     << cursorValue << "!" << std::endl;
				}
			++count;
			}
		if (count != gNumStrings)
			{
			PrintError(__LINE__);
			std::cout << "   Cursor counted wrong number of elements!" << std::endl;
			}
		}
	}

	jdelete[] key;

	std::cout << "Finished JStringPtrMap test.  If nothing printed out, it passed." << std::endl;

//	JMemoryManager::Instance()->SetPrintExitStats(kJTrue);

	return 0;
}

/******************************************************************************
 PrintError

 *****************************************************************************/

void
PrintError
	(
	long line
	)
{
	std::cout << "*** testptrmap error at line " << line << std::endl;
}
